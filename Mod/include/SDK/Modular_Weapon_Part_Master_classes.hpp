#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Modular_Weapon_Part_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_MaterialLayer_structs.hpp"
#include "Enum_Weapon_Material_Type_structs.hpp"
#include "Enum_MaterialQuality_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Modular_Weapon_Part_Master.Modular_Weapon_Part_Master_C
// 0x0248 (0x04D8 - 0x0290)
class AModular_Weapon_Part_Master_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Scabbard;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxCollision;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BaseSk;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TipSk;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        base;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Tip;                                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Rigidity;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Color_Group;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_MaterialLayer                            Master_Material;                                   // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Normal_Texture;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint;                                              // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Def_Rating;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stab_Rating;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<Enum_MaterialLayer>                    Materials_Array;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Dynamic_Material;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<int32, Enum_MaterialLayer>               Module_Material_Groups;                            // 0x0350(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMap<int32, struct FLinearColor>              Module_Color_Groups;                               // 0x03A0(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Complex_Material;                                  // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SubModule_1;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 SubModule_2;                                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Affect_Sound;                                      // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Sound_Int;                                         // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sound_Pitch;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sound_Threshold;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Scabbard;                                      // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Icon;                                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Affects_Icon;                                      // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Weapon_Material_Type                     Material_Type;                                     // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_MaterialQuality                          Quality;                                           // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_Weapon_Material_Type, Enum_MaterialLayer> Module_Material_Groups_0;                          // 0x0438(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMap<Enum_Weapon_Material_Type, struct FLinearColor> Module_Color_Groups_0;                             // 0x0488(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)

public:
	void ExecuteUbergraph_Modular_Weapon_Part_Master(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Modular_Weapon_Part_Master_C">();
	}
	static class AModular_Weapon_Part_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AModular_Weapon_Part_Master_C>();
	}
};
static_assert(alignof(AModular_Weapon_Part_Master_C) == 0x000008, "Wrong alignment on AModular_Weapon_Part_Master_C");
static_assert(sizeof(AModular_Weapon_Part_Master_C) == 0x0004D8, "Wrong size on AModular_Weapon_Part_Master_C");
static_assert(offsetof(AModular_Weapon_Part_Master_C, UberGraphFrame) == 0x000290, "Member 'AModular_Weapon_Part_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Scabbard) == 0x000298, "Member 'AModular_Weapon_Part_Master_C::Scabbard' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, BoxCollision) == 0x0002A0, "Member 'AModular_Weapon_Part_Master_C::BoxCollision' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, BaseSk) == 0x0002A8, "Member 'AModular_Weapon_Part_Master_C::BaseSk' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, TipSk) == 0x0002B0, "Member 'AModular_Weapon_Part_Master_C::TipSk' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, SkeletalMesh) == 0x0002B8, "Member 'AModular_Weapon_Part_Master_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, StaticMesh) == 0x0002C0, "Member 'AModular_Weapon_Part_Master_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Scene) == 0x0002C8, "Member 'AModular_Weapon_Part_Master_C::Scene' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, base) == 0x0002D0, "Member 'AModular_Weapon_Part_Master_C::base' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Tip) == 0x0002D8, "Member 'AModular_Weapon_Part_Master_C::Tip' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Rigidity) == 0x0002E0, "Member 'AModular_Weapon_Part_Master_C::Rigidity' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Color_Group) == 0x0002E8, "Member 'AModular_Weapon_Part_Master_C::Color_Group' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Scale) == 0x0002F0, "Member 'AModular_Weapon_Part_Master_C::Scale' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Master_Material) == 0x000308, "Member 'AModular_Weapon_Part_Master_C::Master_Material' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Normal_Texture) == 0x000310, "Member 'AModular_Weapon_Part_Master_C::Normal_Texture' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Tint) == 0x000318, "Member 'AModular_Weapon_Part_Master_C::Tint' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Def_Rating) == 0x000328, "Member 'AModular_Weapon_Part_Master_C::Def_Rating' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Stab_Rating) == 0x000330, "Member 'AModular_Weapon_Part_Master_C::Stab_Rating' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Materials_Array) == 0x000338, "Member 'AModular_Weapon_Part_Master_C::Materials_Array' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Dynamic_Material) == 0x000348, "Member 'AModular_Weapon_Part_Master_C::Dynamic_Material' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Module_Material_Groups) == 0x000350, "Member 'AModular_Weapon_Part_Master_C::Module_Material_Groups' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Module_Color_Groups) == 0x0003A0, "Member 'AModular_Weapon_Part_Master_C::Module_Color_Groups' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Complex_Material) == 0x0003F0, "Member 'AModular_Weapon_Part_Master_C::Complex_Material' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, SubModule_1) == 0x0003F8, "Member 'AModular_Weapon_Part_Master_C::SubModule_1' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, SubModule_2) == 0x000400, "Member 'AModular_Weapon_Part_Master_C::SubModule_2' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Affect_Sound) == 0x000408, "Member 'AModular_Weapon_Part_Master_C::Affect_Sound' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Sound_Int) == 0x00040C, "Member 'AModular_Weapon_Part_Master_C::Sound_Int' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Sound_Pitch) == 0x000410, "Member 'AModular_Weapon_Part_Master_C::Sound_Pitch' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Sound_Threshold) == 0x000418, "Member 'AModular_Weapon_Part_Master_C::Sound_Threshold' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Set_Scabbard) == 0x000420, "Member 'AModular_Weapon_Part_Master_C::Set_Scabbard' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Icon) == 0x000428, "Member 'AModular_Weapon_Part_Master_C::Icon' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Affects_Icon) == 0x000430, "Member 'AModular_Weapon_Part_Master_C::Affects_Icon' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Material_Type) == 0x000431, "Member 'AModular_Weapon_Part_Master_C::Material_Type' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Quality) == 0x000432, "Member 'AModular_Weapon_Part_Master_C::Quality' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Module_Material_Groups_0) == 0x000438, "Member 'AModular_Weapon_Part_Master_C::Module_Material_Groups_0' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Part_Master_C, Module_Color_Groups_0) == 0x000488, "Member 'AModular_Weapon_Part_Master_C::Module_Color_Groups_0' has a wrong offset!");

}

