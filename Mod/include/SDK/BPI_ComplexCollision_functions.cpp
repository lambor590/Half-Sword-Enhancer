#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ComplexCollision

#include "Basic.hpp"

#include "BPI_ComplexCollision_classes.hpp"
#include "BPI_ComplexCollision_parameters.hpp"


namespace SDK
{

// Function BPI_ComplexCollision.BPI_ComplexCollision_C.Deal Complex Damage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Hit_Component                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Collided_Component                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             Hit_Bone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Velocity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Impulse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Power                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Stab_Rate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rigidity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Blunt_Destruction_Int                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold_In                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Damage_Parent_Bone_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Kick_Power                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    Hit_Box                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        Hit_Surface                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage_Out                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Rate_Out                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rigidity_Out                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Material_Density_Out                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold_Out                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ComplexCollision_C::Deal_Complex_Damage(class UPrimitiveComponent* Hit_Component, class UPrimitiveComponent* Collided_Component, class FName Hit_Bone, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Hit_Velocity, const struct FVector& Hit_Impulse, double Cutting_Power, double Stab_Rate, double Rigidity, int32 Blunt_Destruction_Int, bool Lower_Threshold_In, bool Damage_Parent_Bone_, double Kick_Power, class UBoxComponent* Hit_Box, EPhysicalSurface* Hit_Surface, double* Damage_Out, double* Cutting_Rate_Out, double* Rigidity_Out, double* Material_Density_Out, bool* Lower_Threshold_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ComplexCollision_C", "Deal Complex Damage");

	Params::BPI_ComplexCollision_C_Deal_Complex_Damage Parms{};

	Parms.Hit_Component = Hit_Component;
	Parms.Collided_Component = Collided_Component;
	Parms.Hit_Bone = Hit_Bone;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Hit_Velocity = std::move(Hit_Velocity);
	Parms.Hit_Impulse = std::move(Hit_Impulse);
	Parms.Cutting_Power = Cutting_Power;
	Parms.Stab_Rate = Stab_Rate;
	Parms.Rigidity = Rigidity;
	Parms.Blunt_Destruction_Int = Blunt_Destruction_Int;
	Parms.Lower_Threshold_In = Lower_Threshold_In;
	Parms.Damage_Parent_Bone_ = Damage_Parent_Bone_;
	Parms.Kick_Power = Kick_Power;
	Parms.Hit_Box = Hit_Box;

	UObject::ProcessEvent(Func, &Parms);

	if (Hit_Surface != nullptr)
		*Hit_Surface = Parms.Hit_Surface;

	if (Damage_Out != nullptr)
		*Damage_Out = Parms.Damage_Out;

	if (Cutting_Rate_Out != nullptr)
		*Cutting_Rate_Out = Parms.Cutting_Rate_Out;

	if (Rigidity_Out != nullptr)
		*Rigidity_Out = Parms.Rigidity_Out;

	if (Material_Density_Out != nullptr)
		*Material_Density_Out = Parms.Material_Density_Out;

	if (Lower_Threshold_Out != nullptr)
		*Lower_Threshold_Out = Parms.Lower_Threshold_Out;
}

}

