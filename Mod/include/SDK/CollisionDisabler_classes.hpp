#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CollisionDisabler

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class CollisionDisabler.CollisionDisablerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCollisionDisablerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelModifyCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB);
	static void DisableCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB, float TimeToExpiration);
	static void DisableCollision_SingleBodyVsSingleBody(class UPrimitiveComponent* SingleBodyA, class UPrimitiveComponent* SingleBodyB, float TimeToExpiration);
	static void DisableCollision_SkeletalVsSingleBody(class USkeletalMeshComponent* SkeletalMesh, const TArray<class FName>& SkeletalMeshBones, class UPrimitiveComponent* SingleBody, float TimeToExpiration);
	static void DisableCollision_SkeletalVsSkeletal(class USkeletalMeshComponent* SkeletalMeshA, const TArray<class FName>& SkeletalMeshBonesA, class USkeletalMeshComponent* SkeletalMeshB, const TArray<class FName>& SkeletalMeshBonesB, float TimeToExpiration);
	static void EnableCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB);
	static void EnableCollision_SingleBodyVsSingleBody(class UPrimitiveComponent* SingleBodyA, class UPrimitiveComponent* SingleBodyB);
	static void EnableCollision_SkeletalVsSingleBody(class USkeletalMeshComponent* SkeletalMesh, const TArray<class FName>& SkeletalMeshBones, class UPrimitiveComponent* SingleBody);
	static void EnableCollision_SkeletalVsSkeletal(class USkeletalMeshComponent* SkeletalMeshA, const TArray<class FName>& SkeletalMeshBonesA, class USkeletalMeshComponent* SkeletalMeshB, const TArray<class FName>& SkeletalMeshBonesB);
	static void GatherAllPhysicalBones(class USkeletalMeshComponent* SkeletalMesh, TArray<class FName>* OutBones);
	static void GatherAllPhysicalBonesFrom(class USkeletalMeshComponent* SkeletalMesh, class FName StartBone, bool bIncudeStartBone, TArray<class FName>* OutBones);
	static void GatherAllPhysicalComponents(class AActor* Actor, TArray<class UPrimitiveComponent*>* OutComponents);
	static bool IsCollisionDisabled(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB);
	static bool IsCollisionModified(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB);
	static void ModifyCollision(const struct FCollisionParams& Params_0, class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionDisablerFunctionLibrary">();
	}
	static class UCollisionDisablerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionDisablerFunctionLibrary>();
	}
};
static_assert(alignof(UCollisionDisablerFunctionLibrary) == 0x000008, "Wrong alignment on UCollisionDisablerFunctionLibrary");
static_assert(sizeof(UCollisionDisablerFunctionLibrary) == 0x000028, "Wrong size on UCollisionDisablerFunctionLibrary");

}

