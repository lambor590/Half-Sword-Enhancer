#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "VertexPaintDetectionPlugin_structs.hpp"
#include "GeometryScriptingCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetAllVertexColorsOnlyTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetClosestVertexDataTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetColorsWithinAreaTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintAtLocationTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintColorSnippetTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintEntireMeshTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintWithinAreaTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentSetMeshComponentVertexColorsTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks final
{
public:
	TMap<int32, class UPrimitiveComponent*>       ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks) == 0x000050, "Wrong size on VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentTasksInitiatedByComponent
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent final
{
public:
	int32                                         TotalAmountOfTasks;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfGetClosestVertexDataTasks;                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfGetAllVertexColorsOnlyTasks;               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfGetColorsWithinAreaTasks;                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfPaintAtLocationTasks;                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfPaintWithinAreaTasks;                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfPaintEntireMeshTasks;                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfPaintColorSnippetTasks;                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfSetMeshComponentVertexColorsTasks;         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks; // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent) == 0x000004, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent) == 0x000028, "Wrong size on VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, TotalAmountOfTasks) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::TotalAmountOfTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfGetClosestVertexDataTasks) == 0x000004, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfGetClosestVertexDataTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfGetAllVertexColorsOnlyTasks) == 0x000008, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfGetAllVertexColorsOnlyTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfGetColorsWithinAreaTasks) == 0x00000C, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfGetColorsWithinAreaTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfPaintAtLocationTasks) == 0x000010, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfPaintAtLocationTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfPaintWithinAreaTasks) == 0x000014, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfPaintWithinAreaTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfPaintEntireMeshTasks) == 0x000018, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfPaintEntireMeshTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfPaintColorSnippetTasks) == 0x00001C, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfPaintColorSnippetTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfSetMeshComponentVertexColorsTasks) == 0x000020, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfSetMeshComponentVertexColorsTasks' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent, AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks) == 0x000024, "Member 'VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent::AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentTasksMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintDetectionComponent_GetCurrentTasksMeshComponents final
{
public:
	TArray<class UPrimitiveComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetCurrentTasksMeshComponents) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_GetCurrentTasksMeshComponents");
static_assert(sizeof(VertexPaintDetectionComponent_GetCurrentTasksMeshComponents) == 0x000010, "Wrong size on VertexPaintDetectionComponent_GetCurrentTasksMeshComponents");
static_assert(offsetof(VertexPaintDetectionComponent_GetCurrentTasksMeshComponents, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetCurrentTasksMeshComponents::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetTotalTasksInitiatedByComponent
// 0x0004 (0x0004 - 0x0000)
struct VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent) == 0x000004, "Wrong alignment on VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent");
static_assert(sizeof(VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent) == 0x000004, "Wrong size on VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent");
static_assert(offsetof(VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.HasAnyTasksQueuedUp
// 0x0001 (0x0001 - 0x0000)
struct VertexPaintDetectionComponent_HasAnyTasksQueuedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_HasAnyTasksQueuedUp) == 0x000001, "Wrong alignment on VertexPaintDetectionComponent_HasAnyTasksQueuedUp");
static_assert(sizeof(VertexPaintDetectionComponent_HasAnyTasksQueuedUp) == 0x000001, "Wrong size on VertexPaintDetectionComponent_HasAnyTasksQueuedUp");
static_assert(offsetof(VertexPaintDetectionComponent_HasAnyTasksQueuedUp, ReturnValue) == 0x000000, "Member 'VertexPaintDetectionComponent_HasAnyTasksQueuedUp::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.TaskRemovedByTaskQueue
// 0x2870 (0x2870 - 0x0000)
struct VertexPaintDetectionComponent_TaskRemovedByTaskQueue final
{
public:
	struct FRVPDPCalculateColorsInfo              CalculateColorsInfo;                               // 0x0000(0x2870)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionComponent_TaskRemovedByTaskQueue) == 0x000008, "Wrong alignment on VertexPaintDetectionComponent_TaskRemovedByTaskQueue");
static_assert(sizeof(VertexPaintDetectionComponent_TaskRemovedByTaskQueue) == 0x002870, "Wrong size on VertexPaintDetectionComponent_TaskRemovedByTaskQueue");
static_assert(offsetof(VertexPaintDetectionComponent_TaskRemovedByTaskQueue, CalculateColorsInfo) == 0x000000, "Member 'VertexPaintDetectionComponent_TaskRemovedByTaskQueue::CalculateColorsInfo' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.AutoPaintDelayFinished
// 0x0008 (0x0008 - 0x0000)
struct AutoAddColorComponent_AutoPaintDelayFinished final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_AutoPaintDelayFinished) == 0x000008, "Wrong alignment on AutoAddColorComponent_AutoPaintDelayFinished");
static_assert(sizeof(AutoAddColorComponent_AutoPaintDelayFinished) == 0x000008, "Wrong size on AutoAddColorComponent_AutoPaintDelayFinished");
static_assert(offsetof(AutoAddColorComponent_AutoPaintDelayFinished, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_AutoPaintDelayFinished::MeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.AutoPaintedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct AutoAddColorComponent_AutoPaintedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_AutoPaintedActorDestroyed) == 0x000008, "Wrong alignment on AutoAddColorComponent_AutoPaintedActorDestroyed");
static_assert(sizeof(AutoAddColorComponent_AutoPaintedActorDestroyed) == 0x000008, "Wrong size on AutoAddColorComponent_AutoPaintedActorDestroyed");
static_assert(offsetof(AutoAddColorComponent_AutoPaintedActorDestroyed, DestroyedActor) == 0x000000, "Member 'AutoAddColorComponent_AutoPaintedActorDestroyed::DestroyedActor' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.PauseAutoPaintingMesh
// 0x0008 (0x0008 - 0x0000)
struct AutoAddColorComponent_PauseAutoPaintingMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_PauseAutoPaintingMesh) == 0x000008, "Wrong alignment on AutoAddColorComponent_PauseAutoPaintingMesh");
static_assert(sizeof(AutoAddColorComponent_PauseAutoPaintingMesh) == 0x000008, "Wrong size on AutoAddColorComponent_PauseAutoPaintingMesh");
static_assert(offsetof(AutoAddColorComponent_PauseAutoPaintingMesh, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_PauseAutoPaintingMesh::MeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.ResumeAutoPaintingMesh
// 0x0008 (0x0008 - 0x0000)
struct AutoAddColorComponent_ResumeAutoPaintingMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_ResumeAutoPaintingMesh) == 0x000008, "Wrong alignment on AutoAddColorComponent_ResumeAutoPaintingMesh");
static_assert(sizeof(AutoAddColorComponent_ResumeAutoPaintingMesh) == 0x000008, "Wrong size on AutoAddColorComponent_ResumeAutoPaintingMesh");
static_assert(offsetof(AutoAddColorComponent_ResumeAutoPaintingMesh, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_ResumeAutoPaintingMesh::MeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade
// 0x0010 (0x0010 - 0x0000)
struct AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyStartNewTaskIfChangeWasMade;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade) == 0x000008, "Wrong alignment on AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade");
static_assert(sizeof(AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade) == 0x000010, "Wrong size on AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade");
static_assert(offsetof(AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade, OnlyStartNewTaskIfChangeWasMade) == 0x000008, "Member 'AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade::OnlyStartNewTaskIfChangeWasMade' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.StopAutoPaintingMesh
// 0x0008 (0x0008 - 0x0000)
struct AutoAddColorComponent_StopAutoPaintingMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_StopAutoPaintingMesh) == 0x000008, "Wrong alignment on AutoAddColorComponent_StopAutoPaintingMesh");
static_assert(sizeof(AutoAddColorComponent_StopAutoPaintingMesh) == 0x000008, "Wrong size on AutoAddColorComponent_StopAutoPaintingMesh");
static_assert(offsetof(AutoAddColorComponent_StopAutoPaintingMesh, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_StopAutoPaintingMesh::MeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.CanAutoPaintedMeshGetPaused
// 0x0010 (0x0010 - 0x0000)
struct AutoAddColorComponent_CanAutoPaintedMeshGetPaused final
{
public:
	const class UPrimitiveComponent*              MeshComponent;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorComponent_CanAutoPaintedMeshGetPaused) == 0x000008, "Wrong alignment on AutoAddColorComponent_CanAutoPaintedMeshGetPaused");
static_assert(sizeof(AutoAddColorComponent_CanAutoPaintedMeshGetPaused) == 0x000010, "Wrong size on AutoAddColorComponent_CanAutoPaintedMeshGetPaused");
static_assert(offsetof(AutoAddColorComponent_CanAutoPaintedMeshGetPaused, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_CanAutoPaintedMeshGetPaused::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorComponent_CanAutoPaintedMeshGetPaused, ReturnValue) == 0x000008, "Member 'AutoAddColorComponent_CanAutoPaintedMeshGetPaused::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade
// 0x0010 (0x0010 - 0x0000)
struct AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade final
{
public:
	const class UPrimitiveComponent*              MeshComponent;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade) == 0x000008, "Wrong alignment on AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade");
static_assert(sizeof(AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade) == 0x000010, "Wrong size on AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade");
static_assert(offsetof(AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade, ReturnValue) == 0x000008, "Member 'AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetIsAutoPainting
// 0x0001 (0x0001 - 0x0000)
struct AutoAddColorComponent_GetIsAutoPainting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_GetIsAutoPainting) == 0x000001, "Wrong alignment on AutoAddColorComponent_GetIsAutoPainting");
static_assert(sizeof(AutoAddColorComponent_GetIsAutoPainting) == 0x000001, "Wrong size on AutoAddColorComponent_GetIsAutoPainting");
static_assert(offsetof(AutoAddColorComponent_GetIsAutoPainting, ReturnValue) == 0x000000, "Member 'AutoAddColorComponent_GetIsAutoPainting::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetMeshesBeingAutoPainted
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorComponent_GetMeshesBeingAutoPainted final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPAutoAddColorSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_GetMeshesBeingAutoPainted) == 0x000008, "Wrong alignment on AutoAddColorComponent_GetMeshesBeingAutoPainted");
static_assert(sizeof(AutoAddColorComponent_GetMeshesBeingAutoPainted) == 0x000050, "Wrong size on AutoAddColorComponent_GetMeshesBeingAutoPainted");
static_assert(offsetof(AutoAddColorComponent_GetMeshesBeingAutoPainted, ReturnValue) == 0x000000, "Member 'AutoAddColorComponent_GetMeshesBeingAutoPainted::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.IsAutoPaintedMeshPaused
// 0x0010 (0x0010 - 0x0000)
struct AutoAddColorComponent_IsAutoPaintedMeshPaused final
{
public:
	const class UPrimitiveComponent*              MeshComponent;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorComponent_IsAutoPaintedMeshPaused) == 0x000008, "Wrong alignment on AutoAddColorComponent_IsAutoPaintedMeshPaused");
static_assert(sizeof(AutoAddColorComponent_IsAutoPaintedMeshPaused) == 0x000010, "Wrong size on AutoAddColorComponent_IsAutoPaintedMeshPaused");
static_assert(offsetof(AutoAddColorComponent_IsAutoPaintedMeshPaused, MeshComponent) == 0x000000, "Member 'AutoAddColorComponent_IsAutoPaintedMeshPaused::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorComponent_IsAutoPaintedMeshPaused, ReturnValue) == 0x000008, "Member 'AutoAddColorComponent_IsAutoPaintedMeshPaused::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorComponent.IsNewRoundOfTasksGoingToStartAfterDelay
// 0x0001 (0x0001 - 0x0000)
struct AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay) == 0x000001, "Wrong alignment on AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay");
static_assert(sizeof(AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay) == 0x000001, "Wrong size on AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay");
static_assert(offsetof(AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay, ReturnValue) == 0x000000, "Member 'AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.AddAutoPaintEntireMesh
// 0x08B0 (0x08B0 - 0x0000)
struct AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintOnEntireMeshSettings        PaintEntireMeshSettings;                           // 0x0008(0x0458)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0460(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x0590(0x0318)(Parm, NativeAccessSpecifierPublic)
	bool                                          ResumeIfPaused;                                    // 0x08A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x08A9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh) == 0x000008, "Wrong alignment on AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh");
static_assert(sizeof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh) == 0x0008B0, "Wrong size on AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, MeshComponent) == 0x000000, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, PaintEntireMeshSettings) == 0x000008, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::PaintEntireMeshSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, AdditionalData) == 0x000460, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, AutoAddColorSettings) == 0x000590, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::AutoAddColorSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, ResumeIfPaused) == 0x0008A8, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::ResumeIfPaused' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh, ReturnValue) == 0x0008A9, "Member 'AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.GetAutoPaintingEntireMeshesAdditionalDataSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings) == 0x000008, "Wrong alignment on AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings");
static_assert(sizeof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings) == 0x000050, "Wrong size on AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings");
static_assert(offsetof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.GetAutoPaintingEntireMeshesPaintSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPPaintOnEntireMeshSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings) == 0x000008, "Wrong alignment on AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings");
static_assert(sizeof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings) == 0x000050, "Wrong size on AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings");
static_assert(offsetof(AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.UpdateAutoPaintedEntireMesh
// 0x08A8 (0x08A8 - 0x0000)
struct AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintOnEntireMeshSettings        PaintEntireMeshSettings;                           // 0x0008(0x0458)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0460(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x0590(0x0318)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh) == 0x000008, "Wrong alignment on AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh");
static_assert(sizeof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh) == 0x0008A8, "Wrong size on AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh");
static_assert(offsetof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh, MeshComponent) == 0x000000, "Member 'AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh, PaintEntireMeshSettings) == 0x000008, "Member 'AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh::PaintEntireMeshSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh, AdditionalData) == 0x000460, "Member 'AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh, AutoAddColorSettings) == 0x000590, "Member 'AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh::AutoAddColorSettings' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.AddAutoPaintAtLocation
// 0x09A0 (0x09A0 - 0x0000)
struct AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationSettings          PaintAtLocationSettings;                           // 0x0008(0x0548)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0550(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x0680(0x0318)(Parm, NativeAccessSpecifierPublic)
	bool                                          ResumeIfPaused;                                    // 0x0998(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0999(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99A[0x6];                                      // 0x099A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation) == 0x000008, "Wrong alignment on AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation");
static_assert(sizeof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation) == 0x0009A0, "Wrong size on AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, MeshComponent) == 0x000000, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, PaintAtLocationSettings) == 0x000008, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::PaintAtLocationSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, AdditionalData) == 0x000550, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, AutoAddColorSettings) == 0x000680, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::AutoAddColorSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, ResumeIfPaused) == 0x000998, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::ResumeIfPaused' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation, ReturnValue) == 0x000999, "Member 'AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.GetAutoPaintingAtLocationAdditionalDataSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings) == 0x000008, "Wrong alignment on AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings");
static_assert(sizeof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings) == 0x000050, "Wrong size on AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.GetAutoPaintingAtLocationPaintSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPPaintAtLocationSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings) == 0x000008, "Wrong alignment on AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings");
static_assert(sizeof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings) == 0x000050, "Wrong size on AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.UpdateAutoPaintedAtLocation
// 0x0998 (0x0998 - 0x0000)
struct AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationSettings          PaintAtLocationSettings;                           // 0x0008(0x0548)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0550(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x0680(0x0318)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation) == 0x000008, "Wrong alignment on AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation");
static_assert(sizeof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation) == 0x000998, "Wrong size on AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation, MeshComponent) == 0x000000, "Member 'AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation, PaintAtLocationSettings) == 0x000008, "Member 'AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation::PaintAtLocationSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation, AdditionalData) == 0x000550, "Member 'AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation, AutoAddColorSettings) == 0x000680, "Member 'AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation::AutoAddColorSettings' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.AddAutoPaintWithinArea
// 0x08E8 (0x08E8 - 0x0000)
struct AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintWithinAreaSettings          PaintWithinAreaSettings;                           // 0x0008(0x0490)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0498(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x05C8(0x0318)(Parm, NativeAccessSpecifierPublic)
	bool                                          ResumeIfPaused;                                    // 0x08E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x08E1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E2[0x6];                                      // 0x08E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea) == 0x000008, "Wrong alignment on AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea");
static_assert(sizeof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea) == 0x0008E8, "Wrong size on AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, MeshComponent) == 0x000000, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, PaintWithinAreaSettings) == 0x000008, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::PaintWithinAreaSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, AdditionalData) == 0x000498, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, AutoAddColorSettings) == 0x0005C8, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::AutoAddColorSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, ResumeIfPaused) == 0x0008E0, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::ResumeIfPaused' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea, ReturnValue) == 0x0008E1, "Member 'AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.GetAutoPaintingWithinAreaAdditionalDataSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings) == 0x000008, "Wrong alignment on AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings");
static_assert(sizeof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings) == 0x000050, "Wrong size on AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings");
static_assert(offsetof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.GetAutoPaintingWithinAreaPaintSettings
// 0x0050 (0x0050 - 0x0000)
struct AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPPaintWithinAreaSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings) == 0x000008, "Wrong alignment on AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings");
static_assert(sizeof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings) == 0x000050, "Wrong size on AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings");
static_assert(offsetof(AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings, ReturnValue) == 0x000000, "Member 'AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.UpdateAutoPaintedWithinArea
// 0x08E0 (0x08E0 - 0x0000)
struct AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintWithinAreaSettings          PaintWithinAreaSettings;                           // 0x0008(0x0490)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0498(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAutoAddColorSettings             AutoAddColorSettings;                              // 0x05C8(0x0318)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea) == 0x000008, "Wrong alignment on AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea");
static_assert(sizeof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea) == 0x0008E0, "Wrong size on AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea");
static_assert(offsetof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea, MeshComponent) == 0x000000, "Member 'AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea::MeshComponent' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea, PaintWithinAreaSettings) == 0x000008, "Member 'AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea::PaintWithinAreaSettings' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea, AdditionalData) == 0x000498, "Member 'AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea::AdditionalData' has a wrong offset!");
static_assert(offsetof(AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea, AutoAddColorSettings) == 0x0005C8, "Member 'AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea::AutoAddColorSettings' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.GetClothObjectsToSphereTrace
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace final
{
public:
	TArray<EObjectTypeQuery>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace) == 0x000008, "Wrong alignment on VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace");
static_assert(sizeof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace) == 0x000010, "Wrong size on VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace");
static_assert(offsetof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace, ReturnValue) == 0x000000, "Member 'VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothObjectsTypesToSphereTrace
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace final
{
public:
	TArray<EObjectTypeQuery>                      ClothObjectTypes;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace) == 0x000008, "Wrong alignment on VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace");
static_assert(sizeof(VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace) == 0x000010, "Wrong size on VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace");
static_assert(offsetof(VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace, ClothObjectTypes) == 0x000000, "Member 'VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace::ClothObjectTypes' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothOverlapTracingEnabled
// 0x0001 (0x0001 - 0x0000)
struct VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled final
{
public:
	bool                                          EnableClothTracing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled) == 0x000001, "Wrong alignment on VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled");
static_assert(sizeof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled) == 0x000001, "Wrong size on VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled");
static_assert(offsetof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled, EnableClothTracing) == 0x000000, "Member 'VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled::EnableClothTracing' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.CheckAndGetTheComponentsThatMatchGroupChildSnippets
// 0x0080 (0x0080 - 0x0000)
struct VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupSnippetID;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            MeshComponents;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FString, class UPrimitiveComponent*> ChildSnippetsAndMatchingMeshes;                    // 0x0028(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets");
static_assert(sizeof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets) == 0x000080, "Wrong size on VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets");
static_assert(offsetof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets, WorldContextObject) == 0x000000, "Member 'VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets, GroupSnippetID) == 0x000008, "Member 'VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets::GroupSnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets, MeshComponents) == 0x000018, "Member 'VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets::MeshComponents' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets, ChildSnippetsAndMatchingMeshes) == 0x000028, "Member 'VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets::ChildSnippetsAndMatchingMeshes' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets, ReturnValue) == 0x000078, "Member 'VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.ContainsColorSnippet
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintColorSnippetRefs_ContainsColorSnippet final
{
public:
	class FString                                 SnippetID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OptionalHasToBeStoredInDataAsset;                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVertexPaintColorSnippetDataAsset*      DataAsset;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintColorSnippetRefs_ContainsColorSnippet) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_ContainsColorSnippet");
static_assert(sizeof(VertexPaintColorSnippetRefs_ContainsColorSnippet) == 0x000028, "Wrong size on VertexPaintColorSnippetRefs_ContainsColorSnippet");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, SnippetID) == 0x000000, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::SnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, OptionalHasToBeStoredInDataAsset) == 0x000010, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::OptionalHasToBeStoredInDataAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, DataAsset) == 0x000018, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::DataAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, ReturnValue) == 0x000020, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsAndDataAssetForObject
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRVPDPStoredColorSnippetInfo> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject) == 0x000058, "Wrong size on VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject, Object) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject::Object' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject, ReturnValue) == 0x000008, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsInSpecifiedDataAsset
// 0x0060 (0x0060 - 0x0000)
struct VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset final
{
public:
	const class UVertexPaintColorSnippetDataAsset* ColorSnippetDataAsset;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeChildGroupSnippets;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRVPDPStoredColorSnippetInfo> ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset) == 0x000060, "Wrong size on VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset, ColorSnippetDataAsset) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset::ColorSnippetDataAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset, IncludeChildGroupSnippets) == 0x000008, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset::IncludeChildGroupSnippets' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset, ReturnValue) == 0x000010, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllGroupSnippetsInSpecifiedDataAsset
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset final
{
public:
	const class UVertexPaintColorSnippetDataAsset* ColorSnippetDataAsset;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRVPDPGroupColorSnippetInfo> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset) == 0x000058, "Wrong size on VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset, ColorSnippetDataAsset) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset::ColorSnippetDataAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset, ReturnValue) == 0x000008, "Member 'VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetChildSnippetInfosAssociatedWithGroupSnippetID
// 0x0068 (0x0068 - 0x0000)
struct VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupSnippetID;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRVPDPStoredColorSnippetInfo> ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID) == 0x000068, "Wrong size on VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID, WorldContextObject) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID, GroupSnippetID) == 0x000008, "Member 'VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID::GroupSnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID, ReturnValue) == 0x000018, "Member 'VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetObjectFromSnippetID
// 0x0038 (0x0038 - 0x0000)
struct VertexPaintColorSnippetRefs_GetObjectFromSnippetID final
{
public:
	class FString                                 SnippetID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetObjectFromSnippetID");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID) == 0x000038, "Wrong size on VertexPaintColorSnippetRefs_GetObjectFromSnippetID");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID, SnippetID) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetObjectFromSnippetID::SnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID, ReturnValue) == 0x000010, "Member 'VertexPaintColorSnippetRefs_GetObjectFromSnippetID::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionGISubSystem.RegisteredDetectTaskCallbackOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed) == 0x000008, "Wrong alignment on VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed");
static_assert(sizeof(VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed) == 0x000008, "Wrong size on VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed");
static_assert(offsetof(VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed, DestroyedActor) == 0x000000, "Member 'VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed::DestroyedActor' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionGISubSystem.RegisteredPaintTaskCallbackOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed) == 0x000008, "Wrong alignment on VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed");
static_assert(sizeof(VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed) == 0x000008, "Wrong size on VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed");
static_assert(offsetof(VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed, DestroyedActor) == 0x000000, "Member 'VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed::DestroyedActor' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothBeginOverlappingMesh
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintDetectionInterface_ClothBeginOverlappingMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_ClothBeginOverlappingMesh");
static_assert(sizeof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh) == 0x000020, "Wrong size on VertexPaintDetectionInterface_ClothBeginOverlappingMesh");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OverlappedComponent) == 0x000000, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OtherActor) == 0x000008, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OtherComp) == 0x000010, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OtherComp' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, Item) == 0x000018, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::Item' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothEndOverlappingMesh
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintDetectionInterface_ClothEndOverlappingMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintDetectionInterface_ClothEndOverlappingMesh) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_ClothEndOverlappingMesh");
static_assert(sizeof(VertexPaintDetectionInterface_ClothEndOverlappingMesh) == 0x000020, "Wrong size on VertexPaintDetectionInterface_ClothEndOverlappingMesh");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OverlappedComponent) == 0x000000, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OtherActor) == 0x000008, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OtherComp) == 0x000010, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OtherComp' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, Item) == 0x000018, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::Item' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ColorsAppliedOnActor
// 0x0440 (0x0440 - 0x0000)
struct VertexPaintDetectionInterface_ColorsAppliedOnActor final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskSettings                PaintedOnActorSettings;                            // 0x01C8(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0310(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_ColorsAppliedOnActor) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_ColorsAppliedOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_ColorsAppliedOnActor) == 0x000440, "Wrong size on VertexPaintDetectionInterface_ColorsAppliedOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, PaintedOnActorSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::PaintedOnActorSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, AdditionalData) == 0x000310, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.DetectTaskFinishedOnRegisteredMeshComponent
// 0x02D0 (0x02D0 - 0x0000)
struct VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x01A0(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent");
static_assert(sizeof(VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent) == 0x0002D0, "Wrong size on VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent");
static_assert(offsetof(VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent, AdditionalData) == 0x0001A0, "Member 'VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetAllVertexColorsOnlyOnActor
// 0x03E0 (0x03E0 - 0x0000)
struct VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPGetColorsOnlySettings            GotAllVertexColorsWithSettings;                    // 0x01A0(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x02B0(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor) == 0x0003E0, "Wrong size on VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, GotAllVertexColorsWithSettings) == 0x0001A0, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::GotAllVertexColorsWithSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, AdditionalData) == 0x0002B0, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetClosestVertexDataOnActor
// 0x0878 (0x0878 - 0x0000)
struct VertexPaintDetectionInterface_GetClosestVertexDataOnActor final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPGetClosestVertexDataSettings     GetClosestVertexDataSettings;                      // 0x01A0(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPClosestVertexDataResults         ClosestVertexColorResult;                          // 0x0338(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPEstimatedColorAtHitLocationInfo  EstimatedColorAtHitLocationResult;                 // 0x04E0(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAverageColorInAreaInfo           AverageColorInAreaInfo;                            // 0x0620(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0748(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_GetClosestVertexDataOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor) == 0x000878, "Wrong size on VertexPaintDetectionInterface_GetClosestVertexDataOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, GetClosestVertexDataSettings) == 0x0001A0, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::GetClosestVertexDataSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, ClosestVertexColorResult) == 0x000338, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::ClosestVertexColorResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, EstimatedColorAtHitLocationResult) == 0x0004E0, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::EstimatedColorAtHitLocationResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, AverageColorInAreaInfo) == 0x000620, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::AverageColorInAreaInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, AdditionalData) == 0x000748, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetColorsWithinArea
// 0x0490 (0x0490 - 0x0000)
struct VertexPaintDetectionInterface_GetColorsWithinArea final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPGetColorsWithinAreaSettings      GetColorsWithinAreaSettings;                       // 0x01A0(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPWithinAreaResults                WithinAreaResults;                                 // 0x02F8(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0360(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetColorsWithinArea) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_GetColorsWithinArea");
static_assert(sizeof(VertexPaintDetectionInterface_GetColorsWithinArea) == 0x000490, "Wrong size on VertexPaintDetectionInterface_GetColorsWithinArea");
static_assert(offsetof(VertexPaintDetectionInterface_GetColorsWithinArea, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_GetColorsWithinArea::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetColorsWithinArea, GetColorsWithinAreaSettings) == 0x0001A0, "Member 'VertexPaintDetectionInterface_GetColorsWithinArea::GetColorsWithinAreaSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetColorsWithinArea, WithinAreaResults) == 0x0002F8, "Member 'VertexPaintDetectionInterface_GetColorsWithinArea::WithinAreaResults' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetColorsWithinArea, AdditionalData) == 0x000360, "Member 'VertexPaintDetectionInterface_GetColorsWithinArea::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetSkeletalMeshClothPhysicsSettings
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponentTryingToGetClothSettingsFor;  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UClothingAssetBase*, struct FRVPDPVertexChannelsChaosClothPhysicsSettings> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings");
static_assert(sizeof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings) == 0x000058, "Wrong size on VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings");
static_assert(offsetof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings, SkeletalMeshComponentTryingToGetClothSettingsFor) == 0x000000, "Member 'VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings::SkeletalMeshComponentTryingToGetClothSettingsFor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings, ReturnValue) == 0x000008, "Member 'VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.OverrideVertexColorToApply
// 0x0080 (0x0080 - 0x0000)
struct VertexPaintDetectionInterface_OverrideVertexColorToApply final
{
public:
	int32                                         OverrideID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVertexPaintDetectionComponent*         AssociatedPaintComponent;                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshApplyingColorsTo;                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLOD;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentVertexIndex;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialVertexIsOn;                                // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVertexOnCloth;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneVertexIsOn;                                    // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VertexPositionInWorldSpace;                        // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VertexNormal;                                      // 0x0050(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CurrentVertexColor;                                // 0x0068(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              CurrentVertexMostDominantPhysicsSurface;           // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentVertexMostDominantPhysicsSurfaceValue;      // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 UpdatedVertexColorToApply;                         // 0x0074(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsToApplyUpdatedVertexColor;                    // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyUpdatedOrOverridenVertexColors;               // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideVertexColorsToApply;                       // 0x007A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 VertexColorsToOverrideWith;                        // 0x007C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_OverrideVertexColorToApply) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_OverrideVertexColorToApply");
static_assert(sizeof(VertexPaintDetectionInterface_OverrideVertexColorToApply) == 0x000080, "Wrong size on VertexPaintDetectionInterface_OverrideVertexColorToApply");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, OverrideID) == 0x000000, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::OverrideID' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, AssociatedPaintComponent) == 0x000008, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::AssociatedPaintComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, MeshApplyingColorsTo) == 0x000010, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::MeshApplyingColorsTo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, CurrentLOD) == 0x000018, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::CurrentLOD' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, CurrentVertexIndex) == 0x00001C, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::CurrentVertexIndex' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, MaterialVertexIsOn) == 0x000020, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::MaterialVertexIsOn' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, IsVertexOnCloth) == 0x000028, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::IsVertexOnCloth' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, BoneVertexIsOn) == 0x00002C, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::BoneVertexIsOn' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, VertexPositionInWorldSpace) == 0x000038, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::VertexPositionInWorldSpace' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, VertexNormal) == 0x000050, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::VertexNormal' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, CurrentVertexColor) == 0x000068, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::CurrentVertexColor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, CurrentVertexMostDominantPhysicsSurface) == 0x00006C, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::CurrentVertexMostDominantPhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, CurrentVertexMostDominantPhysicsSurfaceValue) == 0x000070, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::CurrentVertexMostDominantPhysicsSurfaceValue' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, UpdatedVertexColorToApply) == 0x000074, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::UpdatedVertexColorToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, WantsToApplyUpdatedVertexColor) == 0x000078, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::WantsToApplyUpdatedVertexColor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, ApplyUpdatedOrOverridenVertexColors) == 0x000079, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::ApplyUpdatedOrOverridenVertexColors' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, OverrideVertexColorsToApply) == 0x00007A, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::OverrideVertexColorsToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_OverrideVertexColorToApply, VertexColorsToOverrideWith) == 0x00007C, "Member 'VertexPaintDetectionInterface_OverrideVertexColorToApply::VertexColorsToOverrideWith' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_AtLocation
// 0x0C50 (0x0C50 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_AtLocation final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationSettings          PaintedAtLocationSettings;                         // 0x01C8(0x0548)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPClosestVertexDataResults         ClosestVertexColorResult;                          // 0x0710(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPEstimatedColorAtHitLocationInfo  EstimatedColorAtHitLocationResult;                 // 0x08B8(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAverageColorInAreaInfo           AverageColorInAreaInfo;                            // 0x09F8(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0B20(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_AtLocation");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation) == 0x000C50, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_AtLocation");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, PaintedAtLocationSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::PaintedAtLocationSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, ClosestVertexColorResult) == 0x000710, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::ClosestVertexColorResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, EstimatedColorAtHitLocationResult) == 0x0008B8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::EstimatedColorAtHitLocationResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, AverageColorInAreaInfo) == 0x0009F8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::AverageColorInAreaInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, AdditionalData) == 0x000B20, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_EntireMesh
// 0x0750 (0x0750 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_EntireMesh final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPPaintOnEntireMeshSettings        PaintedEntireMeshSettings;                         // 0x01C8(0x0458)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0620(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_EntireMesh");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh) == 0x000750, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_EntireMesh");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, PaintedEntireMeshSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::PaintedEntireMeshSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, AdditionalData) == 0x000620, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_PaintColorSnippet
// 0x04A8 (0x04A8 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPPaintColorSnippetSettings        PaintedColorSnippetSettings;                       // 0x01C8(0x01B0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0378(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet) == 0x0004A8, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, PaintedColorSnippetSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::PaintedColorSnippetSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, AdditionalData) == 0x000378, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_SetMeshComponentVertexColors
// 0x0480 (0x0480 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPSetVertexColorsSettings          SetMeshComponentVertexColorSettings;               // 0x01C8(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0350(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors) == 0x000480, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors, SetMeshComponentVertexColorSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors::SetMeshComponentVertexColorSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors, AdditionalData) == 0x000350, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString
// 0x0480 (0x0480 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPSetVertexColorsUsingSerializedStringSettings SetMeshComponentVertexColorUsingSerializedStringSettings; // 0x01C8(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x0350(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString) == 0x000480, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString, SetMeshComponentVertexColorUsingSerializedStringSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString::SetMeshComponentVertexColorUsingSerializedStringSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString, AdditionalData) == 0x000350, "Member 'VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_WithinArea
// 0x07F0 (0x07F0 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_WithinArea final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPPaintWithinAreaSettings          PaintedWithinAreaSettings;                         // 0x01C8(0x0490)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPWithinAreaResults                WithinAreaResults;                                 // 0x0658(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x06C0(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_WithinArea");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea) == 0x0007F0, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_WithinArea");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, PaintedWithinAreaSettings) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::PaintedWithinAreaSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, WithinAreaResults) == 0x000658, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::WithinAreaResults' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, AdditionalData) == 0x0006C0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintTaskFinishedOnRegisteredMeshComponent
// 0x02F8 (0x02F8 - 0x0000)
struct VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent final
{
public:
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A0(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x01C8(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent");
static_assert(sizeof(VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent) == 0x0002F8, "Wrong size on VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent");
static_assert(offsetof(VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent, PaintTaskResultInfo) == 0x0001A0, "Member 'VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent, AdditionalData) == 0x0001C8, "Member 'VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.AdjustBoxCollisionToFillAreaBetweenTwoLocations
// 0x0040 (0x0040 - 0x0000)
struct VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations final
{
public:
	class UBoxComponent*                          BoxCollision;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FromLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ToLocation;                                        // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxThickness;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations");
static_assert(sizeof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations) == 0x000040, "Wrong size on VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations");
static_assert(offsetof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations, BoxCollision) == 0x000000, "Member 'VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations::BoxCollision' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations, FromLocation) == 0x000008, "Member 'VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations::FromLocation' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations, ToLocation) == 0x000020, "Member 'VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations::ToLocation' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations, BoxThickness) == 0x000038, "Member 'VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations::BoxThickness' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.AsyncLoadAssets
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintFunctionLibrary_AsyncLoadAssets final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AssetsToLoad;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          PrintResultsToLog;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AssetLoadPriority;                                 // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_AsyncLoadAssets) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_AsyncLoadAssets");
static_assert(sizeof(VertexPaintFunctionLibrary_AsyncLoadAssets) == 0x000050, "Wrong size on VertexPaintFunctionLibrary_AsyncLoadAssets");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, LatentInfo) == 0x000008, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::LatentInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, AssetsToLoad) == 0x000020, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::AssetsToLoad' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, PrintResultsToLog) == 0x000030, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::PrintResultsToLog' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, LoadedAssets) == 0x000038, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::LoadedAssets' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, Success) == 0x000048, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::Success' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_AsyncLoadAssets, AssetLoadPriority) == 0x00004C, "Member 'VertexPaintFunctionLibrary_AsyncLoadAssets::AssetLoadPriority' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CalcAABBWithoutUniformCheck
// 0x00B0 (0x00B0 - 0x0000)
struct VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck final
{
public:
	const class USkinnedMeshComponent*            MeshComponent;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToWorld;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0070(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck");
static_assert(sizeof(VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck) == 0x0000B0, "Wrong size on VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck");
static_assert(offsetof(VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck, LocalToWorld) == 0x000010, "Member 'VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck::LocalToWorld' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck, ReturnValue) == 0x000070, "Member 'VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CollisionChannelToObjectType
// 0x0002 (0x0002 - 0x0000)
struct VertexPaintFunctionLibrary_CollisionChannelToObjectType final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeQuery                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_CollisionChannelToObjectType) == 0x000001, "Wrong alignment on VertexPaintFunctionLibrary_CollisionChannelToObjectType");
static_assert(sizeof(VertexPaintFunctionLibrary_CollisionChannelToObjectType) == 0x000002, "Wrong size on VertexPaintFunctionLibrary_CollisionChannelToObjectType");
static_assert(offsetof(VertexPaintFunctionLibrary_CollisionChannelToObjectType, CollisionChannel) == 0x000000, "Member 'VertexPaintFunctionLibrary_CollisionChannelToObjectType::CollisionChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_CollisionChannelToObjectType, ReturnValue) == 0x000001, "Member 'VertexPaintFunctionLibrary_CollisionChannelToObjectType::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ParentOfPhysicsSurfaceFamily;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily");
static_assert(sizeof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily");
static_assert(offsetof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily, PhysicsSurface) == 0x000008, "Member 'VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily::PhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily, ParentOfPhysicsSurfaceFamily) == 0x000009, "Member 'VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily::ParentOfPhysicsSurfaceFamily' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily, ReturnValue) == 0x00000A, "Member 'VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DrawPrimitiveComponentBoundsBox
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorToDraw;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox");
static_assert(sizeof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, PrimitiveComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, Lifetime) == 0x000008, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::Lifetime' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, Thickness) == 0x00000C, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::Thickness' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, ColorToDraw) == 0x000010, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::ColorToDraw' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllColorSnippetsUnderGroupSnippetAsString
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupSnippetID;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString) == 0x000028, "Wrong size on VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString, GroupSnippetID) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString::GroupSnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsString_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRVPDPStoredColorSnippetInfo> AvailableColorSnippetsAndDataAssets;               // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper, AvailableColorSnippetsAndDataAssets) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper::AvailableColorSnippetsAndDataAssets' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsTags_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssets;            // 0x0008(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper, AvailableColorSnippetTagsAndDataAssets) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper::AvailableColorSnippetTagsAndDataAssets' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper
// 0x0060 (0x0060 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagCategory;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssetsUnderTagCategory; // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper) == 0x000060, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, TagCategory) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::TagCategory' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, AvailableColorSnippetTagsAndDataAssetsUnderTagCategory) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::AvailableColorSnippetTagsAndDataAssetsUnderTagCategory' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllPhysicsSurfaces
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllPhysicsSurfaces final
{
public:
	TArray<EPhysicalSurface>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllPhysicsSurfaces");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetAllPhysicsSurfaces");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces, ReturnValue) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllPhysicsSurfaces::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllTagsUnderTagCategory
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagCategory;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory, TagCategory) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory::TagCategory' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESurfaceAtChannel>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper) == 0x000028, "Wrong size on VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, Material) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, PhysicsSurface) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::PhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, Successful) == 0x000011, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::Successful' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfColorSnippetChildsFromGroupSnippet
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GroupSnippet;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet, GroupSnippet) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet::GroupSnippet' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfLODsToPaintOn
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn final
{
public:
	class UPrimitiveComponent*                    MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLODToPaintUpOn;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideUpToLOD;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, MeshComp) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::MeshComp' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, OverrideLODToPaintUpOn) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::OverrideLODToPaintUpOn' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, OverrideUpToLOD) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::OverrideUpToLOD' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannel
// 0x0070 (0x0070 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel final
{
public:
	TArray<struct FColor>                         VertexColors;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MinColorAmountToBeConsidered;                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPAmountOfColorsOfEachChannelResults ReturnValue;                                       // 0x0018(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel) == 0x000070, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, VertexColors) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::VertexColors' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, MinColorAmountToBeConsidered) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::MinColorAmountToBeConsidered' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannelAsync
// 0x0090 (0x0090 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         VertexColors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelResults AmountOfColorsOfEachChannel;                       // 0x0030(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         MinColorAmountToBeConsidered;                      // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync) == 0x000090, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync, LatentInfo) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync, VertexColors) == 0x000020, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync::VertexColors' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync, AmountOfColorsOfEachChannel) == 0x000030, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync::AmountOfColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync, MinColorAmountToBeConsidered) == 0x000088, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync::MinColorAmountToBeConsidered' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsDetectionTasksAmount_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, int32>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsPaintTasksAmount_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, int32>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetChannelsPhysicsSurfaceIsRegisteredTo
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialToApplyColorsTo;                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalSurface;                                   // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtRedChannel;                                      // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtGreenChannel;                                    // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtBlueChannel;                                     // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtAlphaChannel;                                    // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo");
static_assert(sizeof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, MaterialToApplyColorsTo) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::MaterialToApplyColorsTo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, PhysicalSurface) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::PhysicalSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, AtRedChannel) == 0x000011, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::AtRedChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, AtGreenChannel) == 0x000012, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::AtGreenChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, AtBlueChannel) == 0x000013, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::AtBlueChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo, AtAlphaChannel) == 0x000014, "Member 'VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo::AtAlphaChannel' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClothAssets
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetClothAssets final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetBase*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetClothAssets) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetClothAssets");
static_assert(sizeof(VertexPaintFunctionLibrary_GetClothAssets) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetClothAssets");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClothAssets, SkeletalMesh) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetClothAssets::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClothAssets, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetClothAssets::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetReferenceDataAsset
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset final
{
public:
	const class UObject*                          OptionalWorldContextObject;                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintColorSnippetRefs*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset, OptionalWorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset::OptionalWorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetVertexColorsAsync
// 0x0068 (0x0068 - 0x0000)
struct VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ColorSnippetTag;                                   // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ObjectSnippetIsAssociatedWith;                     // 0x0028(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ColorSnippetVertexColors;                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync");
static_assert(sizeof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync) == 0x000068, "Wrong size on VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, ColorSnippetTag) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::ColorSnippetTag' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, LatentInfo) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, ObjectSnippetIsAssociatedWith) == 0x000028, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::ObjectSnippetIsAssociatedWith' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, ColorSnippetVertexColors) == 0x000050, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::ColorSnippetVertexColors' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync, Success) == 0x000060, "Member 'VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync::Success' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetComponentBoundsBottomWorldZ
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ");
static_assert(sizeof(VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ");
static_assert(offsetof(VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ, Component) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ::Component' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetComponentBoundsTopWorldZ
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ");
static_assert(sizeof(VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ");
static_assert(offsetof(VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ, Component) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ::Component' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetChildFromGroupSnippet
// 0x0030 (0x0030 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GroupSnippet;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            GroupSnippetMeshes;                                // 0x0010(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet) == 0x000030, "Wrong size on VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet, GroupSnippet) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet::GroupSnippet' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet, GroupSnippetMeshes) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet::GroupSnippetMeshes' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet, Success) == 0x000020, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet::Success' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet, ReturnValue) == 0x000024, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetsTagsInTagCategory_Wrapper
// 0x0060 (0x0060 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagCategory;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssetsUnderTagCategory; // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper) == 0x000060, "Wrong size on VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, TagCategory) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::TagCategory' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, AvailableColorSnippetTagsAndDataAssetsUnderTagCategory) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::AvailableColorSnippetTagsAndDataAssetsUnderTagCategory' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentAmountOfVerticesOnLOD
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lod;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD, Lod) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD::Lod' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD, ReturnValue) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentSourceMesh
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshComponentSourceMesh final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshComponentSourceMesh) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshComponentSourceMesh");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshComponentSourceMesh) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetMeshComponentSourceMesh");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentSourceMesh, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshComponentSourceMesh::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentSourceMesh, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshComponentSourceMesh::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColors_Wrapper
// 0x0070 (0x0070 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetColorsForAllLODs;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GetColorsUpToLOD;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPVertexDataInfo                   ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper) == 0x000070, "Wrong size on VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, Success) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::Success' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, GetColorsForAllLODs) == 0x000009, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::GetColorsForAllLODs' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, GetColorsUpToLOD) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::GetColorsUpToLOD' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColorsAtLOD_Wrapper
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lod;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper, Lod) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper::Lod' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetOptimizationDataAsset
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetOptimizationDataAsset final
{
public:
	const class UObject*                          OptionalWorldContextObject;                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintOptimizationDataAsset*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetOptimizationDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetOptimizationDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetOptimizationDataAsset) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetOptimizationDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetOptimizationDataAsset, OptionalWorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetOptimizationDataAsset::OptionalWorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetOptimizationDataAsset, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetOptimizationDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetParentsOfPhysicsSurface_Wrapper
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalSurface;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper, PhysicalSurface) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper::PhysicalSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicalMaterialUsingPhysicsSurface_Wrapper
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicalMaterial>          PhysicalMaterialClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, PhysicalMaterialClass) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::PhysicalMaterialClass' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, PhysicsSurface) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::PhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicsSurfaceFamilies_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FRVPDPRegisteredPhysicsSurfacesSettings> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicsSurfacesRegisteredToMaterial
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial");
static_assert(sizeof(VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial, Material) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetSubstringAfterLastCharacter
// 0x0030 (0x0030 - 0x0000)
struct VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Character;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter");
static_assert(sizeof(VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter) == 0x000030, "Wrong size on VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter");
static_assert(offsetof(VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter, String) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter::String' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter, Character) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter::Character' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter, ReturnValue) == 0x000020, "Member 'VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheGroupSnippetAChildSnippetBelongsTo
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           childSnippet;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           groupSnippetChildBelongsTo;                        // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo");
static_assert(sizeof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo, childSnippet) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo::childSnippet' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo, groupSnippetChildBelongsTo) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo::groupSnippetChildBelongsTo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheMostDominantPhysicsSurface_Wrapper
// 0x0040 (0x0040 - 0x0000)
struct VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OptionalMaterialPhysicsSurfaceWasDetectedOn;       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicsSurfaces;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PhysicsSurfaceValues;                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPhysicalSurface                              MostDominantPhysicsSurfaceFromArray;               // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MostDominantPhysicsSurfaceColorValue;              // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper) == 0x000040, "Wrong size on VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, OptionalMaterialPhysicsSurfaceWasDetectedOn) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::OptionalMaterialPhysicsSurfaceWasDetectedOn' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, PhysicsSurfaces) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::PhysicsSurfaces' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, PhysicsSurfaceValues) == 0x000020, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::PhysicsSurfaceValues' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, MostDominantPhysicsSurfaceFromArray) == 0x000030, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::MostDominantPhysicsSurfaceFromArray' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, MostDominantPhysicsSurfaceColorValue) == 0x000034, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::MostDominantPhysicsSurfaceColorValue' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, ReturnValue) == 0x000038, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialDataAsset
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset final
{
public:
	const class UObject*                          OptionalWorldContextObject;                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintMaterialDataAsset*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset, OptionalWorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset::OptionalWorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialInterface_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UMaterialInterface>, struct FRVPDPRegisteredMaterialSetting> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsAssetsLoaded
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_IsAssetsLoaded final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AssetsToCheck;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_IsAssetsLoaded) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_IsAssetsLoaded");
static_assert(sizeof(VertexPaintFunctionLibrary_IsAssetsLoaded) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_IsAssetsLoaded");
static_assert(offsetof(VertexPaintFunctionLibrary_IsAssetsLoaded, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_IsAssetsLoaded::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsAssetsLoaded, AssetsToCheck) == 0x000008, "Member 'VertexPaintFunctionLibrary_IsAssetsLoaded::AssetsToCheck' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsAssetsLoaded, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_IsAssetsLoaded::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper
// 0x0038 (0x0038 - 0x0000)
struct VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper) == 0x000038, "Wrong size on VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper, Material) == 0x000008, "Member 'VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper, ReturnValue) == 0x000030, "Member 'VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_IsPlayInEditor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_IsPlayInEditor) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_IsPlayInEditor");
static_assert(sizeof(VertexPaintFunctionLibrary_IsPlayInEditor) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_IsPlayInEditor");
static_assert(offsetof(VertexPaintFunctionLibrary_IsPlayInEditor, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_IsPlayInEditor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsPlayInEditor, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsWorldValid
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_IsWorldValid final
{
public:
	const class UWorld*                           World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_IsWorldValid) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_IsWorldValid");
static_assert(sizeof(VertexPaintFunctionLibrary_IsWorldValid) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_IsWorldValid");
static_assert(offsetof(VertexPaintFunctionLibrary_IsWorldValid, World) == 0x000000, "Member 'VertexPaintFunctionLibrary_IsWorldValid::World' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsWorldValid, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_IsWorldValid::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper
// 0x0068 (0x0068 - 0x0000)
struct VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypesToTraceFor;                             // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          TraceComplex;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSelf;                                        // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite> ClosestUniqueMeshesWithBones;                      // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         DebugDrawTime;                                     // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper) == 0x000068, "Wrong size on VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, Location) == 0x000008, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::Location' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, Radius) == 0x000020, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::Radius' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, TraceChannel) == 0x000024, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::TraceChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, ObjectTypesToTraceFor) == 0x000028, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::ObjectTypesToTraceFor' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, ActorsToIgnore) == 0x000038, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, TraceComplex) == 0x000048, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::TraceComplex' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, IgnoreSelf) == 0x000049, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::IgnoreSelf' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, DrawDebugType) == 0x00004A, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::DrawDebugType' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, ClosestUniqueMeshesWithBones) == 0x000050, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::ClosestUniqueMeshesWithBones' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, DebugDrawTime) == 0x000060, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::DebugDrawTime' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper, ReturnValue) == 0x000064, "Member 'VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ObjectTypeToCollisionChannel
// 0x0002 (0x0002 - 0x0000)
struct VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel final
{
public:
	EObjectTypeQuery                              ObjectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel) == 0x000001, "Wrong alignment on VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel");
static_assert(sizeof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel) == 0x000002, "Wrong size on VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel");
static_assert(offsetof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel, ObjectType) == 0x000000, "Member 'VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel::ObjectType' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel, ReturnValue) == 0x000001, "Member 'VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToRegisterForCallbacks;                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, ObjectToRegisterForCallbacks) == 0x000008, "Member 'VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::ObjectToRegisterForCallbacks' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToRegisterForCallbacks;                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, ObjectToRegisterForCallbacks) == 0x000008, "Member 'VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::ObjectToRegisterForCallbacks' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ReliableFColorToFLinearColor
// 0x0014 (0x0014 - 0x0000)
struct VertexPaintFunctionLibrary_ReliableFColorToFLinearColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_ReliableFColorToFLinearColor) == 0x000004, "Wrong alignment on VertexPaintFunctionLibrary_ReliableFColorToFLinearColor");
static_assert(sizeof(VertexPaintFunctionLibrary_ReliableFColorToFLinearColor) == 0x000014, "Wrong size on VertexPaintFunctionLibrary_ReliableFColorToFLinearColor");
static_assert(offsetof(VertexPaintFunctionLibrary_ReliableFColorToFLinearColor, Color) == 0x000000, "Member 'VertexPaintFunctionLibrary_ReliableFColorToFLinearColor::Color' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_ReliableFColorToFLinearColor, ReturnValue) == 0x000004, "Member 'VertexPaintFunctionLibrary_ReliableFColorToFLinearColor::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ReliableFLinearToFColor
// 0x0014 (0x0014 - 0x0000)
struct VertexPaintFunctionLibrary_ReliableFLinearToFColor final
{
public:
	struct FLinearColor                           LinearColor;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_ReliableFLinearToFColor) == 0x000004, "Wrong alignment on VertexPaintFunctionLibrary_ReliableFLinearToFColor");
static_assert(sizeof(VertexPaintFunctionLibrary_ReliableFLinearToFColor) == 0x000014, "Wrong size on VertexPaintFunctionLibrary_ReliableFLinearToFColor");
static_assert(offsetof(VertexPaintFunctionLibrary_ReliableFLinearToFColor, LinearColor) == 0x000000, "Member 'VertexPaintFunctionLibrary_ReliableFLinearToFColor::LinearColor' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_ReliableFLinearToFColor, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_ReliableFLinearToFColor::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RemoveComponentFromDetectTaskQueue
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue");
static_assert(sizeof(VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue");
static_assert(offsetof(VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue, Component) == 0x000000, "Member 'VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue::Component' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RemoveComponentFromPaintTaskQueue
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue");
static_assert(sizeof(VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue");
static_assert(offsetof(VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue, Component) == 0x000000, "Member 'VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue::Component' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosClothPhysics
// 0x0160 (0x0160 - 0x0000)
struct VertexPaintFunctionLibrary_SetChaosClothPhysics final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClothingAssetBase*                     ClothingAsset;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPChaosClothPhysicsSettings        ClothPhysicsSettings;                              // 0x0010(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetChaosClothPhysics) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetChaosClothPhysics");
static_assert(sizeof(VertexPaintFunctionLibrary_SetChaosClothPhysics) == 0x000160, "Wrong size on VertexPaintFunctionLibrary_SetChaosClothPhysics");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, ClothingAsset) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::ClothingAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, ClothPhysicsSettings) == 0x000010, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::ClothPhysicsSettings' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosWheeledVehicleFrictionMultiplier_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper final
{
public:
	class UChaosWheeledVehicleMovementComponent*  ChaosWheeledVehicleMovementComponent;              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, ChaosWheeledVehicleMovementComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::ChaosWheeledVehicleMovementComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, WheelIndex) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::WheelIndex' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, Friction) == 0x00000C, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::Friction' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshConstantVertexColorsAndEnablesThem
// 0x0030 (0x0030 - 0x0000)
struct VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem final
{
public:
	class UDynamicMesh*                           TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptColorFlags              Flags_0;                                           // 0x0018(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearExisting;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryScriptDebug*                   Debug;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMesh*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem");
static_assert(sizeof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem) == 0x000030, "Wrong size on VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, TargetMesh) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::TargetMesh' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, Color) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::Color' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, Flags_0) == 0x000018, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::Flags_0' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, bClearExisting) == 0x00001C, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::bClearExisting' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, Debug) == 0x000020, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::Debug' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem, ReturnValue) == 0x000028, "Member 'VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetSkeletalMeshAndReleaseResources
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          NewMesh;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearVertexColorsOfChangedMesh;                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources");
static_assert(sizeof(VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources");
static_assert(offsetof(VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources, NewMesh) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources::NewMesh' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources, ClearVertexColorsOfChangedMesh) == 0x000010, "Member 'VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources::ClearVertexColorsOfChangedMesh' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetStaticMeshAndReleaseResources
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            NewMesh;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearVertexColorsOfChangedMesh;                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources");
static_assert(sizeof(VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources");
static_assert(offsetof(VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources, StaticMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources, NewMesh) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources::NewMesh' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources, ClearVertexColorsOfChangedMesh) == 0x000010, "Member 'VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources::ClearVertexColorsOfChangedMesh' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToUnregisterForCallbacks;                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, ObjectToUnregisterForCallbacks) == 0x000008, "Member 'VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::ObjectToUnregisterForCallbacks' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToUnregisterForCallbacks;                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper, ObjectToUnregisterForCallbacks) == 0x000008, "Member 'VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper::ObjectToUnregisterForCallbacks' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColors
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors");
static_assert(sizeof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors");
static_assert(offsetof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors::SkeletalMeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColorsAsync
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync");
static_assert(sizeof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync) == 0x000028, "Wrong size on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync");
static_assert(offsetof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync, LatentInfo) == 0x000008, "Member 'VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync, SkeletalMesh) == 0x000020, "Member 'VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync::SkeletalMesh' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh, SkeletalMeshComp) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically
// 0x00A0 (0x00A0 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically final
{
public:
	TMap<int32, class FString>                    AssetIndexAndName;                                 // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    ReturnValue;                                       // 0x0050(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically) == 0x0000A0, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically, AssetIndexAndName) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically::AssetIndexAndName' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically, ReturnValue) == 0x000050, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortStringArrayAlphabetically
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically, Strings) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically::Strings' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetRegisteredSkeletalMeshInfo
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo final
{
public:
	TMap<class USkeletalMesh*, struct FRVPDPRegisteredSkeletalMeshInfo> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo) == 0x000008, "Wrong alignment on VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo");
static_assert(sizeof(VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo) == 0x000050, "Wrong size on VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo");
static_assert(offsetof(VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo, ReturnValue) == 0x000000, "Member 'VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetSkeletalMeshNumOfLODsToPaint
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint final
{
public:
	TMap<class USkeletalMesh*, struct FRVPDPPaintOnLODSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint) == 0x000008, "Wrong alignment on VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint");
static_assert(sizeof(VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint) == 0x000050, "Wrong size on VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint");
static_assert(offsetof(VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint, ReturnValue) == 0x000000, "Member 'VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetStaticMeshNumOfLODsToPaint
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint final
{
public:
	TMap<class UStaticMesh*, struct FRVPDPPaintOnLODSettings> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint) == 0x000008, "Wrong alignment on VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint");
static_assert(sizeof(VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint) == 0x000050, "Wrong size on VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint");
static_assert(offsetof(VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint, ReturnValue) == 0x000000, "Member 'VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetAllVertexColorsOnly_Wrapper
// 0x0250 (0x0250 - 0x0000)
struct VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPGetColorsOnlySettings            GetAllVertexColorsStruct;                          // 0x0010(0x0110)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0120(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper) == 0x000250, "Wrong size on VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper, GetAllVertexColorsStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper::GetAllVertexColorsStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper, AdditionalDataToPassThrough) == 0x000120, "Member 'VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetClosestVertexDataOnMesh_Wrapper
// 0x02D8 (0x02D8 - 0x0000)
struct VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPGetClosestVertexDataSettings     GetClosestVertexDataStruct;                        // 0x0010(0x0198)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x01A8(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper) == 0x0002D8, "Wrong size on VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, GetClosestVertexDataStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::GetClosestVertexDataStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, AdditionalDataToPassThrough) == 0x0001A8, "Member 'VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetColorsWithinArea_Wrapper
// 0x0298 (0x0298 - 0x0000)
struct VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPGetColorsWithinAreaSettings      GetColorsWithinAreaStruct;                         // 0x0010(0x0158)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0168(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper) == 0x000298, "Wrong size on VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper, GetColorsWithinAreaStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper::GetColorsWithinAreaStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper, AdditionalDataToPassThrough) == 0x000168, "Member 'VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintColorSnippetOnMesh_Wrappers
// 0x02F0 (0x02F0 - 0x0000)
struct VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintColorSnippetSettings        PaintColorSnippetStruct;                           // 0x0010(0x01B0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x01C0(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers) == 0x0002F0, "Wrong size on VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, PaintColorSnippetStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::PaintColorSnippetStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, AdditionalDataToPassThrough) == 0x0001C0, "Member 'VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintGroupSnippetOnMesh_Wrapper
// 0x02F8 (0x02F8 - 0x0000)
struct VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            GroupSnippetMeshes;                                // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintGroupSnippetSettings        PaintGroupSnippetStruct;                           // 0x0018(0x01B0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x01C8(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper) == 0x0002F8, "Wrong size on VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper, GroupSnippetMeshes) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper::GroupSnippetMeshes' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper, PaintGroupSnippetStruct) == 0x000018, "Member 'VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper::PaintGroupSnippetStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper, AdditionalDataToPassThrough) == 0x0001C8, "Member 'VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnEntireMesh_Wrapper
// 0x0598 (0x0598 - 0x0000)
struct VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintOnEntireMeshSettings        PaintOnEntireMeshStruct;                           // 0x0010(0x0458)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0468(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper) == 0x000598, "Wrong size on VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper, PaintOnEntireMeshStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper::PaintOnEntireMeshStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper, AdditionalDataToPassThrough) == 0x000468, "Member 'VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnMeshAtLocation_Wrapper
// 0x0688 (0x0688 - 0x0000)
struct VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationSettings          PaintAtLocationStruct;                             // 0x0010(0x0548)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0558(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper) == 0x000688, "Wrong size on VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper, PaintAtLocationStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper::PaintAtLocationStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper, AdditionalDataToPassThrough) == 0x000558, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnMeshWithinArea_Wrapper
// 0x05D0 (0x05D0 - 0x0000)
struct VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintWithinAreaSettings          PaintWithinAreaStruct;                             // 0x0010(0x0490)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x04A0(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper) == 0x0005D0, "Wrong size on VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper, PaintWithinAreaStruct) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper::PaintWithinAreaStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper, AdditionalDataToPassThrough) == 0x0004A0, "Member 'VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.SetMeshComponentVertexColors_Wrapper
// 0x02C8 (0x02C8 - 0x0000)
struct VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPSetVertexColorsSettings          SetMeshComponentVertexColorsSettings;              // 0x0010(0x0188)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0198(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper) == 0x0002C8, "Wrong size on VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper, SetMeshComponentVertexColorsSettings) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper::SetMeshComponentVertexColorsSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper, AdditionalDataToPassThrough) == 0x000198, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.SetMeshComponentVertexColorsUsingSerializedString_Wrapper
// 0x02C8 (0x02C8 - 0x0000)
struct VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPSetVertexColorsUsingSerializedStringSettings SetMeshComponentVertexColorsUsingSerializedStringSettings; // 0x0010(0x0188)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalDataToPassThrough;                       // 0x0198(0x0130)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper) == 0x000008, "Wrong alignment on VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper");
static_assert(sizeof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper) == 0x0002C8, "Wrong size on VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, SetMeshComponentVertexColorsUsingSerializedStringSettings) == 0x000010, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::SetMeshComponentVertexColorsUsingSerializedStringSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, AdditionalDataToPassThrough) == 0x000198, "Member 'VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

}

