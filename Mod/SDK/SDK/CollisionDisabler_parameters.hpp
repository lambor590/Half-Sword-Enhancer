#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CollisionDisabler

#include "Basic.hpp"

#include "CollisionDisabler_structs.hpp"


namespace SDK::Params
{

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.CancelModifyCollision
// 0x0020 (0x0020 - 0x0000)
struct CollisionDisablerFunctionLibrary_CancelModifyCollision final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_CancelModifyCollision) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_CancelModifyCollision");
static_assert(sizeof(CollisionDisablerFunctionLibrary_CancelModifyCollision) == 0x000020, "Wrong size on CollisionDisablerFunctionLibrary_CancelModifyCollision");
static_assert(offsetof(CollisionDisablerFunctionLibrary_CancelModifyCollision, ComponentA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_CancelModifyCollision::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_CancelModifyCollision, ComponentB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_CancelModifyCollision::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_CancelModifyCollision, BoneNameA) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_CancelModifyCollision::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_CancelModifyCollision, BoneNameB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_CancelModifyCollision::BoneNameB' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision
// 0x0028 (0x0028 - 0x0000)
struct CollisionDisablerFunctionLibrary_DisableCollision final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToExpiration;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_DisableCollision) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_DisableCollision");
static_assert(sizeof(CollisionDisablerFunctionLibrary_DisableCollision) == 0x000028, "Wrong size on CollisionDisablerFunctionLibrary_DisableCollision");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision, ComponentA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_DisableCollision::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision, ComponentB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_DisableCollision::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision, BoneNameA) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_DisableCollision::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision, BoneNameB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_DisableCollision::BoneNameB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision, TimeToExpiration) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_DisableCollision::TimeToExpiration' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SingleBodyVsSingleBody
// 0x0018 (0x0018 - 0x0000)
struct CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody final
{
public:
	class UPrimitiveComponent*                    SingleBodyA;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SingleBodyB;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToExpiration;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody");
static_assert(sizeof(CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody) == 0x000018, "Wrong size on CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody, SingleBodyA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody::SingleBodyA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody, SingleBodyB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody::SingleBodyB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody, TimeToExpiration) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody::TimeToExpiration' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SkeletalVsSingleBody
// 0x0028 (0x0028 - 0x0000)
struct CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBones;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SingleBody;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToExpiration;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody");
static_assert(sizeof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody) == 0x000028, "Wrong size on CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody, SkeletalMesh) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody, SkeletalMeshBones) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody::SkeletalMeshBones' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody, SingleBody) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody::SingleBody' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody, TimeToExpiration) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody::TimeToExpiration' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SkeletalVsSkeletal
// 0x0038 (0x0038 - 0x0000)
struct CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshA;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBonesA;                                // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshB;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBonesB;                                // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeToExpiration;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal");
static_assert(sizeof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal) == 0x000038, "Wrong size on CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal, SkeletalMeshA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal::SkeletalMeshA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal, SkeletalMeshBonesA) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal::SkeletalMeshBonesA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal, SkeletalMeshB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal::SkeletalMeshB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal, SkeletalMeshBonesB) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal::SkeletalMeshBonesB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal, TimeToExpiration) == 0x000030, "Member 'CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal::TimeToExpiration' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision
// 0x0020 (0x0020 - 0x0000)
struct CollisionDisablerFunctionLibrary_EnableCollision final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_EnableCollision) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_EnableCollision");
static_assert(sizeof(CollisionDisablerFunctionLibrary_EnableCollision) == 0x000020, "Wrong size on CollisionDisablerFunctionLibrary_EnableCollision");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision, ComponentA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_EnableCollision::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision, ComponentB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_EnableCollision::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision, BoneNameA) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_EnableCollision::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision, BoneNameB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_EnableCollision::BoneNameB' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SingleBodyVsSingleBody
// 0x0010 (0x0010 - 0x0000)
struct CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody final
{
public:
	class UPrimitiveComponent*                    SingleBodyA;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SingleBodyB;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody");
static_assert(sizeof(CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody) == 0x000010, "Wrong size on CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody, SingleBodyA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody::SingleBodyA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody, SingleBodyB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody::SingleBodyB' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SkeletalVsSingleBody
// 0x0020 (0x0020 - 0x0000)
struct CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBones;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SingleBody;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody");
static_assert(sizeof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody) == 0x000020, "Wrong size on CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody, SkeletalMesh) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody, SkeletalMeshBones) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody::SkeletalMeshBones' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody, SingleBody) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody::SingleBody' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SkeletalVsSkeletal
// 0x0030 (0x0030 - 0x0000)
struct CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshA;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBonesA;                                // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshB;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkeletalMeshBonesB;                                // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal");
static_assert(sizeof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal) == 0x000030, "Wrong size on CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal, SkeletalMeshA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal::SkeletalMeshA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal, SkeletalMeshBonesA) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal::SkeletalMeshBonesA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal, SkeletalMeshB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal::SkeletalMeshB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal, SkeletalMeshBonesB) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal::SkeletalMeshBonesB' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalBones
// 0x0018 (0x0018 - 0x0000)
struct CollisionDisablerFunctionLibrary_GatherAllPhysicalBones final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutBones;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBones) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_GatherAllPhysicalBones");
static_assert(sizeof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBones) == 0x000018, "Wrong size on CollisionDisablerFunctionLibrary_GatherAllPhysicalBones");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBones, SkeletalMesh) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBones::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBones, OutBones) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBones::OutBones' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalBonesFrom
// 0x0028 (0x0028 - 0x0000)
struct CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncudeStartBone;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutBones;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom");
static_assert(sizeof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom) == 0x000028, "Wrong size on CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom, SkeletalMesh) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom, StartBone) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom::StartBone' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom, bIncudeStartBone) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom::bIncudeStartBone' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom, OutBones) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom::OutBones' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalComponents
// 0x0018 (0x0018 - 0x0000)
struct CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents");
static_assert(sizeof(CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents) == 0x000018, "Wrong size on CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents, Actor) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents::Actor' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents, OutComponents) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents::OutComponents' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.IsCollisionDisabled
// 0x0028 (0x0028 - 0x0000)
struct CollisionDisablerFunctionLibrary_IsCollisionDisabled final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_IsCollisionDisabled) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_IsCollisionDisabled");
static_assert(sizeof(CollisionDisablerFunctionLibrary_IsCollisionDisabled) == 0x000028, "Wrong size on CollisionDisablerFunctionLibrary_IsCollisionDisabled");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionDisabled, ComponentA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_IsCollisionDisabled::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionDisabled, ComponentB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_IsCollisionDisabled::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionDisabled, BoneNameA) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_IsCollisionDisabled::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionDisabled, BoneNameB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_IsCollisionDisabled::BoneNameB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionDisabled, ReturnValue) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_IsCollisionDisabled::ReturnValue' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.IsCollisionModified
// 0x0028 (0x0028 - 0x0000)
struct CollisionDisablerFunctionLibrary_IsCollisionModified final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionDisablerFunctionLibrary_IsCollisionModified) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_IsCollisionModified");
static_assert(sizeof(CollisionDisablerFunctionLibrary_IsCollisionModified) == 0x000028, "Wrong size on CollisionDisablerFunctionLibrary_IsCollisionModified");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionModified, ComponentA) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_IsCollisionModified::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionModified, ComponentB) == 0x000008, "Member 'CollisionDisablerFunctionLibrary_IsCollisionModified::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionModified, BoneNameA) == 0x000010, "Member 'CollisionDisablerFunctionLibrary_IsCollisionModified::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionModified, BoneNameB) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_IsCollisionModified::BoneNameB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_IsCollisionModified, ReturnValue) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_IsCollisionModified::ReturnValue' has a wrong offset!");

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.ModifyCollision
// 0x0038 (0x0038 - 0x0000)
struct CollisionDisablerFunctionLibrary_ModifyCollision final
{
public:
	struct FCollisionParams                       Params_0;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameA;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneNameB;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionDisablerFunctionLibrary_ModifyCollision) == 0x000008, "Wrong alignment on CollisionDisablerFunctionLibrary_ModifyCollision");
static_assert(sizeof(CollisionDisablerFunctionLibrary_ModifyCollision) == 0x000038, "Wrong size on CollisionDisablerFunctionLibrary_ModifyCollision");
static_assert(offsetof(CollisionDisablerFunctionLibrary_ModifyCollision, Params_0) == 0x000000, "Member 'CollisionDisablerFunctionLibrary_ModifyCollision::Params_0' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_ModifyCollision, ComponentA) == 0x000018, "Member 'CollisionDisablerFunctionLibrary_ModifyCollision::ComponentA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_ModifyCollision, ComponentB) == 0x000020, "Member 'CollisionDisablerFunctionLibrary_ModifyCollision::ComponentB' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_ModifyCollision, BoneNameA) == 0x000028, "Member 'CollisionDisablerFunctionLibrary_ModifyCollision::BoneNameA' has a wrong offset!");
static_assert(offsetof(CollisionDisablerFunctionLibrary_ModifyCollision, BoneNameB) == 0x000030, "Member 'CollisionDisablerFunctionLibrary_ModifyCollision::BoneNameB' has a wrong offset!");

}

