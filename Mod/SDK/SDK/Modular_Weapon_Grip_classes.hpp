#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Modular_Weapon_Grip

#include "Basic.hpp"

#include "GripType_Enum_structs.hpp"
#include "Engine_structs.hpp"
#include "Weapon_Icon_Enum_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Modular_Weapon_Part_Master_classes.hpp"
#include "SheathType_Enum_structs.hpp"
#include "SwitchGrip_Type_Enum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Modular_Weapon_Grip.Modular_Weapon_Grip_C
// 0x01F8 (0x06D0 - 0x04D8)
class AModular_Weapon_Grip_C : public AModular_Weapon_Part_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Modular_Weapon_Grip_C;              // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Grip_L_Hand_Default_Pos;                           // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Grip_R_Hand_Default_Pos;                           // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AltGripPosition_2;                                 // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AltGripPosition_1;                                 // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OffhandGrip;                                       // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Socket_Head;                                       // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Socket_Guard;                                      // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Socket_Pommel;                                     // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Module_Head;                                       // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Module_Guard;                                      // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Module_Pommel;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Array_Head;                                        // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Array_Guard;                                       // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Array_Pommel;                                      // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGripType_Enum                                Grip_R_Hand_Default;                               // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                Grip_R_Hand_Alternative;                           // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Head_Size_Min;                                     // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Head_Size_Max;                                     // 0x0588(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Guard_Size_Min;                                    // 0x05A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Guard_Size_Max;                                    // 0x05B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Grip_Size_Min;                                     // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Grip_Size_Max;                                     // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pommel_Size_Min;                                   // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pommel_Size_Max;                                   // 0x0618(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Head_Size;                                         // 0x0630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Guard_Size;                                        // 0x0648(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Grip_Size;                                         // 0x0660(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pommel_Size;                                       // 0x0678(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length_Scale;                                // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Scale_Min;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Scale_Max;                                 // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Scale;                                     // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESheathType_Enum                              SheathSlot;                                        // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeapon_Icon_Enum                             Icon_0;                                            // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Instant_Unsheath;                                  // 0x06B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B3[0x5];                                      // 0x06B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pick_Up_Priority;                                  // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Grip_Rate;                                         // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                Grip_L_Hand_Default;                               // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESwitchGrip_Type_Enum                         Alt_Grip_Switch_Type;                              // 0x06C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Modular_Weapon_Grip(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Modular_Weapon_Grip_C">();
	}
	static class AModular_Weapon_Grip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AModular_Weapon_Grip_C>();
	}
};
static_assert(alignof(AModular_Weapon_Grip_C) == 0x000008, "Wrong alignment on AModular_Weapon_Grip_C");
static_assert(sizeof(AModular_Weapon_Grip_C) == 0x0006D0, "Wrong size on AModular_Weapon_Grip_C");
static_assert(offsetof(AModular_Weapon_Grip_C, UberGraphFrame_Modular_Weapon_Grip_C) == 0x0004D8, "Member 'AModular_Weapon_Grip_C::UberGraphFrame_Modular_Weapon_Grip_C' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_L_Hand_Default_Pos) == 0x0004E0, "Member 'AModular_Weapon_Grip_C::Grip_L_Hand_Default_Pos' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_R_Hand_Default_Pos) == 0x0004E8, "Member 'AModular_Weapon_Grip_C::Grip_R_Hand_Default_Pos' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, AltGripPosition_2) == 0x0004F0, "Member 'AModular_Weapon_Grip_C::AltGripPosition_2' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, AltGripPosition_1) == 0x0004F8, "Member 'AModular_Weapon_Grip_C::AltGripPosition_1' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, OffhandGrip) == 0x000500, "Member 'AModular_Weapon_Grip_C::OffhandGrip' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Socket_Head) == 0x000508, "Member 'AModular_Weapon_Grip_C::Socket_Head' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Socket_Guard) == 0x000510, "Member 'AModular_Weapon_Grip_C::Socket_Guard' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Socket_Pommel) == 0x000518, "Member 'AModular_Weapon_Grip_C::Socket_Pommel' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Module_Head) == 0x000520, "Member 'AModular_Weapon_Grip_C::Module_Head' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Module_Guard) == 0x000528, "Member 'AModular_Weapon_Grip_C::Module_Guard' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Module_Pommel) == 0x000530, "Member 'AModular_Weapon_Grip_C::Module_Pommel' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Array_Head) == 0x000538, "Member 'AModular_Weapon_Grip_C::Array_Head' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Array_Guard) == 0x000548, "Member 'AModular_Weapon_Grip_C::Array_Guard' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Array_Pommel) == 0x000558, "Member 'AModular_Weapon_Grip_C::Array_Pommel' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_R_Hand_Default) == 0x000568, "Member 'AModular_Weapon_Grip_C::Grip_R_Hand_Default' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_R_Hand_Alternative) == 0x000569, "Member 'AModular_Weapon_Grip_C::Grip_R_Hand_Alternative' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Head_Size_Min) == 0x000570, "Member 'AModular_Weapon_Grip_C::Head_Size_Min' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Head_Size_Max) == 0x000588, "Member 'AModular_Weapon_Grip_C::Head_Size_Max' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Guard_Size_Min) == 0x0005A0, "Member 'AModular_Weapon_Grip_C::Guard_Size_Min' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Guard_Size_Max) == 0x0005B8, "Member 'AModular_Weapon_Grip_C::Guard_Size_Max' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_Size_Min) == 0x0005D0, "Member 'AModular_Weapon_Grip_C::Grip_Size_Min' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_Size_Max) == 0x0005E8, "Member 'AModular_Weapon_Grip_C::Grip_Size_Max' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Pommel_Size_Min) == 0x000600, "Member 'AModular_Weapon_Grip_C::Pommel_Size_Min' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Pommel_Size_Max) == 0x000618, "Member 'AModular_Weapon_Grip_C::Pommel_Size_Max' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Head_Size) == 0x000630, "Member 'AModular_Weapon_Grip_C::Head_Size' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Guard_Size) == 0x000648, "Member 'AModular_Weapon_Grip_C::Guard_Size' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_Size) == 0x000660, "Member 'AModular_Weapon_Grip_C::Grip_Size' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Pommel_Size) == 0x000678, "Member 'AModular_Weapon_Grip_C::Pommel_Size' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Blade_Length_Scale) == 0x000690, "Member 'AModular_Weapon_Grip_C::Blade_Length_Scale' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Overall_Scale_Min) == 0x000698, "Member 'AModular_Weapon_Grip_C::Overall_Scale_Min' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Overall_Scale_Max) == 0x0006A0, "Member 'AModular_Weapon_Grip_C::Overall_Scale_Max' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Overall_Scale) == 0x0006A8, "Member 'AModular_Weapon_Grip_C::Overall_Scale' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, SheathSlot) == 0x0006B0, "Member 'AModular_Weapon_Grip_C::SheathSlot' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Icon_0) == 0x0006B1, "Member 'AModular_Weapon_Grip_C::Icon_0' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Instant_Unsheath) == 0x0006B2, "Member 'AModular_Weapon_Grip_C::Instant_Unsheath' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Pick_Up_Priority) == 0x0006B8, "Member 'AModular_Weapon_Grip_C::Pick_Up_Priority' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_Rate) == 0x0006C0, "Member 'AModular_Weapon_Grip_C::Grip_Rate' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Grip_L_Hand_Default) == 0x0006C8, "Member 'AModular_Weapon_Grip_C::Grip_L_Hand_Default' has a wrong offset!");
static_assert(offsetof(AModular_Weapon_Grip_C, Alt_Grip_Switch_Type) == 0x0006C9, "Member 'AModular_Weapon_Grip_C::Alt_Grip_Switch_Type' has a wrong offset!");

}

