#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Willie_BP

#include "Basic.hpp"

#include "Willie_BP_classes.hpp"
#include "Willie_BP_parameters.hpp"


namespace SDK
{

// Function Willie_BP.Willie_BP_C.Add Startup Weapons
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Add_Startup_Weapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Add Startup Weapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Add Vertex Paint Blood
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Add_Vertex_Paint_Blood(const struct FVector& Location, class FName bone, double Size, double Rate, int32 Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Add Vertex Paint Blood");

	Params::Willie_BP_C_Add_Vertex_Paint_Blood Parms{};

	Parms.Location = std::move(Location);
	Parms.bone = bone;
	Parms.Size = Size;
	Parms.Rate = Rate;
	Parms.Channel = Channel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Adjust Interp Speed to FPS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::Adjust_Interp_Speed_to_FPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Adjust Interp Speed to FPS");

	Params::Willie_BP_C_Adjust_Interp_Speed_to_FPS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.AI  Unstuck Jammed Weapons
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::AI__Unstuck_Jammed_Weapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "AI  Unstuck Jammed Weapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Ai Finish Thrust
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Ai_Finish_Thrust()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Ai Finish Thrust");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Apply Settings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Apply_Settings(double FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Apply Settings");

	Params::Willie_BP_C_Apply_Settings Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Assign L Weapon Slot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Assign_L_Weapon_Slot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Assign L Weapon Slot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Assign R Weapon Slot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Assign_R_Weapon_Slot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Assign R Weapon Slot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Attach Decal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDecalComponent*                  Decal                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAttached_Transform_Str          Attach_Param                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Nul                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Attach_Decal(class UDecalComponent* Decal, const struct FAttached_Transform_Str& Attach_Param, bool* Nul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Attach Decal");

	Params::Willie_BP_C_Attach_Decal Parms{};

	Parms.Decal = Decal;
	Parms.Attach_Param = std::move(Attach_Param);

	UObject::ProcessEvent(Func, &Parms);

	if (Nul != nullptr)
		*Nul = Parms.Nul;
}


// Function Willie_BP.Willie_BP_C.Attach L Hand To Offhand Position
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Attach_L_Hand_To_Offhand_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Attach L Hand To Offhand Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Block L Hand Weapon Drop
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Block_L_Hand_Weapon_Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Block L Hand Weapon Drop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Block R Hand Weapon Drop
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Block_R_Hand_Weapon_Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Block R Hand Weapon Drop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.BndEvt__BP_ThirdPersonCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AWillie_BP_C::BndEvt__BP_ThirdPersonCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BndEvt__BP_ThirdPersonCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::Willie_BP_C_BndEvt__BP_ThirdPersonCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_0_VertexColorGetAllVertexColorsOnly__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FRVPDPGetColorsOnlySettings      GotAllVertexColorsWithSettings                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AWillie_BP_C::BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_0_VertexColorGetAllVertexColorsOnly__DelegateSignature(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetColorsOnlySettings& GotAllVertexColorsWithSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_0_VertexColorGetAllVertexColorsOnly__DelegateSignature");

	Params::Willie_BP_C_BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_0_VertexColorGetAllVertexColorsOnly__DelegateSignature Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.GotAllVertexColorsWithSettings = std::move(GotAllVertexColorsWithSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_2_VertexColorGetClosestVertexData__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FRVPDPGetClosestVertexDataSettingsDetectedMeshWithSettings                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FRVPDPClosestVertexDataResults   ClosestVertexInfo                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FRVPDPEstimatedColorAtHitLocationInfoEstimatedColorAtHitLocationInfo                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FRVPDPAverageColorInAreaInfo     AvarageColorInAreaInfo                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AWillie_BP_C::BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_2_VertexColorGetClosestVertexData__DelegateSignature(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetClosestVertexDataSettings& DetectedMeshWithSettings, const struct FRVPDPClosestVertexDataResults& ClosestVertexInfo, const struct FRVPDPEstimatedColorAtHitLocationInfo& EstimatedColorAtHitLocationInfo, const struct FRVPDPAverageColorInAreaInfo& AvarageColorInAreaInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_2_VertexColorGetClosestVertexData__DelegateSignature");

	Params::Willie_BP_C_BndEvt__Willie_BP_BPC_RuntimeVertexPaintAndDetectionComponent_K2Node_ComponentBoundEvent_2_VertexColorGetClosestVertexData__DelegateSignature Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.DetectedMeshWithSettings = std::move(DetectedMeshWithSettings);
	Parms.ClosestVertexInfo = std::move(ClosestVertexInfo);
	Parms.EstimatedColorAtHitLocationInfo = std::move(EstimatedColorAtHitLocationInfo);
	Parms.AvarageColorInAreaInfo = std::move(AvarageColorInAreaInfo);
	Parms.AdditionalData = std::move(AdditionalData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.BndEvt__Willie_BP_Gut_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AWillie_BP_C::BndEvt__Willie_BP_Gut_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BndEvt__Willie_BP_Gut_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");

	Params::Willie_BP_C_BndEvt__Willie_BP_Gut_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Box Vertex Paint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*                    Box                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             Hit_Bone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBodyPart_Enum                          Hit_Body_Part                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Nul                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Box_Vertex_Paint(class UBoxComponent* Box, class FName Hit_Bone, EBodyPart_Enum Hit_Body_Part, bool* Nul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Box Vertex Paint");

	Params::Willie_BP_C_Box_Vertex_Paint Parms{};

	Parms.Box = Box;
	Parms.Hit_Bone = Hit_Bone;
	Parms.Hit_Body_Part = Hit_Body_Part;

	UObject::ProcessEvent(Func, &Parms);

	if (Nul != nullptr)
		*Nul = Parms.Nul;
}


// Function Willie_BP.Willie_BP_C.BOXX2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_DismembermentPart                  Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::BOXX2(Enum_DismembermentPart Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BOXX2");

	Params::Willie_BP_C_BOXX2 Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.BOXXX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBoxComponent*                    VP_Collision_Box_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    VP_Collision_Box_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::BOXXX(class UBoxComponent* VP_Collision_Box_1, class UBoxComponent* VP_Collision_Box_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "BOXXX");

	Params::Willie_BP_C_BOXXX Parms{};

	Parms.VP_Collision_Box_1 = VP_Collision_Box_1;
	Parms.VP_Collision_Box_2 = VP_Collision_Box_2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Break L Constraint
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Break_L_Constraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Break L Constraint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Break R Constraint
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Break_R_Constraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Break R Constraint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Camera Shake Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Camera_Shake_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Camera Shake Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Camera Shake Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Camera_Shake_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Camera Shake Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Check Available Weapon L in All Slots
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Check_Available_Weapon_L_in_All_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check Available Weapon L in All Slots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Check Available Weapon R in All Slots
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Check_Available_Weapon_R_in_All_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check Available Weapon R in All Slots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Check if L Holding Weapon
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Check_if_L_Holding_Weapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check if L Holding Weapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Check if R Holding Weapon
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Check_if_R_Holding_Weapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check if R Holding Weapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Check Scabbard Unsheath State L
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicsConstraintComponent*      Sheath_Constraint                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// ESheathSlots_Enum                       Sheath_Enum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Unsheathing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Check_Scabbard_Unsheath_State_L(class UPhysicsConstraintComponent* Sheath_Constraint, ESheathSlots_Enum Sheath_Enum, bool Unsheathing, double Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check Scabbard Unsheath State L");

	Params::Willie_BP_C_Check_Scabbard_Unsheath_State_L Parms{};

	Parms.Sheath_Constraint = Sheath_Constraint;
	Parms.Sheath_Enum = Sheath_Enum;
	Parms.Unsheathing = Unsheathing;
	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Check Scabbard Unsheath State R
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicsConstraintComponent*      Sheath_Constraint                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// ESheathSlots_Enum                       Sheath_Enum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Unsheathing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Check_Scabbard_Unsheath_State_R(class UPhysicsConstraintComponent* Sheath_Constraint, ESheathSlots_Enum Sheath_Enum, bool Unsheathing, double Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Check Scabbard Unsheath State R");

	Params::Willie_BP_C_Check_Scabbard_Unsheath_State_R Parms{};

	Parms.Sheath_Constraint = Sheath_Constraint;
	Parms.Sheath_Enum = Sheath_Enum;
	Parms.Unsheathing = Unsheathing;
	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Clamp Rotator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InRot                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  MinAngleDegrees_X                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxAngleDegrees_X                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinAngleDegrees_Y                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxAngleDegrees_Y                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinAngleDegrees_Z                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxAngleDegrees_Z                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Return_Clamped                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Return_Free                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWillie_BP_C::Clamp_Rotator(const struct FRotator& InRot, double MinAngleDegrees_X, double MaxAngleDegrees_X, double MinAngleDegrees_Y, double MaxAngleDegrees_Y, double MinAngleDegrees_Z, double MaxAngleDegrees_Z, struct FRotator* Return_Clamped, struct FRotator* Return_Free)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Clamp Rotator");

	Params::Willie_BP_C_Clamp_Rotator Parms{};

	Parms.InRot = std::move(InRot);
	Parms.MinAngleDegrees_X = MinAngleDegrees_X;
	Parms.MaxAngleDegrees_X = MaxAngleDegrees_X;
	Parms.MinAngleDegrees_Y = MinAngleDegrees_Y;
	Parms.MaxAngleDegrees_Y = MaxAngleDegrees_Y;
	Parms.MinAngleDegrees_Z = MinAngleDegrees_Z;
	Parms.MaxAngleDegrees_Z = MaxAngleDegrees_Z;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Clamped != nullptr)
		*Return_Clamped = std::move(Parms.Return_Clamped);

	if (Return_Free != nullptr)
		*Return_Free = std::move(Parms.Return_Free);
}


// Function Willie_BP.Willie_BP_C.Control Physical Animation Str
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicalAnimationComponent*      Physical_Animation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Control_Physical_Animation_Str(class UPhysicalAnimationComponent* Physical_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Control Physical Animation Str");

	Params::Willie_BP_C_Control_Physical_Animation_Str Parms{};

	Parms.Physical_Animation = Physical_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Create Sheath Constraint L
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeapon_Slots_Enum                      Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Create_Sheath_Constraint_L(EWeapon_Slots_Enum Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Create Sheath Constraint L");

	Params::Willie_BP_C_Create_Sheath_Constraint_L Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Create Sheath Constraint R
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeapon_Slots_Enum                      Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Create_Sheath_Constraint_R(EWeapon_Slots_Enum Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Create Sheath Constraint R");

	Params::Willie_BP_C_Create_Sheath_Constraint_R Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Current Offhand Position Scene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USceneComponent* AWillie_BP_C::Current_Offhand_Position_Scene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Current Offhand Position Scene");

	Params::Willie_BP_C_Current_Offhand_Position_Scene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_DismembermentPart                  InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::CustomEvent(Enum_DismembermentPart InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "CustomEvent");

	Params::Willie_BP_C_CustomEvent Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Damage Rate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::Damage_Rate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Damage Rate");

	Params::Willie_BP_C_Damage_Rate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Deal Complex Damage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Hit_Component_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Collided_Component                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             Hit_Bone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Velocity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Impulse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Power                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Stab_Rate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rigidity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Blunt_Destruction_Int                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold_In                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Damage_Parent_Bone_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Kick_Power                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    Hit_Box                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        Hit_Surface                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage_Out                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Rate_Out                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rigidity_Out                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Material_Density_Out                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold_Out                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Deal_Complex_Damage(class UPrimitiveComponent* Hit_Component_0, class UPrimitiveComponent* Collided_Component, class FName Hit_Bone, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Hit_Velocity, const struct FVector& Hit_Impulse, double Cutting_Power, double Stab_Rate, double Rigidity, int32 Blunt_Destruction_Int, bool Lower_Threshold_In, bool Damage_Parent_Bone_, double Kick_Power, class UBoxComponent* Hit_Box, EPhysicalSurface* Hit_Surface, double* Damage_Out, double* Cutting_Rate_Out, double* Rigidity_Out, double* Material_Density_Out, bool* Lower_Threshold_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Deal Complex Damage");

	Params::Willie_BP_C_Deal_Complex_Damage Parms{};

	Parms.Hit_Component_0 = Hit_Component_0;
	Parms.Collided_Component = Collided_Component;
	Parms.Hit_Bone = Hit_Bone;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Hit_Velocity = std::move(Hit_Velocity);
	Parms.Hit_Impulse = std::move(Hit_Impulse);
	Parms.Cutting_Power = Cutting_Power;
	Parms.Stab_Rate = Stab_Rate;
	Parms.Rigidity = Rigidity;
	Parms.Blunt_Destruction_Int = Blunt_Destruction_Int;
	Parms.Lower_Threshold_In = Lower_Threshold_In;
	Parms.Damage_Parent_Bone_ = Damage_Parent_Bone_;
	Parms.Kick_Power = Kick_Power;
	Parms.Hit_Box = Hit_Box;

	UObject::ProcessEvent(Func, &Parms);

	if (Hit_Surface != nullptr)
		*Hit_Surface = Parms.Hit_Surface;

	if (Damage_Out != nullptr)
		*Damage_Out = Parms.Damage_Out;

	if (Cutting_Rate_Out != nullptr)
		*Cutting_Rate_Out = Parms.Cutting_Rate_Out;

	if (Rigidity_Out != nullptr)
		*Rigidity_Out = Parms.Rigidity_Out;

	if (Material_Density_Out != nullptr)
		*Material_Density_Out = Parms.Material_Density_Out;

	if (Lower_Threshold_Out != nullptr)
		*Lower_Threshold_Out = Parms.Lower_Threshold_Out;
}


// Function Willie_BP.Willie_BP_C.Death
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Death Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Death_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Death Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Death Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Death_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Death Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Destroy Willie
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Destroy_Willie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Destroy Willie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Disentergrate
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Disentergrate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Disentergrate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Dismember Cut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Cut_Mesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Dism_Cut_Level                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    VP_Collision_Box_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    VP_Collision_Box_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Dismember_Cut(class FName bone, const struct FVector& Location, class UPrimitiveComponent* Cut_Mesh, int32 Dism_Cut_Level, class UBoxComponent* VP_Collision_Box_1, class UBoxComponent* VP_Collision_Box_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Dismember Cut");

	Params::Willie_BP_C_Dismember_Cut Parms{};

	Parms.bone = bone;
	Parms.Location = std::move(Location);
	Parms.Cut_Mesh = Cut_Mesh;
	Parms.Dism_Cut_Level = Dism_Cut_Level;
	Parms.VP_Collision_Box_1 = VP_Collision_Box_1;
	Parms.VP_Collision_Box_2 = VP_Collision_Box_2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Dismember Function Delayed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Master_Mesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// Enum_DismembermentPart                  Dismembered_Part                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Attach_Marker                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UPrimitiveComponent*>      Overlapped_Markers                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UBoxComponent*                    VP_Box_Collision_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    VP_Box_Collision_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Dismember_Weapon                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Spawned_Limb_Local1                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Dismember_Function_Delayed(class USkeletalMeshComponent* Master_Mesh, Enum_DismembermentPart Dismembered_Part, class UPrimitiveComponent* Attach_Marker, TArray<class UPrimitiveComponent*>& Overlapped_Markers, class UBoxComponent* VP_Box_Collision_1, class UBoxComponent* VP_Box_Collision_2, class UPrimitiveComponent* Dismember_Weapon, class USkeletalMeshComponent** Spawned_Limb_Local1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Dismember Function Delayed");

	Params::Willie_BP_C_Dismember_Function_Delayed Parms{};

	Parms.Master_Mesh = Master_Mesh;
	Parms.Dismembered_Part = Dismembered_Part;
	Parms.Attach_Marker = Attach_Marker;
	Parms.Overlapped_Markers = std::move(Overlapped_Markers);
	Parms.VP_Box_Collision_1 = VP_Box_Collision_1;
	Parms.VP_Box_Collision_2 = VP_Box_Collision_2;
	Parms.Dismember_Weapon = Dismember_Weapon;

	UObject::ProcessEvent(Func, &Parms);

	Overlapped_Markers = std::move(Parms.Overlapped_Markers);

	if (Spawned_Limb_Local1 != nullptr)
		*Spawned_Limb_Local1 = Parms.Spawned_Limb_Local1;
}


// Function Willie_BP.Willie_BP_C.Dismember Function Initiate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Master_Mesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// Enum_DismembermentPart                  Dismembered_Part                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Attach_Marker                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UPrimitiveComponent*>      Overlapped_Markers                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UBoxComponent*                    VP_Box_Collision_1                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    VP_Box_Collision_2                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Dismember_Weapon                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Dismember_Function_Initiate(class USkeletalMeshComponent* Master_Mesh, Enum_DismembermentPart Dismembered_Part, class UPrimitiveComponent* Attach_Marker, TArray<class UPrimitiveComponent*>& Overlapped_Markers, class UBoxComponent* VP_Box_Collision_1, class UBoxComponent* VP_Box_Collision_2, class UPrimitiveComponent* Dismember_Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Dismember Function Initiate");

	Params::Willie_BP_C_Dismember_Function_Initiate Parms{};

	Parms.Master_Mesh = Master_Mesh;
	Parms.Dismembered_Part = Dismembered_Part;
	Parms.Attach_Marker = Attach_Marker;
	Parms.Overlapped_Markers = std::move(Overlapped_Markers);
	Parms.VP_Box_Collision_1 = VP_Box_Collision_1;
	Parms.VP_Box_Collision_2 = VP_Box_Collision_2;
	Parms.Dismember_Weapon = Dismember_Weapon;

	UObject::ProcessEvent(Func, &Parms);

	Overlapped_Markers = std::move(Parms.Overlapped_Markers);
}


// Function Willie_BP.Willie_BP_C.Draw Weapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELeftRight_Enum                         Hand                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeftRight_Enum                         Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeapon_Slots_Enum                      Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Draw_Weapon(ELeftRight_Enum Hand, ELeftRight_Enum Side, EWeapon_Slots_Enum Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Draw Weapon");

	Params::Willie_BP_C_Draw_Weapon Parms{};

	Parms.Hand = Hand;
	Parms.Side = Side;
	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Dying
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Dying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Dying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Event Add Blood EmitterTo Hit Object
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spawn_Rate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Event_Add_Blood_EmitterTo_Hit_Object(const struct FTransform& SpawnTransform, double Spawn_Rate, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Add Blood EmitterTo Hit Object");

	Params::Willie_BP_C_Event_Add_Blood_EmitterTo_Hit_Object Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Spawn_Rate = Spawn_Rate;
	Parms.Parent = Parent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Event Add Sheathed Weapon
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Event_Add_Sheathed_Weapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Add Sheathed Weapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Event Block L OffHand Grab
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Event_Block_L_OffHand_Grab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Block L OffHand Grab");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Event Clear Sheathed Weapon Slots
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Event_Clear_Sheathed_Weapon_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Clear Sheathed Weapon Slots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Event Slide Right Hand Along Shaft
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Event_Slide_Right_Hand_Along_Shaft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Slide Right Hand Along Shaft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Event Versus Lost
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Event_Versus_Lost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Event Versus Lost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.ExecuteUbergraph_Willie_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::ExecuteUbergraph_Willie_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "ExecuteUbergraph_Willie_BP");

	Params::Willie_BP_C_ExecuteUbergraph_Willie_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Explode Head
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Explode_Head()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Explode Head");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Fall
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Fall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Fall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Feet Rotation and Normal
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Feet_Rotation_and_Normal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Feet Rotation and Normal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Find Node Time Begin
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Find_Node_Time_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Find Node Time Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Find Node Time End
// (Public, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Find_Node_Time_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Find Node Time End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Find Sheath Length
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AModularWeaponBP_C*               InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::Find_Sheath_Length(class AModularWeaponBP_C* InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Find Sheath Length");

	Params::Willie_BP_C_Find_Sheath_Length Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Find Thrusting Location
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EGripType_Enum                          Grip_Typr                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Thrust_Position                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Y_0                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AWillie_BP_C::Find_Thrusting_Location(EGripType_Enum Grip_Typr, double Thrust_Position, double Y_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Find Thrusting Location");

	Params::Willie_BP_C_Find_Thrusting_Location Parms{};

	Parms.Grip_Typr = Grip_Typr;
	Parms.Thrust_Position = Thrust_Position;
	Parms.Y_0 = Y_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Force TPP
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Force_TPP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Force TPP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Get Damage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Raw_Damage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Power                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inside                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Damaged_Mesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Dism_Blunt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shockwave                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Hit_By_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Stab_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    Hit_Box                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Damage_Out                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Get_Damage(const struct FVector& Impulse, const struct FVector& Velocity, const struct FVector& Location, const struct FVector& Normal, class FName bone, double Raw_Damage, double Cutting_Power, bool Inside, class UPrimitiveComponent* Damaged_Mesh, int32 Dism_Blunt, bool Lower_Threshold, bool Shockwave, class UPrimitiveComponent* Hit_By_Component, bool Stab_, class UBoxComponent* Hit_Box, double* Damage_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Get Damage");

	Params::Willie_BP_C_Get_Damage Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.Velocity = std::move(Velocity);
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.bone = bone;
	Parms.Raw_Damage = Raw_Damage;
	Parms.Cutting_Power = Cutting_Power;
	Parms.Inside = Inside;
	Parms.Damaged_Mesh = Damaged_Mesh;
	Parms.Dism_Blunt = Dism_Blunt;
	Parms.Lower_Threshold = Lower_Threshold;
	Parms.Shockwave = Shockwave;
	Parms.Hit_By_Component = Hit_By_Component;
	Parms.Stab_ = Stab_;
	Parms.Hit_Box = Hit_Box;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage_Out != nullptr)
		*Damage_Out = Parms.Damage_Out;
}


// Function Willie_BP.Willie_BP_C.Get Damage_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Raw_Damage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cutting_Power                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inside                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Damaged_Mesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Dism_Blunt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lower_Threshold                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shockwave                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Hit_By_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Damage_Out                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Get_Damage_0(const struct FVector& Impulse, const struct FVector& Velocity, const struct FVector& Location, const struct FVector& Normal, class FName bone, double Raw_Damage, double Cutting_Power, bool Inside, class UPrimitiveComponent* Damaged_Mesh, int32 Dism_Blunt, bool Lower_Threshold, bool Shockwave, class UPrimitiveComponent* Hit_By_Component, double* Damage_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Get Damage_0");

	Params::Willie_BP_C_Get_Damage_0 Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.Velocity = std::move(Velocity);
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.bone = bone;
	Parms.Raw_Damage = Raw_Damage;
	Parms.Cutting_Power = Cutting_Power;
	Parms.Inside = Inside;
	Parms.Damaged_Mesh = Damaged_Mesh;
	Parms.Dism_Blunt = Dism_Blunt;
	Parms.Lower_Threshold = Lower_Threshold;
	Parms.Shockwave = Shockwave;
	Parms.Hit_By_Component = Hit_By_Component;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage_Out != nullptr)
		*Damage_Out = Parms.Damage_Out;
}


// Function Willie_BP.Willie_BP_C.InpActEvt_C_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_C_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_C_K2Node_InputKeyEvent_2");

	Params::Willie_BP_C_InpActEvt_C_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_CapsLock_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_CapsLock_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_CapsLock_K2Node_InputKeyEvent_7");

	Params::Willie_BP_C_InpActEvt_CapsLock_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Change Camera_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Change_Camera_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Change Camera_K2Node_InputActionEvent_0");

	Params::Willie_BP_C_InpActEvt_Change_Camera_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Crouch Hold_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Crouch_Hold_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Crouch Hold_K2Node_InputActionEvent_8");

	Params::Willie_BP_C_InpActEvt_Crouch_Hold_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Crouch Hold_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Crouch_Hold_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Crouch Hold_K2Node_InputActionEvent_9");

	Params::Willie_BP_C_InpActEvt_Crouch_Hold_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Crouch Key_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Crouch_Key_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Crouch Key_K2Node_InputActionEvent_4");

	Params::Willie_BP_C_InpActEvt_Crouch_Key_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Crouch Key_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Crouch_Key_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Crouch Key_K2Node_InputActionEvent_5");

	Params::Willie_BP_C_InpActEvt_Crouch_Key_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_G_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_G_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_G_K2Node_InputKeyEvent_5");

	Params::Willie_BP_C_InpActEvt_G_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_G_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_G_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_G_K2Node_InputKeyEvent_6");

	Params::Willie_BP_C_InpActEvt_G_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Grab Left_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Grab_Left_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Grab Left_K2Node_InputActionEvent_15");

	Params::Willie_BP_C_InpActEvt_Grab_Left_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Grab Left_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Grab_Left_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Grab Left_K2Node_InputActionEvent_16");

	Params::Willie_BP_C_InpActEvt_Grab_Left_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Grab Right_K2Node_InputActionEvent_17
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Grab_Right_K2Node_InputActionEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Grab Right_K2Node_InputActionEvent_17");

	Params::Willie_BP_C_InpActEvt_Grab_Right_K2Node_InputActionEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Grab Right_K2Node_InputActionEvent_18
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Grab_Right_K2Node_InputActionEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Grab Right_K2Node_InputActionEvent_18");

	Params::Willie_BP_C_InpActEvt_Grab_Right_K2Node_InputActionEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Jump_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Jump_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Jump_K2Node_InputActionEvent_13");

	Params::Willie_BP_C_InpActEvt_Jump_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_P_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_P_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_P_K2Node_InputKeyEvent_3");

	Params::Willie_BP_C_InpActEvt_P_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Pause_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Pause_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Pause_K2Node_InputActionEvent_1");

	Params::Willie_BP_C_InpActEvt_Pause_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_R_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_R_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_R_K2Node_InputKeyEvent_4");

	Params::Willie_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0");

	Params::Willie_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1");

	Params::Willie_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Run_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Run_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Run_K2Node_InputActionEvent_2");

	Params::Willie_BP_C_InpActEvt_Run_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Run_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Run_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Run_K2Node_InputActionEvent_3");

	Params::Willie_BP_C_InpActEvt_Run_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Swap Hands_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Swap_Hands_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Swap Hands_K2Node_InputActionEvent_14");

	Params::Willie_BP_C_InpActEvt_Swap_Hands_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Thrust Gamepad_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Thrust Gamepad_K2Node_InputActionEvent_10");

	Params::Willie_BP_C_InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Thrust Gamepad_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Thrust Gamepad_K2Node_InputActionEvent_11");

	Params::Willie_BP_C_InpActEvt_Thrust_Gamepad_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Thrust_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Thrust_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Thrust_K2Node_InputActionEvent_6");

	Params::Willie_BP_C_InpActEvt_Thrust_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Thrust_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Thrust_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Thrust_K2Node_InputActionEvent_7");

	Params::Willie_BP_C_InpActEvt_Thrust_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpActEvt_Toggle Camera Lock_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::InpActEvt_Toggle_Camera_Lock_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpActEvt_Toggle Camera Lock_K2Node_InputActionEvent_12");

	Params::Willie_BP_C_InpActEvt_Toggle_Camera_Lock_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Key Forward_K2Node_InputAxisEvent_4
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Key_Forward_K2Node_InputAxisEvent_4(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Key Forward_K2Node_InputAxisEvent_4");

	Params::Willie_BP_C_InpAxisEvt_Key_Forward_K2Node_InputAxisEvent_4 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Key Right_K2Node_InputAxisEvent_5
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Key_Right_K2Node_InputAxisEvent_5(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Key Right_K2Node_InputAxisEvent_5");

	Params::Willie_BP_C_InpAxisEvt_Key_Right_K2Node_InputAxisEvent_5 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Left Arm Axis_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Left_Arm_Axis_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Left Arm Axis_K2Node_InputAxisEvent_3");

	Params::Willie_BP_C_InpAxisEvt_Left_Arm_Axis_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Left Guard Axis_K2Node_InputAxisEvent_7
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Left_Guard_Axis_K2Node_InputAxisEvent_7(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Left Guard Axis_K2Node_InputAxisEvent_7");

	Params::Willie_BP_C_InpAxisEvt_Left_Guard_Axis_K2Node_InputAxisEvent_7 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Down Gamepad_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Down_Gamepad_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Down Gamepad_K2Node_InputAxisEvent_1");

	Params::Willie_BP_C__Down_Gamepad_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Down Mouse_K2Node_InputAxisEvent_17
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Down_Mouse_K2Node_InputAxisEvent_17(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Down Mouse_K2Node_InputAxisEvent_17");

	Params::Willie_BP_C__Down_Mouse_K2Node_InputAxisEvent_17 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Backward_K2Node_InputAxisEvent_14
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Backward_K2Node_InputAxisEvent_14(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Backward_K2Node_InputAxisEvent_14");

	Params::Willie_BP_C__Backward_K2Node_InputAxisEvent_14 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Left_K2Node_InputAxisEvent_19
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Left_K2Node_InputAxisEvent_19(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Left_K2Node_InputAxisEvent_19");

	Params::Willie_BP_C__Left_K2Node_InputAxisEvent_19 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Right Arm Axis_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Right_Arm_Axis_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Right Arm Axis_K2Node_InputAxisEvent_2");

	Params::Willie_BP_C_InpAxisEvt_Right_Arm_Axis_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.InpAxisEvt_Right Guard Axis_K2Node_InputAxisEvent_6
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::InpAxisEvt_Right_Guard_Axis_K2Node_InputAxisEvent_6(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "InpAxisEvt_Right Guard Axis_K2Node_InputAxisEvent_6");

	Params::Willie_BP_C_InpAxisEvt_Right_Guard_Axis_K2Node_InputAxisEvent_6 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Left Gamepad_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Left_Gamepad_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Left Gamepad_K2Node_InputAxisEvent_0");

	Params::Willie_BP_C__Left_Gamepad_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C. Left Mouse_K2Node_InputAxisEvent_16
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::_Left_Mouse_K2Node_InputAxisEvent_16(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", " Left Mouse_K2Node_InputAxisEvent_16");

	Params::Willie_BP_C__Left_Mouse_K2Node_InputAxisEvent_16 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Kick Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Kick_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kick Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Kick L Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Kick_L_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kick L Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Kick L Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Kick_L_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kick L Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Kick R Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Kick_R_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kick R Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Kick R Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Kick_R_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kick R Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Kneel Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Kneel_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Kneel Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.L Hand Sheath Start
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::L_Hand_Sheath_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "L Hand Sheath Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.L Hand Stamina Burn Rate f
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::L_Hand_Stamina_Burn_Rate_f()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "L Hand Stamina Burn Rate f");

	Params::Willie_BP_C_L_Hand_Stamina_Burn_Rate_f Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.L Step Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::L_Step_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "L Step Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.L Step Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::L_Step_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "L Step Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Load Save
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Load_Save()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Load Save");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Load Save Give Up
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Load_Save_Give_Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Load Save Give Up");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Move L Hand To Not Awkward Position
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Move_L_Hand_To_Not_Awkward_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Move L Hand To Not Awkward Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Muscle Motor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Body_Mesh                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    UpperBody                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Muscle_Motor(class USkeletalMeshComponent* Body_Mesh, bool UpperBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Muscle Motor");

	Params::Willie_BP_C_Muscle_Motor Parms{};

	Parms.Body_Mesh = Body_Mesh;
	Parms.UpperBody = UpperBody;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Paint Blood Bleed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Paint_Blood_Bleed(const struct FVector& Location, class FName BoneName, double Size, double Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Paint Blood Bleed");

	Params::Willie_BP_C_Paint_Blood_Bleed Parms{};

	Parms.Location = std::move(Location);
	Parms.BoneName = BoneName;
	Parms.Size = Size;
	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Paint Blood Splash
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Paint_Blood_Splash(const struct FVector& Location, class FName BoneName, double Size, double Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Paint Blood Splash");

	Params::Willie_BP_C_Paint_Blood_Splash Parms{};

	Parms.Location = std::move(Location);
	Parms.BoneName = BoneName;
	Parms.Size = Size;
	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Pick Up Armor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Picked_Armor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_Armor_Master_C*               Armor_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Pick_Up_Armor(class USceneComponent* Picked_Armor, class ABP_Armor_Master_C* Armor_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Pick Up Armor");

	Params::Willie_BP_C_Pick_Up_Armor Parms{};

	Parms.Picked_Armor = Picked_Armor;
	Parms.Armor_Actor = Armor_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Pick Up Left Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Pick_Up_Left_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Pick Up Left Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Pick Up Right Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Pick_Up_Right_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Pick Up Right Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Play Curse VO
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Play_Curse_VO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Play Curse VO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Play Pain Sound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Play_Pain_Sound(double Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Play Pain Sound");

	Params::Willie_BP_C_Play_Pain_Sound Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Polearm Hands Switch
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Polearm_Hands_Switch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Polearm Hands Switch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.R Hand Sheath Start
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::R_Hand_Sheath_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "R Hand Sheath Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.R Hand Stamina Burn Rate f
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::R_Hand_Stamina_Burn_Rate_f()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "R Hand Stamina Burn Rate f");

	Params::Willie_BP_C_R_Hand_Stamina_Burn_Rate_f Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.R Step Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::R_Step_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "R Step Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.R Step Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::R_Step_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "R Step Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AWillie_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "ReceiveTick");

	Params::Willie_BP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Relative Rotate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AWillie_BP_C::Relative_Rotate(const struct FTransform& InputPin, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Relative Rotate");

	Params::Willie_BP_C_Relative_Rotate Parms{};

	Parms.InputPin = std::move(InputPin);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Release Grab L
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Release_Grab_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Release Grab L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Release Grab R
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Release_Grab_R()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Release Grab R");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Release No Dismember Bones
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Release_No_Dismember_Bones()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Release No Dismember Bones");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Release Offhand
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Release_Offhand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Release Offhand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Remove Armor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EArmorSlots_Enum                        Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Armor_Master_C*               Dropped_Armor                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Remove_Armor(class UClass* Class_0, const struct FTransform& SpawnTransform, const EArmorSlots_Enum& Key, class ABP_Armor_Master_C** Dropped_Armor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Remove Armor");

	Params::Willie_BP_C_Remove_Armor Parms{};

	Parms.Class_0 = Class_0;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (Dropped_Armor != nullptr)
		*Dropped_Armor = Parms.Dropped_Armor;
}


// Function Willie_BP.Willie_BP_C.Remove Hat
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Remove_Hat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Remove Hat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Blood Bleed
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Blood_Bleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Blood Bleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Blood Splash
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Blood_Splash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Blood Splash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Body Hit Sound
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Body_Hit_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Body Hit Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Last Damage Taken
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Last_Damage_Taken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Last Damage Taken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Latest Complex Damage
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Latest_Complex_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Latest Complex Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Latest VP Damage
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Latest_VP_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Latest VP Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset OffHand Locked
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_OffHand_Locked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset OffHand Locked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Parry
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Parry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Parry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Step Sound L
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Step_Sound_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Step Sound L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Step Sound R
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Step_Sound_R()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Step Sound R");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Sustained Damage
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Reset_Sustained_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Sustained Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Reset Trail Blood
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Reset_Trail_Blood(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Reset Trail Blood");

	Params::Willie_BP_C_Reset_Trail_Blood Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Save Loadout
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Save_Loadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Save Loadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Send Threat Location R
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Threat_Location_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Nul                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Send_Threat_Location_R(const struct FVector& Threat_Location_0, const struct FVector& Offset, bool Immediate, bool* Nul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Send Threat Location R");

	Params::Willie_BP_C_Send_Threat_Location_R Parms{};

	Parms.Threat_Location_0 = std::move(Threat_Location_0);
	Parms.Offset = std::move(Offset);
	Parms.Immediate = Immediate;

	UObject::ProcessEvent(Func, &Parms);

	if (Nul != nullptr)
		*Nul = Parms.Nul;
}


// Function Willie_BP.Willie_BP_C.Set Arm Aim Location
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Control_Rate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Aim_Scene                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Shoulder_Scene                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Aim_Roataion                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Default_Arm_Position                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGripType_Enum                          Grip                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Set_Arm_Aim_Location(double Control_Rate, class USceneComponent* Aim_Scene, class USceneComponent* Shoulder_Scene, const struct FRotator& Aim_Roataion, const struct FVector& Default_Arm_Position, EGripType_Enum Grip, double A, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Arm Aim Location");

	Params::Willie_BP_C_Set_Arm_Aim_Location Parms{};

	Parms.Control_Rate = Control_Rate;
	Parms.Aim_Scene = Aim_Scene;
	Parms.Shoulder_Scene = Shoulder_Scene;
	Parms.Aim_Roataion = std::move(Aim_Roataion);
	Parms.Default_Arm_Position = std::move(Default_Arm_Position);
	Parms.Grip = Grip;
	Parms.A = A;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function Willie_BP.Willie_BP_C.Set Arm Aim Rotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Shoulder_Scene                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Y_0                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  X_0                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Guarding_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Control_Rate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Aim_ROtation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Hand_Socket_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWillie_BP_C::Set_Arm_Aim_Rotation(class USceneComponent* Shoulder_Scene, double Y_0, double X_0, bool Guarding_, double Control_Rate, const struct FRotator& Aim_ROtation, class FName Hand_Socket_Name, struct FRotator* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Arm Aim Rotation");

	Params::Willie_BP_C_Set_Arm_Aim_Rotation Parms{};

	Parms.Shoulder_Scene = Shoulder_Scene;
	Parms.Y_0 = Y_0;
	Parms.X_0 = X_0;
	Parms.Guarding_ = Guarding_;
	Parms.Control_Rate = Control_Rate;
	Parms.Aim_ROtation = std::move(Aim_ROtation);
	Parms.Hand_Socket_Name = Hand_Socket_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function Willie_BP.Willie_BP_C.Set Arm IK Relative Rotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Control_Rate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Wrist_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Shoulder_Scene                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EGripType_Enum                          Grip_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWillie_BP_C::Set_Arm_IK_Relative_Rotation(double Control_Rate, float Wrist_Direction, class USceneComponent* Shoulder_Scene, EGripType_Enum Grip_Type, struct FRotator* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Arm IK Relative Rotation");

	Params::Willie_BP_C_Set_Arm_IK_Relative_Rotation Parms{};

	Parms.Control_Rate = Control_Rate;
	Parms.Wrist_Direction = Wrist_Direction;
	Parms.Shoulder_Scene = Shoulder_Scene;
	Parms.Grip_Type = Grip_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function Willie_BP.Willie_BP_C.Set Pain Location
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Set_Pain_Location(class FName BoneName, const struct FVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Pain Location");

	Params::Willie_BP_C_Set_Pain_Location Parms{};

	Parms.BoneName = BoneName;
	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Set Shoulder Rotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Control_Rate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Aim_ROtation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWillie_BP_C::Set_Shoulder_Rotation(double Control_Rate, const struct FRotator& Aim_ROtation, struct FRotator* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Shoulder Rotation");

	Params::Willie_BP_C_Set_Shoulder_Rotation Parms{};

	Parms.Control_Rate = Control_Rate;
	Parms.Aim_ROtation = std::move(Aim_ROtation);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function Willie_BP.Willie_BP_C.Set Up Armor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Clear_Previous                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Load_Saved_Armor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Save_Armor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_Loadout_Equipment           Load_Armor                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::Set_Up_Armor(bool Clear_Previous, bool Load_Saved_Armor, bool Save_Armor, const struct FStr_Loadout_Equipment& Load_Armor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Up Armor");

	Params::Willie_BP_C_Set_Up_Armor Parms{};

	Parms.Clear_Previous = Clear_Previous;
	Parms.Load_Saved_Armor = Load_Saved_Armor;
	Parms.Save_Armor = Save_Armor;
	Parms.Load_Armor = std::move(Load_Armor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Set Up Left Hand Weapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Weapon_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AModularWeaponBP_C*               Weapon_L_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Dropped_With_no_Damage                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Destroy_Previous                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_WeaponParts                 Str_Weapon_Parts                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::Set_Up_Left_Hand_Weapon(class UClass* Weapon_Class, class AModularWeaponBP_C* Weapon_L_0, bool Dropped_With_no_Damage, bool Destroy_Previous, const struct FStr_WeaponParts& Str_Weapon_Parts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Up Left Hand Weapon");

	Params::Willie_BP_C_Set_Up_Left_Hand_Weapon Parms{};

	Parms.Weapon_Class = Weapon_Class;
	Parms.Weapon_L_0 = Weapon_L_0;
	Parms.Dropped_With_no_Damage = Dropped_With_no_Damage;
	Parms.Destroy_Previous = Destroy_Previous;
	Parms.Str_Weapon_Parts = std::move(Str_Weapon_Parts);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Set Up Right Hand Weapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Weapon_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AModularWeaponBP_C*               Weapon_R_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Dropped_With_no_Damage                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Destroy_Previous                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_WeaponParts                 Str_Weapon_Parts                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AWillie_BP_C::Set_Up_Right_Hand_Weapon(class UClass* Weapon_Class, class AModularWeaponBP_C* Weapon_R_0, bool Dropped_With_no_Damage, bool Destroy_Previous, const struct FStr_WeaponParts& Str_Weapon_Parts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Up Right Hand Weapon");

	Params::Willie_BP_C_Set_Up_Right_Hand_Weapon Parms{};

	Parms.Weapon_Class = Weapon_Class;
	Parms.Weapon_R_0 = Weapon_R_0;
	Parms.Dropped_With_no_Damage = Dropped_With_no_Damage;
	Parms.Destroy_Previous = Destroy_Previous;
	Parms.Str_Weapon_Parts = std::move(Str_Weapon_Parts);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Set X
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Shoulder_Scene                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  X_Offset                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::Set_X(class USceneComponent* Shoulder_Scene, double X_Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set X");

	Params::Willie_BP_C_Set_X Parms{};

	Parms.Shoulder_Scene = Shoulder_Scene;
	Parms.X_Offset = X_Offset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Set Y
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Shoulder_Scene                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Y_Offset                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AWillie_BP_C::Set_Y(class USceneComponent* Shoulder_Scene, double Y_Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Set Y");

	Params::Willie_BP_C_Set_Y Parms{};

	Parms.Shoulder_Scene = Shoulder_Scene;
	Parms.Y_Offset = Y_Offset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Willie_BP.Willie_BP_C.Sheath L
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Sheath_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Scabbard_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Sheath_L(class FName Sheath_Slot, bool Scabbard_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Sheath L");

	Params::Willie_BP_C_Sheath_L Parms{};

	Parms.Sheath_Slot = Sheath_Slot;
	Parms.Scabbard_ = Scabbard_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Sheath R
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Sheath_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Scabbard_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Sheath_R(class FName Sheath_Slot, bool Scabbard_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Sheath R");

	Params::Willie_BP_C_Sheath_R Parms{};

	Parms.Sheath_Slot = Sheath_Slot;
	Parms.Scabbard_ = Scabbard_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Sheathe on Spawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AModularWeaponBP_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESheathSlots_Enum                       Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Sheathe_on_Spawn(class AModularWeaponBP_C* Weapon, ESheathSlots_Enum Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Sheathe on Spawn");

	Params::Willie_BP_C_Sheathe_on_Spawn Parms{};

	Parms.Weapon = Weapon;
	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Slomo Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Slomo_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Slomo Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Slomo Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Slomo_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Slomo Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Spawn Blood
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spawn_Rate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBodyPart_Enum                          Body_Partt                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Body_Mesh                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Loop_Count                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Extra_Velocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Pover                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Skip_Check                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Spawn_Blood(const struct FTransform& Transform, double Spawn_Rate, class FName bone, EBodyPart_Enum Body_Partt, class USkeletalMeshComponent* Body_Mesh, int32 Loop_Count, bool Extra_Velocity, const struct FVector& Velocity, const struct FVector& Pover, bool Skip_Check)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Spawn Blood");

	Params::Willie_BP_C_Spawn_Blood Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Spawn_Rate = Spawn_Rate;
	Parms.bone = bone;
	Parms.Body_Partt = Body_Partt;
	Parms.Body_Mesh = Body_Mesh;
	Parms.Loop_Count = Loop_Count;
	Parms.Extra_Velocity = Extra_Velocity;
	Parms.Velocity = std::move(Velocity);
	Parms.Pover = std::move(Pover);
	Parms.Skip_Check = Skip_Check;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Spawn Limb No Mesh Merge
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWillie_Bones_Enum                      NewLocalVar1                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Affected_Mesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   Dism_Level1                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Spawned_Limb_Local1                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Spawn_Limb_No_Mesh_Merge(EWillie_Bones_Enum NewLocalVar1, class USkeletalMeshComponent* Affected_Mesh, int32 Dism_Level1, class USkeletalMeshComponent** Spawned_Limb_Local1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Spawn Limb No Mesh Merge");

	Params::Willie_BP_C_Spawn_Limb_No_Mesh_Merge Parms{};

	Parms.NewLocalVar1 = NewLocalVar1;
	Parms.Affected_Mesh = Affected_Mesh;
	Parms.Dism_Level1 = Dism_Level1;

	UObject::ProcessEvent(Func, &Parms);

	if (Spawned_Limb_Local1 != nullptr)
		*Spawned_Limb_Local1 = Parms.Spawned_Limb_Local1;
}


// Function Willie_BP.Willie_BP_C.Spill Guts
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Spill_Guts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Spill Guts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Stop Detached Blood Emitters
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Stop_Detached_Blood_Emitters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Stop Detached Blood Emitters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.StopThatBlade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Nul                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::StopThatBlade(double Power, bool* Nul)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "StopThatBlade");

	Params::Willie_BP_C_StopThatBlade Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);

	if (Nul != nullptr)
		*Nul = Parms.Nul;
}


// Function Willie_BP.Willie_BP_C.Swap Weapons
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Swap_Weapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Swap Weapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Thrust L
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Thrust_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Thrust L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Thrust R
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Thrust_R()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Thrust R");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_1__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_1__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_2__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_2__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_3__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_3__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_3__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_3__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_3__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_3__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_5__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_5__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_5__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline_5__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline_5__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline_5__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline__FinishedFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Timeline__UpdateFunc
// (BlueprintEvent)

void AWillie_BP_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Toggle Invert
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Toggle_Invert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Toggle Invert");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Un Kneel Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Un_Kneel_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Un Kneel Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Unsheath Event L Delayed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Grab_Component_R_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Unsheath_Event_L_Delayed(class UPrimitiveComponent* Grab_Component_R_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Unsheath Event L Delayed");

	Params::Willie_BP_C_Unsheath_Event_L_Delayed Parms{};

	Parms.Grab_Component_R_0 = Grab_Component_R_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Unsheath Event R Delayed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Grab_Component_R_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Unsheath_Event_R_Delayed(class UPrimitiveComponent* Grab_Component_R_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Unsheath Event R Delayed");

	Params::Willie_BP_C_Unsheath_Event_R_Delayed Parms{};

	Parms.Grab_Component_R_0 = Grab_Component_R_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Unsheath L
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AModularWeaponBP_C*               Unsheathed_Weapon                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Unsheath_L(class AModularWeaponBP_C* Unsheathed_Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Unsheath L");

	Params::Willie_BP_C_Unsheath_L Parms{};

	Parms.Unsheathed_Weapon = Unsheathed_Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Unsheath R
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AModularWeaponBP_C*               Unsheathed_Weapon                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Unsheath_R(class AModularWeaponBP_C* Unsheathed_Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Unsheath R");

	Params::Willie_BP_C_Unsheath_R Parms{};

	Parms.Unsheathed_Weapon = Unsheathed_Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Willie_BP.Willie_BP_C.Unsheath R Event
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Unsheath_R_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Unsheath R Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Update Aim
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Update_Aim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Update Aim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Velocity Calculator V
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Current_Location                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Delayed_Location                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Delayed_Out                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Velocity_Calculator_V(const struct FVector& Current_Location, const struct FVector& Delayed_Location, struct FVector* Velocity, struct FVector* Delayed_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Velocity Calculator V");

	Params::Willie_BP_C_Velocity_Calculator_V Parms{};

	Parms.Current_Location = std::move(Current_Location);
	Parms.Delayed_Location = std::move(Delayed_Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Delayed_Out != nullptr)
		*Delayed_Out = std::move(Parms.Delayed_Out);
}


// Function Willie_BP.Willie_BP_C.VO Curse
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::VO_Curse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "VO Curse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.VO Deescalate
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::VO_Deescalate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "VO Deescalate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.VO Insult
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::VO_Insult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "VO Insult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.VO Interrupt
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::VO_Interrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "VO Interrupt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.VO Plead
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::VO_Plead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "VO Plead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Wake Up
// (BlueprintCallable, BlueprintEvent)

void AWillie_BP_C::Wake_Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Wake Up");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Willie_BP.Willie_BP_C.Weapon HIt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Hit_Component_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Weapon_Velocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit_Result                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// double                                  EdgeAllignment_Dot                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Laser_temp_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AWillie_BP_C::Weapon_HIt(class UPrimitiveComponent* Hit_Component_0, const struct FVector& Weapon_Velocity, const struct FHitResult& Hit_Result, double EdgeAllignment_Dot, bool Laser_temp_, class UClass* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Willie_BP_C", "Weapon HIt");

	Params::Willie_BP_C_Weapon_HIt Parms{};

	Parms.Hit_Component_0 = Hit_Component_0;
	Parms.Weapon_Velocity = std::move(Weapon_Velocity);
	Parms.Hit_Result = std::move(Hit_Result);
	Parms.EdgeAllignment_Dot = EdgeAllignment_Dot;
	Parms.Laser_temp_ = Laser_temp_;
	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}

}

