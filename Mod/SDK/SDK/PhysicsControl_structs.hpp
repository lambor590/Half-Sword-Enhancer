#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum PhysicsControl.EResetToCachedTargetBehavior
// NumValues: 0x0003
enum class EResetToCachedTargetBehavior : uint8
{
	ResetImmediately                         = 0,
	ResetDuringUpdateControls                = 1,
	EResetToCachedTargetBehavior_MAX         = 2,
};

// Enum PhysicsControl.EPhysicsMovementType
// NumValues: 0x0005
enum class EPhysicsMovementType : uint8
{
	Static                                   = 0,
	Kinematic                                = 1,
	Simulated                                = 2,
	Default                                  = 3,
	EPhysicsMovementType_MAX                 = 4,
};

// Enum PhysicsControl.EPhysicsControlType
// NumValues: 0x0003
enum class EPhysicsControlType : uint8
{
	WorldSpace                               = 0,
	ParentSpace                              = 1,
	EPhysicsControlType_MAX                  = 2,
};

// ScriptStruct PhysicsControl.RigidBodyWithControlReference
// 0x0000 (0x0010 - 0x0010)
struct FRigidBodyWithControlReference final : public FAnimNodeReference
{
};
static_assert(alignof(FRigidBodyWithControlReference) == 0x000008, "Wrong alignment on FRigidBodyWithControlReference");
static_assert(sizeof(FRigidBodyWithControlReference) == 0x000010, "Wrong size on FRigidBodyWithControlReference");

// ScriptStruct PhysicsControl.PhysicsControlSetUpdate
// 0x0018 (0x0018 - 0x0000)
struct FPhysicsControlSetUpdate final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Names;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlSetUpdate) == 0x000008, "Wrong alignment on FPhysicsControlSetUpdate");
static_assert(sizeof(FPhysicsControlSetUpdate) == 0x000018, "Wrong size on FPhysicsControlSetUpdate");
static_assert(offsetof(FPhysicsControlSetUpdate, SetName) == 0x000000, "Member 'FPhysicsControlSetUpdate::SetName' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSetUpdate, Names) == 0x000008, "Member 'FPhysicsControlSetUpdate::Names' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSetUpdates
// 0x0020 (0x0020 - 0x0000)
struct FPhysicsControlSetUpdates final
{
public:
	TArray<struct FPhysicsControlSetUpdate>       ControlSetUpdates;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlSetUpdate>       ModifierSetUpdates;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlSetUpdates) == 0x000008, "Wrong alignment on FPhysicsControlSetUpdates");
static_assert(sizeof(FPhysicsControlSetUpdates) == 0x000020, "Wrong size on FPhysicsControlSetUpdates");
static_assert(offsetof(FPhysicsControlSetUpdates, ControlSetUpdates) == 0x000000, "Member 'FPhysicsControlSetUpdates::ControlSetUpdates' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSetUpdates, ModifierSetUpdates) == 0x000010, "Member 'FPhysicsControlSetUpdates::ModifierSetUpdates' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlModifierSparseData
// 0x0010 (0x0010 - 0x0000)
struct FPhysicsControlModifierSparseData final
{
public:
	EPhysicsMovementType                          MovementType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeight;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateKinematicFromSimulation : 1;                // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMovementType : 1;                           // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCollisionType : 1;                          // 0x000C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGravityMultiplier : 1;                      // 0x000C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablePhysicsBlendWeight : 1;                     // 0x000C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebUseSkeletalAnimation : 1;                  // 0x000C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebUpdateKinematicFromSimulation : 1;         // 0x000C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlModifierSparseData) == 0x000004, "Wrong alignment on FPhysicsControlModifierSparseData");
static_assert(sizeof(FPhysicsControlModifierSparseData) == 0x000010, "Wrong size on FPhysicsControlModifierSparseData");
static_assert(offsetof(FPhysicsControlModifierSparseData, MovementType) == 0x000000, "Member 'FPhysicsControlModifierSparseData::MovementType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierSparseData, CollisionType) == 0x000001, "Member 'FPhysicsControlModifierSparseData::CollisionType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierSparseData, GravityMultiplier) == 0x000004, "Member 'FPhysicsControlModifierSparseData::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierSparseData, PhysicsBlendWeight) == 0x000008, "Member 'FPhysicsControlModifierSparseData::PhysicsBlendWeight' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlModifierData
// 0x0010 (0x0010 - 0x0000)
struct FPhysicsControlModifierData final
{
public:
	EPhysicsMovementType                          MovementType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeight;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateKinematicFromSimulation : 1;                // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlModifierData) == 0x000004, "Wrong alignment on FPhysicsControlModifierData");
static_assert(sizeof(FPhysicsControlModifierData) == 0x000010, "Wrong size on FPhysicsControlModifierData");
static_assert(offsetof(FPhysicsControlModifierData, MovementType) == 0x000000, "Member 'FPhysicsControlModifierData::MovementType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierData, CollisionType) == 0x000001, "Member 'FPhysicsControlModifierData::CollisionType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierData, GravityMultiplier) == 0x000004, "Member 'FPhysicsControlModifierData::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierData, PhysicsBlendWeight) == 0x000008, "Member 'FPhysicsControlModifierData::PhysicsBlendWeight' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsBodyModifier
// 0x0018 (0x0018 - 0x0000)
struct FPhysicsBodyModifier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            ModifierData;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsBodyModifier) == 0x000004, "Wrong alignment on FPhysicsBodyModifier");
static_assert(sizeof(FPhysicsBodyModifier) == 0x000018, "Wrong size on FPhysicsBodyModifier");
static_assert(offsetof(FPhysicsBodyModifier, BoneName) == 0x000000, "Member 'FPhysicsBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(FPhysicsBodyModifier, ModifierData) == 0x000008, "Member 'FPhysicsBodyModifier::ModifierData' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsBodyModifierCreationData
// 0x0028 (0x0028 - 0x0000)
struct FPhysicsBodyModifierCreationData final
{
public:
	struct FPhysicsBodyModifier                   Modifier;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Sets;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsBodyModifierCreationData) == 0x000008, "Wrong alignment on FPhysicsBodyModifierCreationData");
static_assert(sizeof(FPhysicsBodyModifierCreationData) == 0x000028, "Wrong size on FPhysicsBodyModifierCreationData");
static_assert(offsetof(FPhysicsBodyModifierCreationData, Modifier) == 0x000000, "Member 'FPhysicsBodyModifierCreationData::Modifier' has a wrong offset!");
static_assert(offsetof(FPhysicsBodyModifierCreationData, Sets) == 0x000018, "Member 'FPhysicsBodyModifierCreationData::Sets' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSparseData
// 0x0050 (0x0050 - 0x0000)
struct FPhysicsControlSparseData final
{
public:
	float                                         LinearStrength;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingRatio;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearExtraDamping;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrength;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatio;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDamping;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetVelocityMultiplier;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTargetVelocityMultiplier;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomControlPoint;                                // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomControlPoint : 1;                        // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableCollision : 1;                             // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyControlChildObject : 1;                       // 0x0048(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearStrength : 1;                         // 0x0048(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearDampingRatio : 1;                     // 0x0048(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearExtraDamping : 1;                     // 0x0048(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxForce : 1;                               // 0x0049(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularStrength : 1;                        // 0x0049(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularDampingRatio : 1;                    // 0x0049(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularExtraDamping : 1;                    // 0x0049(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxTorque : 1;                              // 0x0049(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearTargetVelocityMultiplier : 1;         // 0x0049(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularTargetVelocityMultiplier : 1;        // 0x0049(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableSkeletalAnimationVelocityMultiplier : 1;    // 0x0049(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCustomControlPoint : 1;                     // 0x004A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebEnabled : 1;                               // 0x004A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebUseCustomControlPoint : 1;                 // 0x004A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebUseSkeletalAnimation : 1;                  // 0x004A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebDisableCollision : 1;                      // 0x004A(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebOnlyControlChildObject : 1;                // 0x004A(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlSparseData) == 0x000008, "Wrong alignment on FPhysicsControlSparseData");
static_assert(sizeof(FPhysicsControlSparseData) == 0x000050, "Wrong size on FPhysicsControlSparseData");
static_assert(offsetof(FPhysicsControlSparseData, LinearStrength) == 0x000000, "Member 'FPhysicsControlSparseData::LinearStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearDampingRatio) == 0x000004, "Member 'FPhysicsControlSparseData::LinearDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearExtraDamping) == 0x000008, "Member 'FPhysicsControlSparseData::LinearExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, MaxForce) == 0x00000C, "Member 'FPhysicsControlSparseData::MaxForce' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularStrength) == 0x000010, "Member 'FPhysicsControlSparseData::AngularStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularDampingRatio) == 0x000014, "Member 'FPhysicsControlSparseData::AngularDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularExtraDamping) == 0x000018, "Member 'FPhysicsControlSparseData::AngularExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, MaxTorque) == 0x00001C, "Member 'FPhysicsControlSparseData::MaxTorque' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearTargetVelocityMultiplier) == 0x000020, "Member 'FPhysicsControlSparseData::LinearTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularTargetVelocityMultiplier) == 0x000024, "Member 'FPhysicsControlSparseData::AngularTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, SkeletalAnimationVelocityMultiplier) == 0x000028, "Member 'FPhysicsControlSparseData::SkeletalAnimationVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, CustomControlPoint) == 0x000030, "Member 'FPhysicsControlSparseData::CustomControlPoint' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlData
// 0x0050 (0x0050 - 0x0000)
struct FPhysicsControlData final
{
public:
	float                                         LinearStrength;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingRatio;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearExtraDamping;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrength;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatio;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDamping;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetVelocityMultiplier;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTargetVelocityMultiplier;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomControlPoint;                                // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomControlPoint : 1;                        // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableCollision : 1;                             // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyControlChildObject : 1;                       // 0x0048(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlData) == 0x000008, "Wrong alignment on FPhysicsControlData");
static_assert(sizeof(FPhysicsControlData) == 0x000050, "Wrong size on FPhysicsControlData");
static_assert(offsetof(FPhysicsControlData, LinearStrength) == 0x000000, "Member 'FPhysicsControlData::LinearStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearDampingRatio) == 0x000004, "Member 'FPhysicsControlData::LinearDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearExtraDamping) == 0x000008, "Member 'FPhysicsControlData::LinearExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, MaxForce) == 0x00000C, "Member 'FPhysicsControlData::MaxForce' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularStrength) == 0x000010, "Member 'FPhysicsControlData::AngularStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularDampingRatio) == 0x000014, "Member 'FPhysicsControlData::AngularDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularExtraDamping) == 0x000018, "Member 'FPhysicsControlData::AngularExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, MaxTorque) == 0x00001C, "Member 'FPhysicsControlData::MaxTorque' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearTargetVelocityMultiplier) == 0x000020, "Member 'FPhysicsControlData::LinearTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularTargetVelocityMultiplier) == 0x000024, "Member 'FPhysicsControlData::AngularTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, SkeletalAnimationVelocityMultiplier) == 0x000028, "Member 'FPhysicsControlData::SkeletalAnimationVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, CustomControlPoint) == 0x000030, "Member 'FPhysicsControlData::CustomControlPoint' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSparseMultiplier
// 0x0078 (0x0078 - 0x0000)
struct FPhysicsControlSparseMultiplier final
{
public:
	struct FVector                                LinearStrengthMultiplier;                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearDampingRatioMultiplier;                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearExtraDampingMultiplier;                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxForceMultiplier;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrengthMultiplier;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatioMultiplier;                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDampingMultiplier;                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorqueMultiplier;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLinearStrengthMultiplier : 1;               // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearDampingRatioMultiplier : 1;           // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearExtraDampingMultiplier : 1;           // 0x0070(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxForceMultiplier : 1;                     // 0x0070(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularStrengthMultiplier : 1;              // 0x0070(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularDampingRatioMultiplier : 1;          // 0x0070(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularExtraDampingMultiplier : 1;          // 0x0070(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxTorqueMultiplier : 1;                    // 0x0070(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlSparseMultiplier) == 0x000008, "Wrong alignment on FPhysicsControlSparseMultiplier");
static_assert(sizeof(FPhysicsControlSparseMultiplier) == 0x000078, "Wrong size on FPhysicsControlSparseMultiplier");
static_assert(offsetof(FPhysicsControlSparseMultiplier, LinearStrengthMultiplier) == 0x000000, "Member 'FPhysicsControlSparseMultiplier::LinearStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, LinearDampingRatioMultiplier) == 0x000018, "Member 'FPhysicsControlSparseMultiplier::LinearDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, LinearExtraDampingMultiplier) == 0x000030, "Member 'FPhysicsControlSparseMultiplier::LinearExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, MaxForceMultiplier) == 0x000048, "Member 'FPhysicsControlSparseMultiplier::MaxForceMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, AngularStrengthMultiplier) == 0x000060, "Member 'FPhysicsControlSparseMultiplier::AngularStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, AngularDampingRatioMultiplier) == 0x000064, "Member 'FPhysicsControlSparseMultiplier::AngularDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, AngularExtraDampingMultiplier) == 0x000068, "Member 'FPhysicsControlSparseMultiplier::AngularExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseMultiplier, MaxTorqueMultiplier) == 0x00006C, "Member 'FPhysicsControlSparseMultiplier::MaxTorqueMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlMultiplier
// 0x0070 (0x0070 - 0x0000)
struct FPhysicsControlMultiplier final
{
public:
	struct FVector                                LinearStrengthMultiplier;                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearDampingRatioMultiplier;                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearExtraDampingMultiplier;                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxForceMultiplier;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrengthMultiplier;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatioMultiplier;                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDampingMultiplier;                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorqueMultiplier;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlMultiplier) == 0x000008, "Wrong alignment on FPhysicsControlMultiplier");
static_assert(sizeof(FPhysicsControlMultiplier) == 0x000070, "Wrong size on FPhysicsControlMultiplier");
static_assert(offsetof(FPhysicsControlMultiplier, LinearStrengthMultiplier) == 0x000000, "Member 'FPhysicsControlMultiplier::LinearStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, LinearDampingRatioMultiplier) == 0x000018, "Member 'FPhysicsControlMultiplier::LinearDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, LinearExtraDampingMultiplier) == 0x000030, "Member 'FPhysicsControlMultiplier::LinearExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, MaxForceMultiplier) == 0x000048, "Member 'FPhysicsControlMultiplier::MaxForceMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularStrengthMultiplier) == 0x000060, "Member 'FPhysicsControlMultiplier::AngularStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularDampingRatioMultiplier) == 0x000064, "Member 'FPhysicsControlMultiplier::AngularDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularExtraDampingMultiplier) == 0x000068, "Member 'FPhysicsControlMultiplier::AngularExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, MaxTorqueMultiplier) == 0x00006C, "Member 'FPhysicsControlMultiplier::MaxTorqueMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlTarget
// 0x0068 (0x0068 - 0x0000)
struct FPhysicsControlTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetVelocity;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetAngularVelocity;                             // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlTarget) == 0x000008, "Wrong alignment on FPhysicsControlTarget");
static_assert(sizeof(FPhysicsControlTarget) == 0x000068, "Wrong size on FPhysicsControlTarget");
static_assert(offsetof(FPhysicsControlTarget, TargetPosition) == 0x000000, "Member 'FPhysicsControlTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetVelocity) == 0x000018, "Member 'FPhysicsControlTarget::TargetVelocity' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetOrientation) == 0x000030, "Member 'FPhysicsControlTarget::TargetOrientation' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetAngularVelocity) == 0x000048, "Member 'FPhysicsControlTarget::TargetAngularVelocity' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, bApplyControlPointToTarget) == 0x000060, "Member 'FPhysicsControlTarget::bApplyControlPointToTarget' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControl
// 0x00D0 (0x00D0 - 0x0000)
struct FPhysicsControl final
{
public:
	class FName                                   ParentBoneName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0060(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControl) == 0x000008, "Wrong alignment on FPhysicsControl");
static_assert(sizeof(FPhysicsControl) == 0x0000D0, "Wrong size on FPhysicsControl");
static_assert(offsetof(FPhysicsControl, ParentBoneName) == 0x000000, "Member 'FPhysicsControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ChildBoneName) == 0x000008, "Member 'FPhysicsControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlData) == 0x000010, "Member 'FPhysicsControl::ControlData' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlMultiplier) == 0x000060, "Member 'FPhysicsControl::ControlMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlCreationData
// 0x00E0 (0x00E0 - 0x0000)
struct FPhysicsControlCreationData final
{
public:
	struct FPhysicsControl                        Control;                                           // 0x0000(0x00D0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Sets;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlCreationData) == 0x000008, "Wrong alignment on FPhysicsControlCreationData");
static_assert(sizeof(FPhysicsControlCreationData) == 0x0000E0, "Wrong size on FPhysicsControlCreationData");
static_assert(offsetof(FPhysicsControlCreationData, Control) == 0x000000, "Member 'FPhysicsControlCreationData::Control' has a wrong offset!");
static_assert(offsetof(FPhysicsControlCreationData, Sets) == 0x0000D0, "Member 'FPhysicsControlCreationData::Sets' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlNamedControlParameters
// 0x0058 (0x0058 - 0x0000)
struct FPhysicsControlNamedControlParameters final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              Data;                                              // 0x0008(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNamedControlParameters) == 0x000008, "Wrong alignment on FPhysicsControlNamedControlParameters");
static_assert(sizeof(FPhysicsControlNamedControlParameters) == 0x000058, "Wrong size on FPhysicsControlNamedControlParameters");
static_assert(offsetof(FPhysicsControlNamedControlParameters, Name) == 0x000000, "Member 'FPhysicsControlNamedControlParameters::Name' has a wrong offset!");
static_assert(offsetof(FPhysicsControlNamedControlParameters, Data) == 0x000008, "Member 'FPhysicsControlNamedControlParameters::Data' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlNamedControlMultiplierParameters
// 0x0080 (0x0080 - 0x0000)
struct FPhysicsControlNamedControlMultiplierParameters final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseMultiplier        Data;                                              // 0x0008(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNamedControlMultiplierParameters) == 0x000008, "Wrong alignment on FPhysicsControlNamedControlMultiplierParameters");
static_assert(sizeof(FPhysicsControlNamedControlMultiplierParameters) == 0x000080, "Wrong size on FPhysicsControlNamedControlMultiplierParameters");
static_assert(offsetof(FPhysicsControlNamedControlMultiplierParameters, Name) == 0x000000, "Member 'FPhysicsControlNamedControlMultiplierParameters::Name' has a wrong offset!");
static_assert(offsetof(FPhysicsControlNamedControlMultiplierParameters, Data) == 0x000008, "Member 'FPhysicsControlNamedControlMultiplierParameters::Data' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlNamedModifierParameters
// 0x0018 (0x0018 - 0x0000)
struct FPhysicsControlNamedModifierParameters final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNamedModifierParameters) == 0x000004, "Wrong alignment on FPhysicsControlNamedModifierParameters");
static_assert(sizeof(FPhysicsControlNamedModifierParameters) == 0x000018, "Wrong size on FPhysicsControlNamedModifierParameters");
static_assert(offsetof(FPhysicsControlNamedModifierParameters, Name) == 0x000000, "Member 'FPhysicsControlNamedModifierParameters::Name' has a wrong offset!");
static_assert(offsetof(FPhysicsControlNamedModifierParameters, Data) == 0x000008, "Member 'FPhysicsControlNamedModifierParameters::Data' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlControlAndModifierParameters
// 0x0030 (0x0030 - 0x0000)
struct FPhysicsControlControlAndModifierParameters final
{
public:
	TArray<struct FPhysicsControlNamedControlParameters> ControlParameters;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedControlMultiplierParameters> ControlMultiplierParameters;                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedModifierParameters> ModifierParameters;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlControlAndModifierParameters) == 0x000008, "Wrong alignment on FPhysicsControlControlAndModifierParameters");
static_assert(sizeof(FPhysicsControlControlAndModifierParameters) == 0x000030, "Wrong size on FPhysicsControlControlAndModifierParameters");
static_assert(offsetof(FPhysicsControlControlAndModifierParameters, ControlParameters) == 0x000000, "Member 'FPhysicsControlControlAndModifierParameters::ControlParameters' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierParameters, ControlMultiplierParameters) == 0x000010, "Member 'FPhysicsControlControlAndModifierParameters::ControlMultiplierParameters' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierParameters, ModifierParameters) == 0x000020, "Member 'FPhysicsControlControlAndModifierParameters::ModifierParameters' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlControlAndModifierUpdates
// 0x0030 (0x0030 - 0x0000)
struct FPhysicsControlControlAndModifierUpdates final
{
public:
	TArray<struct FPhysicsControlNamedControlParameters> ControlUpdates;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedControlMultiplierParameters> ControlMultiplierUpdates;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedModifierParameters> ModifierUpdates;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlControlAndModifierUpdates) == 0x000008, "Wrong alignment on FPhysicsControlControlAndModifierUpdates");
static_assert(sizeof(FPhysicsControlControlAndModifierUpdates) == 0x000030, "Wrong size on FPhysicsControlControlAndModifierUpdates");
static_assert(offsetof(FPhysicsControlControlAndModifierUpdates, ControlUpdates) == 0x000000, "Member 'FPhysicsControlControlAndModifierUpdates::ControlUpdates' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierUpdates, ControlMultiplierUpdates) == 0x000010, "Member 'FPhysicsControlControlAndModifierUpdates::ControlMultiplierUpdates' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierUpdates, ModifierUpdates) == 0x000020, "Member 'FPhysicsControlControlAndModifierUpdates::ModifierUpdates' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlAndBodyModifierCreationDatas
// 0x00A0 (0x00A0 - 0x0000)
struct FPhysicsControlAndBodyModifierCreationDatas final
{
public:
	TMap<class FName, struct FPhysicsControlCreationData> Controls;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsBodyModifierCreationData> Modifiers;                                         // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlAndBodyModifierCreationDatas) == 0x000008, "Wrong alignment on FPhysicsControlAndBodyModifierCreationDatas");
static_assert(sizeof(FPhysicsControlAndBodyModifierCreationDatas) == 0x0000A0, "Wrong size on FPhysicsControlAndBodyModifierCreationDatas");
static_assert(offsetof(FPhysicsControlAndBodyModifierCreationDatas, Controls) == 0x000000, "Member 'FPhysicsControlAndBodyModifierCreationDatas::Controls' has a wrong offset!");
static_assert(offsetof(FPhysicsControlAndBodyModifierCreationDatas, Modifiers) == 0x000050, "Member 'FPhysicsControlAndBodyModifierCreationDatas::Modifiers' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlLimbSetupData
// 0x0014 (0x0014 - 0x0000)
struct FPhysicsControlLimbSetupData final
{
public:
	class FName                                   LimbName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIncludeParentBone : 1;                            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateWorldSpaceControls : 1;                     // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateParentSpaceControls : 1;                    // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateBodyModifiers : 1;                          // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlLimbSetupData) == 0x000004, "Wrong alignment on FPhysicsControlLimbSetupData");
static_assert(sizeof(FPhysicsControlLimbSetupData) == 0x000014, "Wrong size on FPhysicsControlLimbSetupData");
static_assert(offsetof(FPhysicsControlLimbSetupData, LimbName) == 0x000000, "Member 'FPhysicsControlLimbSetupData::LimbName' has a wrong offset!");
static_assert(offsetof(FPhysicsControlLimbSetupData, StartBone) == 0x000008, "Member 'FPhysicsControlLimbSetupData::StartBone' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlLimbBones
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPhysicsControlLimbBones final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlLimbBones) == 0x000008, "Wrong alignment on FPhysicsControlLimbBones");
static_assert(sizeof(FPhysicsControlLimbBones) == 0x000020, "Wrong size on FPhysicsControlLimbBones");

// ScriptStruct PhysicsControl.PhysicsControlNames
// 0x0010 (0x0010 - 0x0000)
struct FPhysicsControlNames final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNames) == 0x000008, "Wrong alignment on FPhysicsControlNames");
static_assert(sizeof(FPhysicsControlNames) == 0x000010, "Wrong size on FPhysicsControlNames");
static_assert(offsetof(FPhysicsControlNames, Names) == 0x000000, "Member 'FPhysicsControlNames::Names' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlCharacterSetupData
// 0x00C0 (0x00C0 - 0x0000)
struct FPhysicsControlCharacterSetupData final
{
public:
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    DefaultWorldSpaceControlData;                      // 0x0010(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    DefaultParentSpaceControlData;                     // 0x0060(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            DefaultBodyModifierData;                           // 0x00B0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlCharacterSetupData) == 0x000008, "Wrong alignment on FPhysicsControlCharacterSetupData");
static_assert(sizeof(FPhysicsControlCharacterSetupData) == 0x0000C0, "Wrong size on FPhysicsControlCharacterSetupData");
static_assert(offsetof(FPhysicsControlCharacterSetupData, LimbSetupData) == 0x000000, "Member 'FPhysicsControlCharacterSetupData::LimbSetupData' has a wrong offset!");
static_assert(offsetof(FPhysicsControlCharacterSetupData, DefaultWorldSpaceControlData) == 0x000010, "Member 'FPhysicsControlCharacterSetupData::DefaultWorldSpaceControlData' has a wrong offset!");
static_assert(offsetof(FPhysicsControlCharacterSetupData, DefaultParentSpaceControlData) == 0x000060, "Member 'FPhysicsControlCharacterSetupData::DefaultParentSpaceControlData' has a wrong offset!");
static_assert(offsetof(FPhysicsControlCharacterSetupData, DefaultBodyModifierData) == 0x0000B0, "Member 'FPhysicsControlCharacterSetupData::DefaultBodyModifierData' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlTarget
// 0x0030 (0x0030 - 0x0000)
struct FRigidBodyControlTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControlTarget) == 0x000008, "Wrong alignment on FRigidBodyControlTarget");
static_assert(sizeof(FRigidBodyControlTarget) == 0x000030, "Wrong size on FRigidBodyControlTarget");
static_assert(offsetof(FRigidBodyControlTarget, TargetPosition) == 0x000000, "Member 'FRigidBodyControlTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FRigidBodyControlTarget, TargetOrientation) == 0x000018, "Member 'FRigidBodyControlTarget::TargetOrientation' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlTargets
// 0x0050 (0x0050 - 0x0000)
struct FRigidBodyControlTargets final
{
public:
	TMap<class FName, struct FRigidBodyControlTarget> Targets;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControlTargets) == 0x000008, "Wrong alignment on FRigidBodyControlTargets");
static_assert(sizeof(FRigidBodyControlTargets) == 0x000050, "Wrong size on FRigidBodyControlTargets");
static_assert(offsetof(FRigidBodyControlTargets, Targets) == 0x000000, "Member 'FRigidBodyControlTargets::Targets' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyKinematicTarget
// 0x0038 (0x0038 - 0x0000)
struct FRigidBodyKinematicTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigidBodyKinematicTarget) == 0x000008, "Wrong alignment on FRigidBodyKinematicTarget");
static_assert(sizeof(FRigidBodyKinematicTarget) == 0x000038, "Wrong size on FRigidBodyKinematicTarget");
static_assert(offsetof(FRigidBodyKinematicTarget, TargetPosition) == 0x000000, "Member 'FRigidBodyKinematicTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FRigidBodyKinematicTarget, TargetOrientation) == 0x000018, "Member 'FRigidBodyKinematicTarget::TargetOrientation' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyKinematicTargets
// 0x0050 (0x0050 - 0x0000)
struct FRigidBodyKinematicTargets final
{
public:
	TMap<class FName, struct FRigidBodyKinematicTarget> Targets;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyKinematicTargets) == 0x000008, "Wrong alignment on FRigidBodyKinematicTargets");
static_assert(sizeof(FRigidBodyKinematicTargets) == 0x000050, "Wrong size on FRigidBodyKinematicTargets");
static_assert(offsetof(FRigidBodyKinematicTargets, Targets) == 0x000000, "Member 'FRigidBodyKinematicTargets::Targets' has a wrong offset!");

// ScriptStruct PhysicsControl.AnimNode_RigidBodyWithControl
// 0x0D98 (0x0E60 - 0x00C8)
struct alignas(0x10) FAnimNode_RigidBodyWithControl final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultToSkeletalMeshPhysicsAsset;                // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x137];                                     // 0x00D1(0x0137)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x0208(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0220(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0238(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0250(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0268(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimSpaceSettings                      SimSpaceSettings;                                  // 0x0280(0x0060)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedBoundsScale;                                 // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCacheEveryFrame;                            // 0x02E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BaseBoneRef;                                       // 0x02E8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulationSpace                              SimulationSpace;                                   // 0x02F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCalculateVelocitiesForWorldGeometry : 1;          // 0x02FA(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceDisableCollisionBetweenConstraintBodies : 1; // 0x02FA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseExternalClothCollision : 1;                    // 0x02FA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMakeKinematicConstraints : 1;                     // 0x02FA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_2FA_4 : 4;                                  // 0x02FA(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_2FB[0x1];                                      // 0x02FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableWorldGeometry : 1;                          // 0x02FC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideWorldGravity : 1;                         // 0x02FC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransferBoneVelocities : 1;                       // 0x02FC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFreezeIncomingPoseOnStart : 1;                    // 0x02FC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bModifyConstraintTransformsToMatchSkeleton : 1;    // 0x02FC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldSpaceMinimumScale;                            // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationResetTime;                               // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControls;                                   // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsControlProfileAsset*            PhysicsControlProfileAsset;                        // 0x0310(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                BoneToBodyNameMap;                                 // 0x0318(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlCharacterSetupData      CharacterSetupData;                                // 0x0368(0x00C0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bEnableCharacterSetupData;                         // 0x0428(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlAndBodyModifierCreationDatas AdditionalControlsAndBodyModifiers;                // 0x0430(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlSetUpdates              AdditionalSets;                                    // 0x04D0(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters InitialControlAndBodyModifierUpdates;              // 0x04F0(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters ControlAndModifierParameters;                      // 0x0520(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierUpdates ControlAndModifierUpdates;                         // 0x0550(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodyControlTargets               ControlTargets;                                    // 0x0580(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodyKinematicTargets             KinematicTargets;                                  // 0x05D0(0x0050)(Edit, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          PhysicsAssetAuthoredSkeletalMesh;                  // 0x0620(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConstraintProfile;                                 // 0x0628(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlProfile;                                    // 0x0630(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x1];                                      // 0x0638(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESimulationTiming                             SimulationTiming;                                  // 0x0639(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63A[0x826];                                    // 0x063A(0x0826)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyWithControl) == 0x000010, "Wrong alignment on FAnimNode_RigidBodyWithControl");
static_assert(sizeof(FAnimNode_RigidBodyWithControl) == 0x000E60, "Wrong size on FAnimNode_RigidBodyWithControl");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverridePhysicsAsset) == 0x0000C8, "Member 'FAnimNode_RigidBodyWithControl::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bDefaultToSkeletalMeshPhysicsAsset) == 0x0000D0, "Member 'FAnimNode_RigidBodyWithControl::bDefaultToSkeletalMeshPhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverrideWorldGravity) == 0x000208, "Member 'FAnimNode_RigidBodyWithControl::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ExternalForce) == 0x000220, "Member 'FAnimNode_RigidBodyWithControl::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentLinearAccScale) == 0x000238, "Member 'FAnimNode_RigidBodyWithControl::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentLinearVelScale) == 0x000250, "Member 'FAnimNode_RigidBodyWithControl::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentAppliedLinearAccClamp) == 0x000268, "Member 'FAnimNode_RigidBodyWithControl::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimSpaceSettings) == 0x000280, "Member 'FAnimNode_RigidBodyWithControl::SimSpaceSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, CachedBoundsScale) == 0x0002E0, "Member 'FAnimNode_RigidBodyWithControl::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bUpdateCacheEveryFrame) == 0x0002E4, "Member 'FAnimNode_RigidBodyWithControl::bUpdateCacheEveryFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, BaseBoneRef) == 0x0002E8, "Member 'FAnimNode_RigidBodyWithControl::BaseBoneRef' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverlapChannel) == 0x0002F8, "Member 'FAnimNode_RigidBodyWithControl::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimulationSpace) == 0x0002F9, "Member 'FAnimNode_RigidBodyWithControl::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, WorldSpaceMinimumScale) == 0x000300, "Member 'FAnimNode_RigidBodyWithControl::WorldSpaceMinimumScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, EvaluationResetTime) == 0x000304, "Member 'FAnimNode_RigidBodyWithControl::EvaluationResetTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bEnableControls) == 0x000308, "Member 'FAnimNode_RigidBodyWithControl::bEnableControls' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, PhysicsControlProfileAsset) == 0x000310, "Member 'FAnimNode_RigidBodyWithControl::PhysicsControlProfileAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, BoneToBodyNameMap) == 0x000318, "Member 'FAnimNode_RigidBodyWithControl::BoneToBodyNameMap' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, CharacterSetupData) == 0x000368, "Member 'FAnimNode_RigidBodyWithControl::CharacterSetupData' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bEnableCharacterSetupData) == 0x000428, "Member 'FAnimNode_RigidBodyWithControl::bEnableCharacterSetupData' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, AdditionalControlsAndBodyModifiers) == 0x000430, "Member 'FAnimNode_RigidBodyWithControl::AdditionalControlsAndBodyModifiers' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, AdditionalSets) == 0x0004D0, "Member 'FAnimNode_RigidBodyWithControl::AdditionalSets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, InitialControlAndBodyModifierUpdates) == 0x0004F0, "Member 'FAnimNode_RigidBodyWithControl::InitialControlAndBodyModifierUpdates' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlAndModifierParameters) == 0x000520, "Member 'FAnimNode_RigidBodyWithControl::ControlAndModifierParameters' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlAndModifierUpdates) == 0x000550, "Member 'FAnimNode_RigidBodyWithControl::ControlAndModifierUpdates' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlTargets) == 0x000580, "Member 'FAnimNode_RigidBodyWithControl::ControlTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, KinematicTargets) == 0x0005D0, "Member 'FAnimNode_RigidBodyWithControl::KinematicTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, PhysicsAssetAuthoredSkeletalMesh) == 0x000620, "Member 'FAnimNode_RigidBodyWithControl::PhysicsAssetAuthoredSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ConstraintProfile) == 0x000628, "Member 'FAnimNode_RigidBodyWithControl::ConstraintProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlProfile) == 0x000630, "Member 'FAnimNode_RigidBodyWithControl::ControlProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimulationTiming) == 0x000639, "Member 'FAnimNode_RigidBodyWithControl::SimulationTiming' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialPhysicsControl
// 0x0158 (0x0158 - 0x0000)
struct FInitialPhysicsControl final
{
public:
	TWeakObjectPtr<class AActor>                  ParentActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentMeshComponentName;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ChildActor;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildMeshComponentName;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0030(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0080(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x00F0(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInitialPhysicsControl) == 0x000008, "Wrong alignment on FInitialPhysicsControl");
static_assert(sizeof(FInitialPhysicsControl) == 0x000158, "Wrong size on FInitialPhysicsControl");
static_assert(offsetof(FInitialPhysicsControl, ParentActor) == 0x000000, "Member 'FInitialPhysicsControl::ParentActor' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ParentMeshComponentName) == 0x000008, "Member 'FInitialPhysicsControl::ParentMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ParentBoneName) == 0x000010, "Member 'FInitialPhysicsControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildActor) == 0x000018, "Member 'FInitialPhysicsControl::ChildActor' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildMeshComponentName) == 0x000020, "Member 'FInitialPhysicsControl::ChildMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildBoneName) == 0x000028, "Member 'FInitialPhysicsControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlData) == 0x000030, "Member 'FInitialPhysicsControl::ControlData' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlMultiplier) == 0x000080, "Member 'FInitialPhysicsControl::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlTarget) == 0x0000F0, "Member 'FInitialPhysicsControl::ControlTarget' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialBodyModifier
// 0x0058 (0x0058 - 0x0000)
struct FInitialBodyModifier final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshComponentName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                KinematicTargetPosition;                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               KinematicTargetOrientation;                        // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInitialBodyModifier) == 0x000008, "Wrong alignment on FInitialBodyModifier");
static_assert(sizeof(FInitialBodyModifier) == 0x000058, "Wrong size on FInitialBodyModifier");
static_assert(offsetof(FInitialBodyModifier, Actor) == 0x000000, "Member 'FInitialBodyModifier::Actor' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, MeshComponentName) == 0x000008, "Member 'FInitialBodyModifier::MeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, BoneName) == 0x000010, "Member 'FInitialBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, BodyModifierData) == 0x000018, "Member 'FInitialBodyModifier::BodyModifierData' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, KinematicTargetPosition) == 0x000028, "Member 'FInitialBodyModifier::KinematicTargetPosition' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, KinematicTargetOrientation) == 0x000040, "Member 'FInitialBodyModifier::KinematicTargetOrientation' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialCharacterControls
// 0x00D0 (0x00D0 - 0x0000)
struct FInitialCharacterControls final
{
public:
	TWeakObjectPtr<class AActor>                  CharacterActor;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkeletalMeshComponentName;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    WorldSpaceControlData;                             // 0x0020(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ParentSpaceControlData;                            // 0x0070(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInitialCharacterControls) == 0x000008, "Wrong alignment on FInitialCharacterControls");
static_assert(sizeof(FInitialCharacterControls) == 0x0000D0, "Wrong size on FInitialCharacterControls");
static_assert(offsetof(FInitialCharacterControls, CharacterActor) == 0x000000, "Member 'FInitialCharacterControls::CharacterActor' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, SkeletalMeshComponentName) == 0x000008, "Member 'FInitialCharacterControls::SkeletalMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, LimbSetupData) == 0x000010, "Member 'FInitialCharacterControls::LimbSetupData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, WorldSpaceControlData) == 0x000020, "Member 'FInitialCharacterControls::WorldSpaceControlData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, ParentSpaceControlData) == 0x000070, "Member 'FInitialCharacterControls::ParentSpaceControlData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, BodyModifierData) == 0x0000C0, "Member 'FInitialCharacterControls::BodyModifierData' has a wrong offset!");

}

