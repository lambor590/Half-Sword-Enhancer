#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RVPDPRapidJson

#include "Basic.hpp"

#include "RVPDPRapidJson_classes.hpp"
#include "RVPDPRapidJson_parameters.hpp"


namespace SDK
{

// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URVPDPRapidJsonFunctionLibrary::DeserializeBool_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeBool_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeBool_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeBoolArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<bool>                            DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeBoolArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<bool>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeBoolArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeBoolArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeColorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeColorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<struct FColor>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeColorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeColorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFColor_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor URVPDPRapidJsonFunctionLibrary::DeserializeFColor_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFColor_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFColor_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFloat_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URVPDPRapidJsonFunctionLibrary::DeserializeFloat_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFloat_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFloat_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeFloatArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeFloatArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<float>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeFloatArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeFloatArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFName_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URVPDPRapidJsonFunctionLibrary::DeserializeFName_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFName_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFName_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFRotator_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator URVPDPRapidJsonFunctionLibrary::DeserializeFRotator_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFRotator_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFRotator_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::DeserializeFString_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFString_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFString_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFText_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText URVPDPRapidJsonFunctionLibrary::DeserializeFText_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFText_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFText_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFTransform_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform URVPDPRapidJsonFunctionLibrary::DeserializeFTransform_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFTransform_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFTransform_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeFVector_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URVPDPRapidJsonFunctionLibrary::DeserializeFVector_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeFVector_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeFVector_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeInt32ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeInt32ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<int32>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeInt32ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeInt32ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 URVPDPRapidJsonFunctionLibrary::DeserializeInt64_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeInt64_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeInt64_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeInt64ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int64>                           DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeInt64ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<int64>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeInt64ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeInt64ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URVPDPRapidJsonFunctionLibrary::DeserializeInt_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeInt_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeInt_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeNameArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeNameArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<class FName>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeNameArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeNameArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeRotatorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeRotatorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<struct FRotator>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeRotatorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeRotatorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeStringArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeStringArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<class FString>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeStringArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeStringArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<bool>                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<bool> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayBool_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayBool_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayBool_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFColor_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFColor_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFColor_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFColor_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFloat_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFloat_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFloat_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFloat_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFName_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFName_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFName_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFName_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFRotator_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRotator> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFRotator_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFRotator_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFRotator_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFString_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFString_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFString_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFText_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFText_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFText_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFText_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFTransform_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFTransform_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFTransform_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFTransform_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayFVector_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayFVector_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayFVector_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayFVector_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int64>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int64> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayInt64_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayInt64_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayInt64_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayInt_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayInt_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayInt_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeTArrayUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> URVPDPRapidJsonFunctionLibrary::DeserializeTArrayUInt8_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeTArrayUInt8_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeTArrayUInt8_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeTextArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeTextArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<class FText>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeTextArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeTextArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeTransformArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeTransformArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<struct FTransform>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeTransformArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeTransformArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeserializeUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 URVPDPRapidJsonFunctionLibrary::DeserializeUInt8_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeserializeUInt8_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_DeserializeUInt8_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeUInt8ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeUInt8ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<uint8>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeUInt8ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeUInt8ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.DeSerializeVectorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           StringToDeSerialize                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  DeSerializedResult                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::DeSerializeVectorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& StringToDeSerialize, TArray<struct FVector>* DeSerializedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "DeSerializeVectorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_DeSerializeVectorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.StringToDeSerialize = std::move(StringToDeSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeSerializedResult != nullptr)
		*DeSerializedResult = std::move(Parms.DeSerializedResult);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    BoolValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeBool_Wrapper(bool BoolValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeBool_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeBool_Wrapper Parms{};

	Parms.BoolValue = BoolValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeBoolArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<bool>                            ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeBoolArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<bool>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeBoolArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeBoolArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeColorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeColorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<struct FColor>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeColorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeColorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFColor_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           ColorValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFColor_Wrapper(const struct FColor& ColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFColor_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFColor_Wrapper Parms{};

	Parms.ColorValue = std::move(ColorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFloat_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFloat_Wrapper(float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFloat_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFloat_Wrapper Parms{};

	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFloatArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<float>                           ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeFloatArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<float>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFloatArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFloatArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFName_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             NameValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFName_Wrapper(class FName NameValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFName_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFName_Wrapper Parms{};

	Parms.NameValue = NameValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFRotator_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         RotatorValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFRotator_Wrapper(const struct FRotator& RotatorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFRotator_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFRotator_Wrapper Parms{};

	Parms.RotatorValue = std::move(RotatorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           StringValue                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFString_Wrapper(const class FString& StringValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFString_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFString_Wrapper Parms{};

	Parms.StringValue = std::move(StringValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFText_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FText                             TextValue                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFText_Wrapper(const class FText& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFText_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFText_Wrapper Parms{};

	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFTransform_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       TransformValue                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFTransform_Wrapper(const struct FTransform& TransformValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFTransform_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFTransform_Wrapper Parms{};

	Parms.TransformValue = std::move(TransformValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeFVector_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          VectorValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeFVector_Wrapper(const struct FVector& VectorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeFVector_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeFVector_Wrapper Parms{};

	Parms.VectorValue = std::move(VectorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeInt32ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<int32>                           ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeInt32ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<int32>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeInt32ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeInt32ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Int64Value                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeInt64_Wrapper(int64 Int64Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeInt64_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeInt64_Wrapper Parms{};

	Parms.Int64Value = Int64Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeInt64ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<int64>                           ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeInt64ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<int64>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeInt64ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeInt64ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   IntValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeInt_Wrapper(int32 IntValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeInt_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeInt_Wrapper Parms{};

	Parms.IntValue = IntValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeNameArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeNameArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<class FName>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeNameArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeNameArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeRotatorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeRotatorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<struct FRotator>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeRotatorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeRotatorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeStringArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeStringArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<class FString>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeStringArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeStringArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayBool_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<bool>                            InBools                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayBool_Wrapper(const TArray<bool>& InBools)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayBool_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayBool_Wrapper Parms{};

	Parms.InBools = std::move(InBools);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFColor_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FColor>                   Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFColor_Wrapper(const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFColor_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFColor_Wrapper Parms{};

	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFloat_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           inFloats                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFloat_Wrapper(const TArray<float>& inFloats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFloat_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFloat_Wrapper Parms{};

	Parms.inFloats = std::move(inFloats);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFName_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     InNames                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFName_Wrapper(const TArray<class FName>& InNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFName_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFName_Wrapper Parms{};

	Parms.InNames = std::move(InNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFRotator_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FRotator>                 InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFRotator_Wrapper(const TArray<struct FRotator>& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFRotator_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFRotator_Wrapper Parms{};

	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFString_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InStrings                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFString_Wrapper(const TArray<class FString>& InStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFString_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFString_Wrapper Parms{};

	Parms.InStrings = std::move(InStrings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFText_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FText>                     InTexts                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFText_Wrapper(const TArray<class FText>& InTexts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFText_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFText_Wrapper Parms{};

	Parms.InTexts = std::move(InTexts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFTransform_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FTransform>               InTransform                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFTransform_Wrapper(const TArray<struct FTransform>& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFTransform_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFTransform_Wrapper Parms{};

	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayFVector_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  inFVector                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayFVector_Wrapper(const TArray<struct FVector>& inFVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayFVector_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayFVector_Wrapper Parms{};

	Parms.inFVector = std::move(inFVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayInt64_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int64>                           InInt64s                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayInt64_Wrapper(const TArray<int64>& InInt64s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayInt64_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayInt64_Wrapper Parms{};

	Parms.InInt64s = std::move(InInt64s);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayInt_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           InInts                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayInt_Wrapper(const TArray<int32>& InInts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayInt_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayInt_Wrapper Parms{};

	Parms.InInts = std::move(InInts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTArrayUInt8_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           InUInt8s                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeTArrayUInt8_Wrapper(const TArray<uint8>& InUInt8s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTArrayUInt8_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTArrayUInt8_Wrapper Parms{};

	Parms.InUInt8s = std::move(InUInt8s);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTextArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class FText>                     ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeTextArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<class FText>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTextArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTextArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeTransformArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeTransformArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<struct FTransform>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeTransformArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeTransformArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   UInt8Value                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URVPDPRapidJsonFunctionLibrary::SerializeUInt8_Wrapper(uint8 UInt8Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeUInt8_Wrapper");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeUInt8_Wrapper Parms{};

	Parms.UInt8Value = UInt8Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeUint8ArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<uint8>                           ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeUint8ArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<uint8>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeUint8ArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeUint8ArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}


// Function RVPDPRapidJson.RVPDPRapidJsonFunctionLibrary.SerializeVectorArrayAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ArrayToSerialize                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SerializedString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URVPDPRapidJsonFunctionLibrary::SerializeVectorArrayAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<struct FVector>& ArrayToSerialize, class FString* SerializedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RVPDPRapidJsonFunctionLibrary", "SerializeVectorArrayAsync");

	Params::RVPDPRapidJsonFunctionLibrary_SerializeVectorArrayAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.ArrayToSerialize = std::move(ArrayToSerialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SerializedString != nullptr)
		*SerializedString = std::move(Parms.SerializedString);
}

}

