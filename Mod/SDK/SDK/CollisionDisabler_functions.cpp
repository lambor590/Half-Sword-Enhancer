#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CollisionDisabler

#include "Basic.hpp"

#include "CollisionDisabler_classes.hpp"
#include "CollisionDisabler_parameters.hpp"


namespace SDK
{

// Function CollisionDisabler.CollisionDisablerFunctionLibrary.CancelModifyCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::CancelModifyCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "CancelModifyCollision");

	Params::CollisionDisablerFunctionLibrary_CancelModifyCollision Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToExpiration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::DisableCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB, float TimeToExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "DisableCollision");

	Params::CollisionDisablerFunctionLibrary_DisableCollision Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;
	Parms.TimeToExpiration = TimeToExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SingleBodyVsSingleBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              SingleBodyA                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              SingleBodyB                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToExpiration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::DisableCollision_SingleBodyVsSingleBody(class UPrimitiveComponent* SingleBodyA, class UPrimitiveComponent* SingleBodyB, float TimeToExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "DisableCollision_SingleBodyVsSingleBody");

	Params::CollisionDisablerFunctionLibrary_DisableCollision_SingleBodyVsSingleBody Parms{};

	Parms.SingleBodyA = SingleBodyA;
	Parms.SingleBodyB = SingleBodyB;
	Parms.TimeToExpiration = TimeToExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SkeletalVsSingleBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBones                                      (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              SingleBody                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToExpiration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::DisableCollision_SkeletalVsSingleBody(class USkeletalMeshComponent* SkeletalMesh, const TArray<class FName>& SkeletalMeshBones, class UPrimitiveComponent* SingleBody, float TimeToExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "DisableCollision_SkeletalVsSingleBody");

	Params::CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSingleBody Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.SkeletalMeshBones = std::move(SkeletalMeshBones);
	Parms.SingleBody = SingleBody;
	Parms.TimeToExpiration = TimeToExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.DisableCollision_SkeletalVsSkeletal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshA                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBonesA                                     (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMeshB                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBonesB                                     (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   TimeToExpiration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::DisableCollision_SkeletalVsSkeletal(class USkeletalMeshComponent* SkeletalMeshA, const TArray<class FName>& SkeletalMeshBonesA, class USkeletalMeshComponent* SkeletalMeshB, const TArray<class FName>& SkeletalMeshBonesB, float TimeToExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "DisableCollision_SkeletalVsSkeletal");

	Params::CollisionDisablerFunctionLibrary_DisableCollision_SkeletalVsSkeletal Parms{};

	Parms.SkeletalMeshA = SkeletalMeshA;
	Parms.SkeletalMeshBonesA = std::move(SkeletalMeshBonesA);
	Parms.SkeletalMeshB = SkeletalMeshB;
	Parms.SkeletalMeshBonesB = std::move(SkeletalMeshBonesB);
	Parms.TimeToExpiration = TimeToExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::EnableCollision(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "EnableCollision");

	Params::CollisionDisablerFunctionLibrary_EnableCollision Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SingleBodyVsSingleBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              SingleBodyA                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              SingleBodyB                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::EnableCollision_SingleBodyVsSingleBody(class UPrimitiveComponent* SingleBodyA, class UPrimitiveComponent* SingleBodyB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "EnableCollision_SingleBodyVsSingleBody");

	Params::CollisionDisablerFunctionLibrary_EnableCollision_SingleBodyVsSingleBody Parms{};

	Parms.SingleBodyA = SingleBodyA;
	Parms.SingleBodyB = SingleBodyB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SkeletalVsSingleBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBones                                      (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              SingleBody                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::EnableCollision_SkeletalVsSingleBody(class USkeletalMeshComponent* SkeletalMesh, const TArray<class FName>& SkeletalMeshBones, class UPrimitiveComponent* SingleBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "EnableCollision_SkeletalVsSingleBody");

	Params::CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSingleBody Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.SkeletalMeshBones = std::move(SkeletalMeshBones);
	Parms.SingleBody = SingleBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.EnableCollision_SkeletalVsSkeletal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshA                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBonesA                                     (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMeshB                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkeletalMeshBonesB                                     (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::EnableCollision_SkeletalVsSkeletal(class USkeletalMeshComponent* SkeletalMeshA, const TArray<class FName>& SkeletalMeshBonesA, class USkeletalMeshComponent* SkeletalMeshB, const TArray<class FName>& SkeletalMeshBonesB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "EnableCollision_SkeletalVsSkeletal");

	Params::CollisionDisablerFunctionLibrary_EnableCollision_SkeletalVsSkeletal Parms{};

	Parms.SkeletalMeshA = SkeletalMeshA;
	Parms.SkeletalMeshBonesA = std::move(SkeletalMeshBonesA);
	Parms.SkeletalMeshB = SkeletalMeshB;
	Parms.SkeletalMeshBonesB = std::move(SkeletalMeshBonesB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalBones
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OutBones                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::GatherAllPhysicalBones(class USkeletalMeshComponent* SkeletalMesh, TArray<class FName>* OutBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "GatherAllPhysicalBones");

	Params::CollisionDisablerFunctionLibrary_GatherAllPhysicalBones Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBones != nullptr)
		*OutBones = std::move(Parms.OutBones);
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalBonesFrom
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartBone                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncudeStartBone                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OutBones                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::GatherAllPhysicalBonesFrom(class USkeletalMeshComponent* SkeletalMesh, class FName StartBone, bool bIncudeStartBone, TArray<class FName>* OutBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "GatherAllPhysicalBonesFrom");

	Params::CollisionDisablerFunctionLibrary_GatherAllPhysicalBonesFrom Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.StartBone = StartBone;
	Parms.bIncudeStartBone = bIncudeStartBone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBones != nullptr)
		*OutBones = std::move(Parms.OutBones);
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.GatherAllPhysicalComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>      OutComponents                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::GatherAllPhysicalComponents(class AActor* Actor, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "GatherAllPhysicalComponents");

	Params::CollisionDisablerFunctionLibrary_GatherAllPhysicalComponents Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.IsCollisionDisabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCollisionDisablerFunctionLibrary::IsCollisionDisabled(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "IsCollisionDisabled");

	Params::CollisionDisablerFunctionLibrary_IsCollisionDisabled Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.IsCollisionModified
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCollisionDisablerFunctionLibrary::IsCollisionModified(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "IsCollisionModified");

	Params::CollisionDisablerFunctionLibrary_IsCollisionModified Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CollisionDisabler.CollisionDisablerFunctionLibrary.ModifyCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCollisionParams                 Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentA                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ComponentB                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneNameB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionDisablerFunctionLibrary::ModifyCollision(const struct FCollisionParams& Params_0, class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, class FName BoneNameA, class FName BoneNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollisionDisablerFunctionLibrary", "ModifyCollision");

	Params::CollisionDisablerFunctionLibrary_ModifyCollision Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;
	Parms.BoneNameA = BoneNameA;
	Parms.BoneNameB = BoneNameB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

