#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_WeaponInteraction

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPI_WeaponInteraction.BPI_WeaponInteraction_C.Weapon HIt
// 0x0130 (0x0130 - 0x0000)
struct BPI_WeaponInteraction_C_Weapon_HIt final
{
public:
	class UPrimitiveComponent*                    Hit_Component;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Weapon_Velocity;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_Result;                                        // 0x0020(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        EdgeAllignment_Dot;                                // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Laser_temp_;                                       // 0x0120(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Weapon;                                            // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_WeaponInteraction_C_Weapon_HIt) == 0x000008, "Wrong alignment on BPI_WeaponInteraction_C_Weapon_HIt");
static_assert(sizeof(BPI_WeaponInteraction_C_Weapon_HIt) == 0x000130, "Wrong size on BPI_WeaponInteraction_C_Weapon_HIt");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, Hit_Component) == 0x000000, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::Hit_Component' has a wrong offset!");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, Weapon_Velocity) == 0x000008, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::Weapon_Velocity' has a wrong offset!");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, Hit_Result) == 0x000020, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::Hit_Result' has a wrong offset!");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, EdgeAllignment_Dot) == 0x000118, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::EdgeAllignment_Dot' has a wrong offset!");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, Laser_temp_) == 0x000120, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::Laser_temp_' has a wrong offset!");
static_assert(offsetof(BPI_WeaponInteraction_C_Weapon_HIt, Weapon) == 0x000128, "Member 'BPI_WeaponInteraction_C_Weapon_HIt::Weapon' has a wrong offset!");

}

