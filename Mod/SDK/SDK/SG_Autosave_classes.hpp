#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SG_Autosave

#include "Basic.hpp"

#include "ArmorSlots_Enum_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SG_Autosave.SG_Autosave_C
// 0x0150 (0x0178 - 0x0028)
class USG_Autosave_C final : public USaveGame
{
public:
	TMap<EArmorSlots_Enum, class UClass*>         Armor_Slots;                                       // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Weapon_R;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_L;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_Back;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_L_1;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_L_2;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_R_1;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon_Slot_R_2;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Dismembered_Array;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Head_Health;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Body_Health;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_Health;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_Health;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Neck_Health;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_R_Health;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Leg_L_Health;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bleeding;                                          // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Guts_Spilled;                                      // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, class UMaterialInstanceDynamic*> Armor_Slot_Materials;                              // 0x0108(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Health;                                            // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Score;                                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mouse_Sensitivity;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SG_Autosave_C">();
	}
	static class USG_Autosave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USG_Autosave_C>();
	}
};
static_assert(alignof(USG_Autosave_C) == 0x000008, "Wrong alignment on USG_Autosave_C");
static_assert(sizeof(USG_Autosave_C) == 0x000178, "Wrong size on USG_Autosave_C");
static_assert(offsetof(USG_Autosave_C, Armor_Slots) == 0x000028, "Member 'USG_Autosave_C::Armor_Slots' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_R) == 0x000078, "Member 'USG_Autosave_C::Weapon_R' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_L) == 0x000080, "Member 'USG_Autosave_C::Weapon_L' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_Slot_Back) == 0x000088, "Member 'USG_Autosave_C::Weapon_Slot_Back' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_Slot_L_1) == 0x000090, "Member 'USG_Autosave_C::Weapon_Slot_L_1' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_Slot_L_2) == 0x000098, "Member 'USG_Autosave_C::Weapon_Slot_L_2' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_Slot_R_1) == 0x0000A0, "Member 'USG_Autosave_C::Weapon_Slot_R_1' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Weapon_Slot_R_2) == 0x0000A8, "Member 'USG_Autosave_C::Weapon_Slot_R_2' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Dismembered_Array) == 0x0000B0, "Member 'USG_Autosave_C::Dismembered_Array' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Head_Health) == 0x0000C0, "Member 'USG_Autosave_C::Head_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Body_Health) == 0x0000C8, "Member 'USG_Autosave_C::Body_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Arm_R_Health) == 0x0000D0, "Member 'USG_Autosave_C::Arm_R_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Arm_L_Health) == 0x0000D8, "Member 'USG_Autosave_C::Arm_L_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Neck_Health) == 0x0000E0, "Member 'USG_Autosave_C::Neck_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Leg_R_Health) == 0x0000E8, "Member 'USG_Autosave_C::Leg_R_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Leg_L_Health) == 0x0000F0, "Member 'USG_Autosave_C::Leg_L_Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Bleeding) == 0x0000F8, "Member 'USG_Autosave_C::Bleeding' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Guts_Spilled) == 0x000100, "Member 'USG_Autosave_C::Guts_Spilled' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Armor_Slot_Materials) == 0x000108, "Member 'USG_Autosave_C::Armor_Slot_Materials' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Health) == 0x000158, "Member 'USG_Autosave_C::Health' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Score) == 0x000160, "Member 'USG_Autosave_C::Score' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Mouse_Sensitivity) == 0x000168, "Member 'USG_Autosave_C::Mouse_Sensitivity' has a wrong offset!");
static_assert(offsetof(USG_Autosave_C, Level) == 0x000170, "Member 'USG_Autosave_C::Level' has a wrong offset!");

}

