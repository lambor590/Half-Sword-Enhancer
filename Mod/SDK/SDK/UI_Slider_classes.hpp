#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Slider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Slider.UI_Slider_C
// 0x0178 (0x0458 - 0x02E0)
class UUI_Slider_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                btn_left;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                btn_right;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_ElementsContainer;                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_left_btn;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_right_btn;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Locked;                                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LockImage;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SliderBoxSize;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderName;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderValue;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   SliderTitle;                                       // 0x0340(0x0010)(Edit, BlueprintVisible)
	class FText                                   Unit;                                              // 0x0350(0x0010)(Edit, BlueprintVisible)
	class FText                                   UnitPrefix;                                        // 0x0360(0x0010)(Edit, BlueprintVisible)
	class FText                                   SliderDefaultValueTip;                             // 0x0370(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        DefaultValue;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MinimumValue;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumValue;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepSize;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                MarginSize;                                        // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	double                                        SliderSize;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInteger;                                          // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSliderHandleAndTextColor;                   // 0x03BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSliderHandleAndTextColor;                 // 0x03CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_PhotoMode_C*                        PhotoModeWidgetReference;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double SliderValue, bool bReset)> OnSliderValueChanged;                              // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bShouldFocus;                                      // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSliderBarColor;                             // 0x03FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSliderBarColor;                           // 0x040C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMapMinMax;                                        // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MappedMin;                                         // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MappedMax;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MappedStepSize;                                    // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bUseGrouping;                                      // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumFractionalDigits;                           // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaximumFractionalDigits;                           // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeSliderColorWhenFocused;                     // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangeTextColorWhenFocused;                       // 0x0445(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StepSizeHandler;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIncreaseStepSizeDynamicallyOnHold;                // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__btn_left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__btn_right_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void ChangeValue(double Value, bool bSetFocus, bool bCallDispatcherNotify);
	void ConstantStepSizeIncrease();
	void Construct();
	void EnableDisableWidget(bool bEnable);
	void ExecuteUbergraph_UI_Slider(int32 EntryPoint);
	void FocusThisWidget();
	void FocusWithMouseWheel();
	void getFocusedOrUnfocusedColor(bool bChangeSliderColorWhenFocused_0, bool bChangeTextColorWhenFocused_0, class USlider* Slider_0, class UImage* imgLeftButton, class UImage* imgRightButton, class UWidget* SliderTitle_0, class UWidget* SliderValue_0, bool bSetMargin, struct FSlateBrush* LeftButtonColor, struct FSlateBrush* RightButtonColor);
	struct FSlateBrush getLeftButtonSettings();
	struct FSlateBrush getRightButtonSettings();
	class FText getTxtValue();
	void Initialize(double DefaultValue_0);
	ESlateVisibility LockVisibility();
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void ResetSlider(bool bShouldFocus_0);
	void ResetSliderFocus();
	void SetSliderFocus();
	ESlateVisibility TextValueVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Slider_C">();
	}
	static class UUI_Slider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Slider_C>();
	}
};
static_assert(alignof(UUI_Slider_C) == 0x000008, "Wrong alignment on UUI_Slider_C");
static_assert(sizeof(UUI_Slider_C) == 0x000458, "Wrong size on UUI_Slider_C");
static_assert(offsetof(UUI_Slider_C, UberGraphFrame) == 0x0002E0, "Member 'UUI_Slider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, btn_left) == 0x0002E8, "Member 'UUI_Slider_C::btn_left' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, btn_right) == 0x0002F0, "Member 'UUI_Slider_C::btn_right' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, HorizontalBox_ElementsContainer) == 0x0002F8, "Member 'UUI_Slider_C::HorizontalBox_ElementsContainer' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, img_left_btn) == 0x000300, "Member 'UUI_Slider_C::img_left_btn' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, img_right_btn) == 0x000308, "Member 'UUI_Slider_C::img_right_btn' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, Locked) == 0x000310, "Member 'UUI_Slider_C::Locked' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, LockImage) == 0x000318, "Member 'UUI_Slider_C::LockImage' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, Slider) == 0x000320, "Member 'UUI_Slider_C::Slider' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderBoxSize) == 0x000328, "Member 'UUI_Slider_C::SliderBoxSize' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderName) == 0x000330, "Member 'UUI_Slider_C::SliderName' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderValue) == 0x000338, "Member 'UUI_Slider_C::SliderValue' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderTitle) == 0x000340, "Member 'UUI_Slider_C::SliderTitle' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, Unit) == 0x000350, "Member 'UUI_Slider_C::Unit' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, UnitPrefix) == 0x000360, "Member 'UUI_Slider_C::UnitPrefix' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderDefaultValueTip) == 0x000370, "Member 'UUI_Slider_C::SliderDefaultValueTip' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, DefaultValue) == 0x000380, "Member 'UUI_Slider_C::DefaultValue' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MinimumValue) == 0x000388, "Member 'UUI_Slider_C::MinimumValue' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MaximumValue) == 0x000390, "Member 'UUI_Slider_C::MaximumValue' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, StepSize) == 0x000398, "Member 'UUI_Slider_C::StepSize' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MarginSize) == 0x0003A0, "Member 'UUI_Slider_C::MarginSize' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, SliderSize) == 0x0003B0, "Member 'UUI_Slider_C::SliderSize' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bInteger) == 0x0003B8, "Member 'UUI_Slider_C::bInteger' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, FocusedSliderHandleAndTextColor) == 0x0003BC, "Member 'UUI_Slider_C::FocusedSliderHandleAndTextColor' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, UnfocusedSliderHandleAndTextColor) == 0x0003CC, "Member 'UUI_Slider_C::UnfocusedSliderHandleAndTextColor' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, PhotoModeWidgetReference) == 0x0003E0, "Member 'UUI_Slider_C::PhotoModeWidgetReference' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, OnSliderValueChanged) == 0x0003E8, "Member 'UUI_Slider_C::OnSliderValueChanged' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bShouldFocus) == 0x0003F8, "Member 'UUI_Slider_C::bShouldFocus' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, FocusedSliderBarColor) == 0x0003FC, "Member 'UUI_Slider_C::FocusedSliderBarColor' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, UnfocusedSliderBarColor) == 0x00040C, "Member 'UUI_Slider_C::UnfocusedSliderBarColor' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bMapMinMax) == 0x00041C, "Member 'UUI_Slider_C::bMapMinMax' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MappedMin) == 0x000420, "Member 'UUI_Slider_C::MappedMin' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MappedMax) == 0x000428, "Member 'UUI_Slider_C::MappedMax' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MappedStepSize) == 0x000430, "Member 'UUI_Slider_C::MappedStepSize' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bUseGrouping) == 0x000438, "Member 'UUI_Slider_C::bUseGrouping' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MinimumFractionalDigits) == 0x00043C, "Member 'UUI_Slider_C::MinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, MaximumFractionalDigits) == 0x000440, "Member 'UUI_Slider_C::MaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bChangeSliderColorWhenFocused) == 0x000444, "Member 'UUI_Slider_C::bChangeSliderColorWhenFocused' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bChangeTextColorWhenFocused) == 0x000445, "Member 'UUI_Slider_C::bChangeTextColorWhenFocused' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, StepSizeHandler) == 0x000448, "Member 'UUI_Slider_C::StepSizeHandler' has a wrong offset!");
static_assert(offsetof(UUI_Slider_C, bIncreaseStepSizeDynamicallyOnHold) == 0x000450, "Member 'UUI_Slider_C::bIncreaseStepSizeDynamicallyOnHold' has a wrong offset!");

}

