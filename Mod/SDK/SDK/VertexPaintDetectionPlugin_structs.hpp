#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VertexPaintDetectionPlugin.EPaintWithinAreaShape
// NumValues: 0x0004
enum class EPaintWithinAreaShape : uint8
{
	IsSquareOrRectangleShape                 = 0,
	IsSphereShape                            = 1,
	IsComplexShape                           = 2,
	EPaintWithinAreaShape_MAX                = 3,
};

// Enum VertexPaintDetectionPlugin.EVertexColorChannel
// NumValues: 0x0005
enum class EVertexColorChannel : uint8
{
	RedChannel                               = 0,
	GreenChannel                             = 1,
	BlueChannel                              = 2,
	AlphaChannel                             = 3,
	EVertexColorChannel_MAX                  = 4,
};

// Enum VertexPaintDetectionPlugin.ESurfaceAtChannel
// NumValues: 0x0006
enum class ESurfaceAtChannel : uint8
{
	Default                                  = 0,
	RedChannel                               = 1,
	GreenChannel                             = 2,
	BlueChannel                              = 3,
	AlphaChannel                             = 4,
	ESurfaceAtChannel_MAX                    = 5,
};

// Enum VertexPaintDetectionPlugin.FRVPDPPaintColorSnippetSetting
// NumValues: 0x0003
enum class EFRVPDPPaintColorSnippetSetting : uint8
{
	PaintSingleSnippet                       = 0,
	PaintGroupSnippet                        = 1,
	FRVPDPPaintColorSnippetSetting_MAX       = 2,
};

// Enum VertexPaintDetectionPlugin.EApplyVertexColorSetting
// NumValues: 0x0003
enum class EApplyVertexColorSetting : uint8
{
	EAddVertexColor                          = 0,
	ESetVertexColor                          = 1,
	EApplyVertexColorSetting_MAX             = 2,
};

// Enum VertexPaintDetectionPlugin.FRVPDPStartFallOffDistanceFromSetting
// NumValues: 0x0003
enum class EFRVPDPStartFallOffDistanceFromSetting : uint8
{
	BaseOfPaintShape                         = 0,
	EndOfPaintShape                          = 1,
	FRVPDPStartFallOffDistanceFromSetting_MAX = 2,
};

// Enum VertexPaintDetectionPlugin.EVertexPaintAtLocationFallOffType
// NumValues: 0x0004
enum class EVertexPaintAtLocationFallOffType : uint8
{
	OutwardFallOff                           = 0,
	InwardFallOff                            = 1,
	SphericalFallOff                         = 2,
	EVertexPaintAtLocationFallOffType_MAX    = 3,
};

// Enum VertexPaintDetectionPlugin.EPaintEntireMeshPropogateToLODsMethod
// NumValues: 0x0003
enum class EPaintEntireMeshPropogateToLODsMethod : uint8
{
	ModifiedEngineMethod                     = 0,
	DontPropogateLOD0ToAllLODs               = 1,
	EPaintEntireMeshPropogateToLODsMethod_MAX = 2,
};

// Enum VertexPaintDetectionPlugin.EVertexPaintWithinAreaFallOffType
// NumValues: 0x0004
enum class EVertexPaintWithinAreaFallOffType : uint8
{
	SphericalFromCenter                      = 0,
	GradiantUpward                           = 1,
	GradiantDownward                         = 2,
	EVertexPaintWithinAreaFallOffType_MAX    = 3,
};

// Enum VertexPaintDetectionPlugin.ELoadColorSnippetDataAssetOptions
// NumValues: 0x0003
enum class ELoadColorSnippetDataAssetOptions : uint8
{
	LoadPaintColorSnippetDataAsset           = 0,
	LoadCompareWithColorSnippetDataAsset     = 1,
	ELoadColorSnippetDataAssetOptions_MAX    = 2,
};

// Enum VertexPaintDetectionPlugin.ETVertexPaintThreadPriority
// NumValues: 0x0005
enum class ETVertexPaintThreadPriority : uint8
{
	TimeCritical                             = 0,
	Highest                                  = 1,
	Normal                                   = 2,
	Slowest                                  = 3,
	ETVertexPaintThreadPriority_MAX          = 4,
};

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPhysicsSurfaceDataAtChannelInfo
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPPhysicsSurfaceDataAtChannelInfo final
{
public:
	EPhysicalSurface                              PhysicalSurfaceAtChannel;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtChannel;                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtChannel;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPhysicsSurfaceDataAtChannelInfo) == 0x000008, "Wrong alignment on FRVPDPPhysicsSurfaceDataAtChannelInfo");
static_assert(sizeof(FRVPDPPhysicsSurfaceDataAtChannelInfo) == 0x000020, "Wrong size on FRVPDPPhysicsSurfaceDataAtChannelInfo");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataAtChannelInfo, PhysicalSurfaceAtChannel) == 0x000000, "Member 'FRVPDPPhysicsSurfaceDataAtChannelInfo::PhysicalSurfaceAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataAtChannelInfo, PhysicalSurfaceAsStringAtChannel) == 0x000008, "Member 'FRVPDPPhysicsSurfaceDataAtChannelInfo::PhysicalSurfaceAsStringAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataAtChannelInfo, PhysicalSurfaceValueAtChannel) == 0x000018, "Member 'FRVPDPPhysicsSurfaceDataAtChannelInfo::PhysicalSurfaceValueAtChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAdditionalDataToPassThroughInfo
// 0x0130 (0x0130 - 0x0000)
struct FRVPDPAdditionalDataToPassThroughInfo final
{
public:
	class AActor*                                 PassThrough_Actor1;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PassThrough_Actor2;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PassThrough_PrimitiveComponent1;                   // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PassThrough_PrimitiveComponent2;                   // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassThrough_Bool1;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassThrough_Bool2;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassThrough_Bool3;                                 // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PassThrough_Byte1;                                 // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PassThrough_Byte2;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PassThrough_Float1;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassThrough_Float2;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassThrough_Float3;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassThrough_Float4;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassThrough_Int1;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassThrough_Int2;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector1;                               // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector2;                               // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector3;                               // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector4;                               // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PassThrough_Rotator1;                              // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PassThrough_Rotator2;                              // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PassThrough_String1;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PassThrough_String2;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassThrough_Name1;                                 // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassThrough_Name2;                                 // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PassThrough_PhysicsSurface1;                       // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PassThrough_PhysicsSurface2;                       // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PassThrough_PhysicalMaterial1;                     // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PassThrough_ObjectCollisionChannel;                // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeQuery                              PassThrough_ObjectType;                            // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          PassThrough_RandomStream;                          // 0x0114(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PassThrough_UObject1;                              // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PassThrough_UObject2;                              // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAdditionalDataToPassThroughInfo) == 0x000008, "Wrong alignment on FRVPDPAdditionalDataToPassThroughInfo");
static_assert(sizeof(FRVPDPAdditionalDataToPassThroughInfo) == 0x000130, "Wrong size on FRVPDPAdditionalDataToPassThroughInfo");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Actor1) == 0x000000, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Actor1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Actor2) == 0x000008, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Actor2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_PrimitiveComponent1) == 0x000010, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_PrimitiveComponent1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_PrimitiveComponent2) == 0x000018, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_PrimitiveComponent2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Bool1) == 0x000020, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Bool1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Bool2) == 0x000021, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Bool2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Bool3) == 0x000022, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Bool3' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Byte1) == 0x000023, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Byte1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Byte2) == 0x000024, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Byte2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Float1) == 0x000028, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Float1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Float2) == 0x00002C, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Float2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Float3) == 0x000030, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Float3' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Float4) == 0x000034, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Float4' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Int1) == 0x000038, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Int1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Int2) == 0x00003C, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Int2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Vector1) == 0x000040, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Vector1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Vector2) == 0x000058, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Vector2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Vector3) == 0x000070, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Vector3' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Vector4) == 0x000088, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Vector4' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Rotator1) == 0x0000A0, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Rotator1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Rotator2) == 0x0000B8, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Rotator2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_String1) == 0x0000D0, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_String1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_String2) == 0x0000E0, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_String2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Name1) == 0x0000F0, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Name1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_Name2) == 0x0000F8, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_Name2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_PhysicsSurface1) == 0x000100, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_PhysicsSurface1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_PhysicsSurface2) == 0x000101, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_PhysicsSurface2' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_PhysicalMaterial1) == 0x000108, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_PhysicalMaterial1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_ObjectCollisionChannel) == 0x000110, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_ObjectCollisionChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_ObjectType) == 0x000111, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_ObjectType' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_RandomStream) == 0x000114, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_RandomStream' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_UObject1) == 0x000120, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_UObject1' has a wrong offset!");
static_assert(offsetof(FRVPDPAdditionalDataToPassThroughInfo, PassThrough_UObject2) == 0x000128, "Member 'FRVPDPAdditionalDataToPassThroughInfo::PassThrough_UObject2' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPMostDominantPhysicsSurfaceInfo
// 0x0030 (0x0030 - 0x0000)
struct FRVPDPMostDominantPhysicsSurfaceInfo final
{
public:
	EPhysicalSurface                              MostDominantPhysicsSurface;                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MostDominantPhysicsSurfaceAsString;                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MostDominantPhysicstSurfaceValue;                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESurfaceAtChannel>                     MostDominantPhysicsSurfaceAtVertexColorChannels;   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPMostDominantPhysicsSurfaceInfo) == 0x000008, "Wrong alignment on FRVPDPMostDominantPhysicsSurfaceInfo");
static_assert(sizeof(FRVPDPMostDominantPhysicsSurfaceInfo) == 0x000030, "Wrong size on FRVPDPMostDominantPhysicsSurfaceInfo");
static_assert(offsetof(FRVPDPMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurface) == 0x000000, "Member 'FRVPDPMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurface' has a wrong offset!");
static_assert(offsetof(FRVPDPMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurfaceAsString) == 0x000008, "Member 'FRVPDPMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurfaceAsString' has a wrong offset!");
static_assert(offsetof(FRVPDPMostDominantPhysicsSurfaceInfo, MostDominantPhysicstSurfaceValue) == 0x000018, "Member 'FRVPDPMostDominantPhysicsSurfaceInfo::MostDominantPhysicstSurfaceValue' has a wrong offset!");
static_assert(offsetof(FRVPDPMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurfaceAtVertexColorChannels) == 0x000020, "Member 'FRVPDPMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurfaceAtVertexColorChannels' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSerializedColorsPerLODInfo
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPSerializedColorsPerLODInfo final
{
public:
	int32                                         Lod;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ColorsAtLODAsJSonString;                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSerializedColorsPerLODInfo) == 0x000008, "Wrong alignment on FRVPDPSerializedColorsPerLODInfo");
static_assert(sizeof(FRVPDPSerializedColorsPerLODInfo) == 0x000018, "Wrong size on FRVPDPSerializedColorsPerLODInfo");
static_assert(offsetof(FRVPDPSerializedColorsPerLODInfo, Lod) == 0x000000, "Member 'FRVPDPSerializedColorsPerLODInfo::Lod' has a wrong offset!");
static_assert(offsetof(FRVPDPSerializedColorsPerLODInfo, ColorsAtLODAsJSonString) == 0x000008, "Member 'FRVPDPSerializedColorsPerLODInfo::ColorsAtLODAsJSonString' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectMeshDataPerLODStruct
// 0x0060 (0x0060 - 0x0000)
struct FVertexDetectMeshDataPerLODStruct final
{
public:
	int32                                         Lod;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfVerticesAtLOD;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         MeshVertexColorsPerLODArray;                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRVPDPSerializedColorsPerLODInfo       SerializedVertexColorsData;                        // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        MeshVertexPositionsInComponentSpacePerLODArray;    // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        MeshVertexNormalsPerLODArray;                      // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MeshVertexIndexes;                                 // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectMeshDataPerLODStruct) == 0x000008, "Wrong alignment on FVertexDetectMeshDataPerLODStruct");
static_assert(sizeof(FVertexDetectMeshDataPerLODStruct) == 0x000060, "Wrong size on FVertexDetectMeshDataPerLODStruct");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, Lod) == 0x000000, "Member 'FVertexDetectMeshDataPerLODStruct::Lod' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, AmountOfVerticesAtLOD) == 0x000004, "Member 'FVertexDetectMeshDataPerLODStruct::AmountOfVerticesAtLOD' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexColorsPerLODArray) == 0x000008, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexColorsPerLODArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, SerializedVertexColorsData) == 0x000018, "Member 'FVertexDetectMeshDataPerLODStruct::SerializedVertexColorsData' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexPositionsInComponentSpacePerLODArray) == 0x000030, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexPositionsInComponentSpacePerLODArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexNormalsPerLODArray) == 0x000040, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexNormalsPerLODArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexIndexes) == 0x000050, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexIndexes' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAmountOfColorsOfEachChannelChannelResults
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPAmountOfColorsOfEachChannelChannelResults
{
public:
	float                                         AmountOfVerticesPaintedAtMinAmount;                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentPaintedAtMinAmount;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageColorAmountAtMinAmount;                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPAmountOfColorsOfEachChannelChannelResults) == 0x000004, "Wrong alignment on FRVPDPAmountOfColorsOfEachChannelChannelResults");
static_assert(sizeof(FRVPDPAmountOfColorsOfEachChannelChannelResults) == 0x000010, "Wrong size on FRVPDPAmountOfColorsOfEachChannelChannelResults");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelChannelResults, AmountOfVerticesPaintedAtMinAmount) == 0x000000, "Member 'FRVPDPAmountOfColorsOfEachChannelChannelResults::AmountOfVerticesPaintedAtMinAmount' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelChannelResults, PercentPaintedAtMinAmount) == 0x000004, "Member 'FRVPDPAmountOfColorsOfEachChannelChannelResults::PercentPaintedAtMinAmount' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelChannelResults, AverageColorAmountAtMinAmount) == 0x000008, "Member 'FRVPDPAmountOfColorsOfEachChannelChannelResults::AverageColorAmountAtMinAmount' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAmountOfColorsOfEachChannelPhysicsResults
// 0x0004 (0x0014 - 0x0010)
struct FRVPDPAmountOfColorsOfEachChannelPhysicsResults final : public FRVPDPAmountOfColorsOfEachChannelChannelResults
{
public:
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPAmountOfColorsOfEachChannelPhysicsResults) == 0x000004, "Wrong alignment on FRVPDPAmountOfColorsOfEachChannelPhysicsResults");
static_assert(sizeof(FRVPDPAmountOfColorsOfEachChannelPhysicsResults) == 0x000014, "Wrong size on FRVPDPAmountOfColorsOfEachChannelPhysicsResults");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelPhysicsResults, PhysicsSurface) == 0x000010, "Member 'FRVPDPAmountOfColorsOfEachChannelPhysicsResults::PhysicsSurface' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAmountOfColorsOfEachChannelResults
// 0x0058 (0x0058 - 0x0000)
struct FRVPDPAmountOfColorsOfEachChannelResults final
{
public:
	bool                                          SuccessfullyGotColorChannelResultsAtMinAmount;     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPAmountOfColorsOfEachChannelChannelResults RedChannelResult;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelChannelResults GreenChannelResult;                                // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelChannelResults BlueChannelResult;                                 // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelChannelResults AlphaChannelResult;                                // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SuccessfullyGotPhysicsSurfaceResultsAtMinAmount;   // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPAmountOfColorsOfEachChannelPhysicsResults> PhysicsSurfacesResults;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAmountOfColorsOfEachChannelResults) == 0x000008, "Wrong alignment on FRVPDPAmountOfColorsOfEachChannelResults");
static_assert(sizeof(FRVPDPAmountOfColorsOfEachChannelResults) == 0x000058, "Wrong size on FRVPDPAmountOfColorsOfEachChannelResults");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, SuccessfullyGotColorChannelResultsAtMinAmount) == 0x000000, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::SuccessfullyGotColorChannelResultsAtMinAmount' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, RedChannelResult) == 0x000004, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::RedChannelResult' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, GreenChannelResult) == 0x000014, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::GreenChannelResult' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, BlueChannelResult) == 0x000024, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::BlueChannelResult' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, AlphaChannelResult) == 0x000034, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::AlphaChannelResult' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, SuccessfullyGotPhysicsSurfaceResultsAtMinAmount) == 0x000044, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::SuccessfullyGotPhysicsSurfaceResultsAtMinAmount' has a wrong offset!");
static_assert(offsetof(FRVPDPAmountOfColorsOfEachChannelResults, PhysicsSurfacesResults) == 0x000048, "Member 'FRVPDPAmountOfColorsOfEachChannelResults::PhysicsSurfacesResults' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPWithinAreaResults
// 0x0068 (0x0068 - 0x0000)
struct FRVPDPWithinAreaResults final
{
public:
	TArray<struct FVertexDetectMeshDataPerLODStruct> MeshVertexDataWithinArea;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelResults AmountOfPaintedColorsOfEachChannelWithinArea;      // 0x0010(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPWithinAreaResults) == 0x000008, "Wrong alignment on FRVPDPWithinAreaResults");
static_assert(sizeof(FRVPDPWithinAreaResults) == 0x000068, "Wrong size on FRVPDPWithinAreaResults");
static_assert(offsetof(FRVPDPWithinAreaResults, MeshVertexDataWithinArea) == 0x000000, "Member 'FRVPDPWithinAreaResults::MeshVertexDataWithinArea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaResults, AmountOfPaintedColorsOfEachChannelWithinArea) == 0x000010, "Member 'FRVPDPWithinAreaResults::AmountOfPaintedColorsOfEachChannelWithinArea' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGroupColorSnippetInfo
// 0x0048 (0x0048 - 0x0000)
struct FRVPDPGroupColorSnippetInfo final
{
public:
	class FString                                 GroupSnippetID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset> ColorSnippetDataAssetStoredOn;                     // 0x0010(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AssociatedGroupMeshes;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGroupColorSnippetInfo) == 0x000008, "Wrong alignment on FRVPDPGroupColorSnippetInfo");
static_assert(sizeof(FRVPDPGroupColorSnippetInfo) == 0x000048, "Wrong size on FRVPDPGroupColorSnippetInfo");
static_assert(offsetof(FRVPDPGroupColorSnippetInfo, GroupSnippetID) == 0x000000, "Member 'FRVPDPGroupColorSnippetInfo::GroupSnippetID' has a wrong offset!");
static_assert(offsetof(FRVPDPGroupColorSnippetInfo, ColorSnippetDataAssetStoredOn) == 0x000010, "Member 'FRVPDPGroupColorSnippetInfo::ColorSnippetDataAssetStoredOn' has a wrong offset!");
static_assert(offsetof(FRVPDPGroupColorSnippetInfo, AssociatedGroupMeshes) == 0x000038, "Member 'FRVPDPGroupColorSnippetInfo::AssociatedGroupMeshes' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPhysicsSurfaceDataInfo
// 0x0110 (0x0110 - 0x0000)
struct FRVPDPPhysicsSurfaceDataInfo final
{
public:
	bool                                          PhysicsSurfaceSuccessfullyAcquired;                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPMostDominantPhysicsSurfaceInfo   MostDominantPhysicsSurfaceInfo;                    // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	bool                                          MaterialRegisteredToIncludeDefaultChannel;         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPPhysicsSurfaceDataAtChannelInfo  PhysicsSurface_AtDefault;                          // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPPhysicsSurfaceDataAtChannelInfo  PhysicsSurface_AtRed;                              // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPPhysicsSurfaceDataAtChannelInfo  PhysicsSurface_AtGreen;                            // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPPhysicsSurfaceDataAtChannelInfo  PhysicsSurface_AtBlue;                             // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPPhysicsSurfaceDataAtChannelInfo  PhysicsSurface_AtAlpha;                            // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicalSurfacesAsArray;                           // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         SurfacesAsStringArray;                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 SurfaceValuesArray;                                // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPhysicsSurfaceDataInfo) == 0x000008, "Wrong alignment on FRVPDPPhysicsSurfaceDataInfo");
static_assert(sizeof(FRVPDPPhysicsSurfaceDataInfo) == 0x000110, "Wrong size on FRVPDPPhysicsSurfaceDataInfo");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurfaceSuccessfullyAcquired) == 0x000000, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurfaceSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, MostDominantPhysicsSurfaceInfo) == 0x000008, "Member 'FRVPDPPhysicsSurfaceDataInfo::MostDominantPhysicsSurfaceInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, MaterialRegisteredToIncludeDefaultChannel) == 0x000038, "Member 'FRVPDPPhysicsSurfaceDataInfo::MaterialRegisteredToIncludeDefaultChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurface_AtDefault) == 0x000040, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurface_AtDefault' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurface_AtRed) == 0x000060, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurface_AtRed' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurface_AtGreen) == 0x000080, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurface_AtGreen' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurface_AtBlue) == 0x0000A0, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurface_AtBlue' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicsSurface_AtAlpha) == 0x0000C0, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicsSurface_AtAlpha' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, PhysicalSurfacesAsArray) == 0x0000E0, "Member 'FRVPDPPhysicsSurfaceDataInfo::PhysicalSurfacesAsArray' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, SurfacesAsStringArray) == 0x0000F0, "Member 'FRVPDPPhysicsSurfaceDataInfo::SurfacesAsStringArray' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceDataInfo, SurfaceValuesArray) == 0x000100, "Member 'FRVPDPPhysicsSurfaceDataInfo::SurfaceValuesArray' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPEstimatedColorAtHitLocationInfo
// 0x0140 (0x0140 - 0x0000)
struct FRVPDPEstimatedColorAtHitLocationInfo final
{
public:
	bool                                          EstimatedColorAtHitLocationDataSuccessfullyAcquired; // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EstimatedColorAtHitLocation;                       // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPPhysicsSurfaceDataInfo           PhysicalSurfaceInfo;                               // 0x0018(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                WorldSpaceLocationWeEstimatedTheColorAt;           // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPEstimatedColorAtHitLocationInfo) == 0x000008, "Wrong alignment on FRVPDPEstimatedColorAtHitLocationInfo");
static_assert(sizeof(FRVPDPEstimatedColorAtHitLocationInfo) == 0x000140, "Wrong size on FRVPDPEstimatedColorAtHitLocationInfo");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationInfo, EstimatedColorAtHitLocationDataSuccessfullyAcquired) == 0x000000, "Member 'FRVPDPEstimatedColorAtHitLocationInfo::EstimatedColorAtHitLocationDataSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationInfo, EstimatedColorAtHitLocation) == 0x000004, "Member 'FRVPDPEstimatedColorAtHitLocationInfo::EstimatedColorAtHitLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationInfo, PhysicalSurfaceInfo) == 0x000018, "Member 'FRVPDPEstimatedColorAtHitLocationInfo::PhysicalSurfaceInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationInfo, WorldSpaceLocationWeEstimatedTheColorAt) == 0x000128, "Member 'FRVPDPEstimatedColorAtHitLocationInfo::WorldSpaceLocationWeEstimatedTheColorAt' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClosestVertexPositionInfo
// 0x0030 (0x0030 - 0x0000)
struct FRVPDPClosestVertexPositionInfo final
{
public:
	struct FVector                                ClosestVertexPositionWorld;                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestVertexPositionActorLocal;                   // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClosestVertexPositionInfo) == 0x000008, "Wrong alignment on FRVPDPClosestVertexPositionInfo");
static_assert(sizeof(FRVPDPClosestVertexPositionInfo) == 0x000030, "Wrong size on FRVPDPClosestVertexPositionInfo");
static_assert(offsetof(FRVPDPClosestVertexPositionInfo, ClosestVertexPositionWorld) == 0x000000, "Member 'FRVPDPClosestVertexPositionInfo::ClosestVertexPositionWorld' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexPositionInfo, ClosestVertexPositionActorLocal) == 0x000018, "Member 'FRVPDPClosestVertexPositionInfo::ClosestVertexPositionActorLocal' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClosestVertexNormalInfo
// 0x0030 (0x0030 - 0x0000)
struct FRVPDPClosestVertexNormalInfo final
{
public:
	struct FVector                                ClosestVertexNormal;                               // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestVertexNormalLocal;                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClosestVertexNormalInfo) == 0x000008, "Wrong alignment on FRVPDPClosestVertexNormalInfo");
static_assert(sizeof(FRVPDPClosestVertexNormalInfo) == 0x000030, "Wrong size on FRVPDPClosestVertexNormalInfo");
static_assert(offsetof(FRVPDPClosestVertexNormalInfo, ClosestVertexNormal) == 0x000000, "Member 'FRVPDPClosestVertexNormalInfo::ClosestVertexNormal' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexNormalInfo, ClosestVertexNormalLocal) == 0x000018, "Member 'FRVPDPClosestVertexNormalInfo::ClosestVertexNormalLocal' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClosestVertexInfo
// 0x0090 (0x0090 - 0x0000)
struct FRVPDPClosestVertexInfo final
{
public:
	int32                                         ClosestVertexIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosestSection;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClosestVertexColors;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPClosestVertexPositionInfo        ClosestVertexPositionInfo;                         // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClosestVertexNormalInfo          ClosestVertexNormalInfo;                           // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ClosestVertexMaterial;                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ClosestVertexUVAtEachUVChannel;                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClosestVertexInfo) == 0x000008, "Wrong alignment on FRVPDPClosestVertexInfo");
static_assert(sizeof(FRVPDPClosestVertexInfo) == 0x000090, "Wrong size on FRVPDPClosestVertexInfo");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexIndex) == 0x000000, "Member 'FRVPDPClosestVertexInfo::ClosestVertexIndex' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestSection) == 0x000004, "Member 'FRVPDPClosestVertexInfo::ClosestSection' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexColors) == 0x000008, "Member 'FRVPDPClosestVertexInfo::ClosestVertexColors' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexPositionInfo) == 0x000018, "Member 'FRVPDPClosestVertexInfo::ClosestVertexPositionInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexNormalInfo) == 0x000048, "Member 'FRVPDPClosestVertexInfo::ClosestVertexNormalInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexMaterial) == 0x000078, "Member 'FRVPDPClosestVertexInfo::ClosestVertexMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexInfo, ClosestVertexUVAtEachUVChannel) == 0x000080, "Member 'FRVPDPClosestVertexInfo::ClosestVertexUVAtEachUVChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClosestVertexDataResults
// 0x01A8 (0x01A8 - 0x0000)
struct FRVPDPClosestVertexDataResults final
{
public:
	bool                                          ClosestVertexDataSuccessfullyAcquired;             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClosestVertexInfo                ClosestVertexGeneralInfo;                          // 0x0008(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPPhysicsSurfaceDataInfo           ClosestVertexPhysicalSurfaceInfo;                  // 0x0098(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClosestVertexDataResults) == 0x000008, "Wrong alignment on FRVPDPClosestVertexDataResults");
static_assert(sizeof(FRVPDPClosestVertexDataResults) == 0x0001A8, "Wrong size on FRVPDPClosestVertexDataResults");
static_assert(offsetof(FRVPDPClosestVertexDataResults, ClosestVertexDataSuccessfullyAcquired) == 0x000000, "Member 'FRVPDPClosestVertexDataResults::ClosestVertexDataSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexDataResults, ClosestVertexGeneralInfo) == 0x000008, "Member 'FRVPDPClosestVertexDataResults::ClosestVertexGeneralInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexDataResults, ClosestVertexPhysicalSurfaceInfo) == 0x000098, "Member 'FRVPDPClosestVertexDataResults::ClosestVertexPhysicalSurfaceInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSkeletalMeshBoneVertexInfo
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPSkeletalMeshBoneVertexInfo final
{
public:
	int32                                         BoneFirstVertex;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneFirstSectionVertex;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSkeletalMeshBoneVertexInfo) == 0x000004, "Wrong alignment on FRVPDPSkeletalMeshBoneVertexInfo");
static_assert(sizeof(FRVPDPSkeletalMeshBoneVertexInfo) == 0x000010, "Wrong size on FRVPDPSkeletalMeshBoneVertexInfo");
static_assert(offsetof(FRVPDPSkeletalMeshBoneVertexInfo, BoneFirstVertex) == 0x000000, "Member 'FRVPDPSkeletalMeshBoneVertexInfo::BoneFirstVertex' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshBoneVertexInfo, BoneFirstSectionVertex) == 0x000004, "Member 'FRVPDPSkeletalMeshBoneVertexInfo::BoneFirstSectionVertex' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshBoneVertexInfo, BoneName) == 0x000008, "Member 'FRVPDPSkeletalMeshBoneVertexInfo::BoneName' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSkeletalMeshSectionInfo
// 0x0058 (0x0058 - 0x0000)
struct FRVPDPSkeletalMeshSectionInfo final
{
public:
	int32                                         AtSection;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FRVPDPSkeletalMeshBoneVertexInfo> SkeletalMeshBoneVertexInfo;                        // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSkeletalMeshSectionInfo) == 0x000008, "Wrong alignment on FRVPDPSkeletalMeshSectionInfo");
static_assert(sizeof(FRVPDPSkeletalMeshSectionInfo) == 0x000058, "Wrong size on FRVPDPSkeletalMeshSectionInfo");
static_assert(offsetof(FRVPDPSkeletalMeshSectionInfo, AtSection) == 0x000000, "Member 'FRVPDPSkeletalMeshSectionInfo::AtSection' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshSectionInfo, SkeletalMeshBoneVertexInfo) == 0x000008, "Member 'FRVPDPSkeletalMeshSectionInfo::SkeletalMeshBoneVertexInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsDampingSettings
// 0x0004 (0x0004 - 0x0000)
struct FRVPDPClothPhysicsDampingSettings final
{
public:
	float                                         SetDamping_dampingCoefficient;                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsDampingSettings) == 0x000004, "Wrong alignment on FRVPDPClothPhysicsDampingSettings");
static_assert(sizeof(FRVPDPClothPhysicsDampingSettings) == 0x000004, "Wrong size on FRVPDPClothPhysicsDampingSettings");
static_assert(offsetof(FRVPDPClothPhysicsDampingSettings, SetDamping_dampingCoefficient) == 0x000000, "Member 'FRVPDPClothPhysicsDampingSettings::SetDamping_dampingCoefficient' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsGravitySettings
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPClothPhysicsGravitySettings final
{
public:
	float                                         SetGravity_gravityScale;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetGravity_overrideGravity;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetGravity_gravityOverride;                        // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsGravitySettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsGravitySettings");
static_assert(sizeof(FRVPDPClothPhysicsGravitySettings) == 0x000020, "Wrong size on FRVPDPClothPhysicsGravitySettings");
static_assert(offsetof(FRVPDPClothPhysicsGravitySettings, SetGravity_gravityScale) == 0x000000, "Member 'FRVPDPClothPhysicsGravitySettings::SetGravity_gravityScale' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsGravitySettings, SetGravity_overrideGravity) == 0x000004, "Member 'FRVPDPClothPhysicsGravitySettings::SetGravity_overrideGravity' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsGravitySettings, SetGravity_gravityOverride) == 0x000008, "Member 'FRVPDPClothPhysicsGravitySettings::SetGravity_gravityOverride' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsWindSettings
// 0x0040 (0x0040 - 0x0000)
struct FRVPDPClothPhysicsWindSettings final
{
public:
	struct FVector2D                              SetWind_drag;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SetWind_lift;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetWind_airDensity;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetWind_windVelocity;                              // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsWindSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsWindSettings");
static_assert(sizeof(FRVPDPClothPhysicsWindSettings) == 0x000040, "Wrong size on FRVPDPClothPhysicsWindSettings");
static_assert(offsetof(FRVPDPClothPhysicsWindSettings, SetWind_drag) == 0x000000, "Member 'FRVPDPClothPhysicsWindSettings::SetWind_drag' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsWindSettings, SetWind_lift) == 0x000010, "Member 'FRVPDPClothPhysicsWindSettings::SetWind_lift' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsWindSettings, SetWind_airDensity) == 0x000020, "Member 'FRVPDPClothPhysicsWindSettings::SetWind_airDensity' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsWindSettings, SetWind_windVelocity) == 0x000028, "Member 'FRVPDPClothPhysicsWindSettings::SetWind_windVelocity' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsAnimDriveSettings
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPClothPhysicsAnimDriveSettings final
{
public:
	struct FVector2D                              SetAnimDrive_Stiffness;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SetAnimDrive_Damping;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsAnimDriveSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsAnimDriveSettings");
static_assert(sizeof(FRVPDPClothPhysicsAnimDriveSettings) == 0x000020, "Wrong size on FRVPDPClothPhysicsAnimDriveSettings");
static_assert(offsetof(FRVPDPClothPhysicsAnimDriveSettings, SetAnimDrive_Stiffness) == 0x000000, "Member 'FRVPDPClothPhysicsAnimDriveSettings::SetAnimDrive_Stiffness' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsAnimDriveSettings, SetAnimDrive_Damping) == 0x000010, "Member 'FRVPDPClothPhysicsAnimDriveSettings::SetAnimDrive_Damping' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsCollisionSettings
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPClothPhysicsCollisionSettings final
{
public:
	float                                         SetCollision_CollisionThickness;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetCollision_FrictionCoefficient;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetCollision_UseCCD;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetCollision_SelfCollisionThickness;               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsCollisionSettings) == 0x000004, "Wrong alignment on FRVPDPClothPhysicsCollisionSettings");
static_assert(sizeof(FRVPDPClothPhysicsCollisionSettings) == 0x000010, "Wrong size on FRVPDPClothPhysicsCollisionSettings");
static_assert(offsetof(FRVPDPClothPhysicsCollisionSettings, SetCollision_CollisionThickness) == 0x000000, "Member 'FRVPDPClothPhysicsCollisionSettings::SetCollision_CollisionThickness' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsCollisionSettings, SetCollision_FrictionCoefficient) == 0x000004, "Member 'FRVPDPClothPhysicsCollisionSettings::SetCollision_FrictionCoefficient' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsCollisionSettings, SetCollision_UseCCD) == 0x000008, "Member 'FRVPDPClothPhysicsCollisionSettings::SetCollision_UseCCD' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsCollisionSettings, SetCollision_SelfCollisionThickness) == 0x00000C, "Member 'FRVPDPClothPhysicsCollisionSettings::SetCollision_SelfCollisionThickness' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsLongRangeAttachmentSettings
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPClothPhysicsLongRangeAttachmentSettings final
{
public:
	struct FVector2D                              LongRangeAttachment_TetherThickness;               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LongRangeAttachment_TetherScale;                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsLongRangeAttachmentSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsLongRangeAttachmentSettings");
static_assert(sizeof(FRVPDPClothPhysicsLongRangeAttachmentSettings) == 0x000020, "Wrong size on FRVPDPClothPhysicsLongRangeAttachmentSettings");
static_assert(offsetof(FRVPDPClothPhysicsLongRangeAttachmentSettings, LongRangeAttachment_TetherThickness) == 0x000000, "Member 'FRVPDPClothPhysicsLongRangeAttachmentSettings::LongRangeAttachment_TetherThickness' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsLongRangeAttachmentSettings, LongRangeAttachment_TetherScale) == 0x000010, "Member 'FRVPDPClothPhysicsLongRangeAttachmentSettings::LongRangeAttachment_TetherScale' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsMaterialSettings
// 0x0030 (0x0030 - 0x0000)
struct FRVPDPClothPhysicsMaterialSettings final
{
public:
	struct FVector2D                              Material_EdgeStiffness;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Material_BendingStiffness;                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Material_AreaStiffness;                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsMaterialSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsMaterialSettings");
static_assert(sizeof(FRVPDPClothPhysicsMaterialSettings) == 0x000030, "Wrong size on FRVPDPClothPhysicsMaterialSettings");
static_assert(offsetof(FRVPDPClothPhysicsMaterialSettings, Material_EdgeStiffness) == 0x000000, "Member 'FRVPDPClothPhysicsMaterialSettings::Material_EdgeStiffness' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsMaterialSettings, Material_BendingStiffness) == 0x000010, "Member 'FRVPDPClothPhysicsMaterialSettings::Material_BendingStiffness' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsMaterialSettings, Material_AreaStiffness) == 0x000020, "Member 'FRVPDPClothPhysicsMaterialSettings::Material_AreaStiffness' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsVelocityScaleSettings
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPClothPhysicsVelocityScaleSettings final
{
public:
	struct FVector                                PhysicsVelocityScale_LinearVelocityScale;          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicVelocityScale_AngularVelocityScale;          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsVelocityScale_FictitiousAngularVelocityScale; // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsVelocityScaleSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsVelocityScaleSettings");
static_assert(sizeof(FRVPDPClothPhysicsVelocityScaleSettings) == 0x000020, "Wrong size on FRVPDPClothPhysicsVelocityScaleSettings");
static_assert(offsetof(FRVPDPClothPhysicsVelocityScaleSettings, PhysicsVelocityScale_LinearVelocityScale) == 0x000000, "Member 'FRVPDPClothPhysicsVelocityScaleSettings::PhysicsVelocityScale_LinearVelocityScale' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsVelocityScaleSettings, PhysicVelocityScale_AngularVelocityScale) == 0x000018, "Member 'FRVPDPClothPhysicsVelocityScaleSettings::PhysicVelocityScale_AngularVelocityScale' has a wrong offset!");
static_assert(offsetof(FRVPDPClothPhysicsVelocityScaleSettings, PhysicsVelocityScale_FictitiousAngularVelocityScale) == 0x00001C, "Member 'FRVPDPClothPhysicsVelocityScaleSettings::PhysicsVelocityScale_FictitiousAngularVelocityScale' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClothPhysicsSetAirPressureSettings
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPClothPhysicsSetAirPressureSettings final
{
public:
	struct FVector2D                              SetPressure_Pressure;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClothPhysicsSetAirPressureSettings) == 0x000008, "Wrong alignment on FRVPDPClothPhysicsSetAirPressureSettings");
static_assert(sizeof(FRVPDPClothPhysicsSetAirPressureSettings) == 0x000010, "Wrong size on FRVPDPClothPhysicsSetAirPressureSettings");
static_assert(offsetof(FRVPDPClothPhysicsSetAirPressureSettings, SetPressure_Pressure) == 0x000000, "Member 'FRVPDPClothPhysicsSetAirPressureSettings::SetPressure_Pressure' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPChaosClothPhysicsAtVertexColorChannelSettings
// 0x0260 (0x0260 - 0x0000)
struct FRVPDPChaosClothPhysicsAtVertexColorChannelSettings final
{
public:
	bool                                          SetDamping;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsDampingSettings      ClothDampingSettingsWithNoColorPaintedAtChannel;   // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsDampingSettings      ClothDampingSettingsWithFullColorPaintedAtChannel; // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetGravity;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsGravitySettings      ClothGravitySettingsWithNoColorPaintedAtChannel;   // 0x0010(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsGravitySettings      ClothGravitySettingsWithFullColorPaintedAtChannel; // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetWind;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsWindSettings         ClothWindSettingsWithNoColorPaintedAtChannel;      // 0x0058(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsWindSettings         ClothWindSettingsWithFullColorPaintedAtChannel;    // 0x0098(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAnimDrive;                                      // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsAnimDriveSettings    ClothAnimDriveSettingsWithNoColorPaintedAtChannel; // 0x00E0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsAnimDriveSettings    ClothAnimDriveSettingsWithFullColorPaintedAtChannel; // 0x0100(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetCollision;                                      // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsCollisionSettings    ClothCollisionSettingsWithNoColorPaintedAtChannel; // 0x0124(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsCollisionSettings    ClothCollisionSettingsWithFullColorPaintedAtChannel; // 0x0134(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetLongRangeAttachment;                            // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsLongRangeAttachmentSettings ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel; // 0x0148(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsLongRangeAttachmentSettings ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel; // 0x0168(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetMaterial;                                       // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsMaterialSettings     ClothMaterialSettingsWithNoColorPaintedAtChannel;  // 0x0190(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsMaterialSettings     ClothMaterialSettingsWithFullColorPaintedAtChannel; // 0x01C0(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetPhysicsVelocityScale;                           // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsVelocityScaleSettings ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel; // 0x01F8(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsVelocityScaleSettings ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel; // 0x0218(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAirPressure;                                    // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsSetAirPressureSettings ClothPhysicssAirPressureWithNoColorPaintedAtChannel; // 0x0240(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClothPhysicsSetAirPressureSettings ClothPhysicssAirPressureWithFullColorPaintedAtChannel; // 0x0250(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings) == 0x000008, "Wrong alignment on FRVPDPChaosClothPhysicsAtVertexColorChannelSettings");
static_assert(sizeof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings) == 0x000260, "Wrong size on FRVPDPChaosClothPhysicsAtVertexColorChannelSettings");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetDamping) == 0x000000, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetDamping' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothDampingSettingsWithNoColorPaintedAtChannel) == 0x000004, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothDampingSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothDampingSettingsWithFullColorPaintedAtChannel) == 0x000008, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothDampingSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetGravity) == 0x00000C, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetGravity' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothGravitySettingsWithNoColorPaintedAtChannel) == 0x000010, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothGravitySettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothGravitySettingsWithFullColorPaintedAtChannel) == 0x000030, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothGravitySettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetWind) == 0x000050, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetWind' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothWindSettingsWithNoColorPaintedAtChannel) == 0x000058, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothWindSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothWindSettingsWithFullColorPaintedAtChannel) == 0x000098, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothWindSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetAnimDrive) == 0x0000D8, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetAnimDrive' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothAnimDriveSettingsWithNoColorPaintedAtChannel) == 0x0000E0, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothAnimDriveSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothAnimDriveSettingsWithFullColorPaintedAtChannel) == 0x000100, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothAnimDriveSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetCollision) == 0x000120, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetCollision' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothCollisionSettingsWithNoColorPaintedAtChannel) == 0x000124, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothCollisionSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothCollisionSettingsWithFullColorPaintedAtChannel) == 0x000134, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothCollisionSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetLongRangeAttachment) == 0x000144, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetLongRangeAttachment' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel) == 0x000148, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel) == 0x000168, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetMaterial) == 0x000188, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothMaterialSettingsWithNoColorPaintedAtChannel) == 0x000190, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothMaterialSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothMaterialSettingsWithFullColorPaintedAtChannel) == 0x0001C0, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothMaterialSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetPhysicsVelocityScale) == 0x0001F0, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetPhysicsVelocityScale' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel) == 0x0001F8, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel) == 0x000218, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, SetAirPressure) == 0x000238, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::SetAirPressure' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothPhysicssAirPressureWithNoColorPaintedAtChannel) == 0x000240, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothPhysicssAirPressureWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsAtVertexColorChannelSettings, ClothPhysicssAirPressureWithFullColorPaintedAtChannel) == 0x000250, "Member 'FRVPDPChaosClothPhysicsAtVertexColorChannelSettings::ClothPhysicssAirPressureWithFullColorPaintedAtChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings final
{
public:
	bool                                          IncludeVertexColorChannelResultOfEachChannel;      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludePhysicsSurfaceResultOfEachChannel;          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncludeIfMinColorAmountIs;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      IncludeOnlyIfPhysicsSurfacesIsRegisteredToAnyVertexChannel; // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings) == 0x000008, "Wrong alignment on FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings");
static_assert(sizeof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings) == 0x000018, "Wrong size on FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings");
static_assert(offsetof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings, IncludeVertexColorChannelResultOfEachChannel) == 0x000000, "Member 'FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings::IncludeVertexColorChannelResultOfEachChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings, IncludePhysicsSurfaceResultOfEachChannel) == 0x000001, "Member 'FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings::IncludePhysicsSurfaceResultOfEachChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings, IncludeIfMinColorAmountIs) == 0x000004, "Member 'FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings::IncludeIfMinColorAmountIs' has a wrong offset!");
static_assert(offsetof(FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings, IncludeOnlyIfPhysicsSurfacesIsRegisteredToAnyVertexChannel) == 0x000008, "Member 'FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings::IncludeOnlyIfPhysicsSurfacesIsRegisteredToAnyVertexChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCompareMeshVertexColorsSettings
// 0x0024 (0x0024 - 0x0000)
struct FRVPDPCompareMeshVertexColorsSettings
{
public:
	bool                                          SkipEmptyVertices;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EmptyVertexColor;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComparisonErrorTolerance;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompareRedChannel;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompareGreenChannel;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompareBlueChannel;                                // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompareAlphaChannel;                               // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPCompareMeshVertexColorsSettings) == 0x000004, "Wrong alignment on FRVPDPCompareMeshVertexColorsSettings");
static_assert(sizeof(FRVPDPCompareMeshVertexColorsSettings) == 0x000024, "Wrong size on FRVPDPCompareMeshVertexColorsSettings");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, SkipEmptyVertices) == 0x000000, "Member 'FRVPDPCompareMeshVertexColorsSettings::SkipEmptyVertices' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, EmptyVertexColor) == 0x000004, "Member 'FRVPDPCompareMeshVertexColorsSettings::EmptyVertexColor' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, ComparisonErrorTolerance) == 0x000014, "Member 'FRVPDPCompareMeshVertexColorsSettings::ComparisonErrorTolerance' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, CompareRedChannel) == 0x000018, "Member 'FRVPDPCompareMeshVertexColorsSettings::CompareRedChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, CompareGreenChannel) == 0x000019, "Member 'FRVPDPCompareMeshVertexColorsSettings::CompareGreenChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, CompareBlueChannel) == 0x00001A, "Member 'FRVPDPCompareMeshVertexColorsSettings::CompareBlueChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsSettings, CompareAlphaChannel) == 0x00001B, "Member 'FRVPDPCompareMeshVertexColorsSettings::CompareAlphaChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCompareMeshVertexColorsToColorArraySettings
// 0x0014 (0x0038 - 0x0024)
struct FRVPDPCompareMeshVertexColorsToColorArraySettings final : public FRVPDPCompareMeshVertexColorsSettings
{
public:
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         ColorArrayToCompareWith;                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPCompareMeshVertexColorsToColorArraySettings) == 0x000008, "Wrong alignment on FRVPDPCompareMeshVertexColorsToColorArraySettings");
static_assert(sizeof(FRVPDPCompareMeshVertexColorsToColorArraySettings) == 0x000038, "Wrong size on FRVPDPCompareMeshVertexColorsToColorArraySettings");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorArraySettings, ColorArrayToCompareWith) == 0x000028, "Member 'FRVPDPCompareMeshVertexColorsToColorArraySettings::ColorArrayToCompareWith' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPColorSnippetDataAssetInfo
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPColorSnippetDataAssetInfo final
{
public:
	class FString                                 ColorSnippetID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintColorSnippetDataAsset*      ColorSnippetDataAssetSnippetIsStoredIn;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPColorSnippetDataAssetInfo) == 0x000008, "Wrong alignment on FRVPDPColorSnippetDataAssetInfo");
static_assert(sizeof(FRVPDPColorSnippetDataAssetInfo) == 0x000018, "Wrong size on FRVPDPColorSnippetDataAssetInfo");
static_assert(offsetof(FRVPDPColorSnippetDataAssetInfo, ColorSnippetID) == 0x000000, "Member 'FRVPDPColorSnippetDataAssetInfo::ColorSnippetID' has a wrong offset!");
static_assert(offsetof(FRVPDPColorSnippetDataAssetInfo, ColorSnippetDataAssetSnippetIsStoredIn) == 0x000010, "Member 'FRVPDPColorSnippetDataAssetInfo::ColorSnippetDataAssetSnippetIsStoredIn' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCompareMeshVertexColorsToColorSnippetsSettings
// 0x0024 (0x0048 - 0x0024)
struct FRVPDPCompareMeshVertexColorsToColorSnippetsSettings final : public FRVPDPCompareMeshVertexColorsSettings
{
public:
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CompareWithColorsSnippetTag;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPColorSnippetDataAssetInfo> CompareWithColorsSnippetDataAssetInfo;             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPCompareMeshVertexColorsToColorSnippetsSettings) == 0x000008, "Wrong alignment on FRVPDPCompareMeshVertexColorsToColorSnippetsSettings");
static_assert(sizeof(FRVPDPCompareMeshVertexColorsToColorSnippetsSettings) == 0x000048, "Wrong size on FRVPDPCompareMeshVertexColorsToColorSnippetsSettings");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorSnippetsSettings, CompareWithColorsSnippetTag) == 0x000028, "Member 'FRVPDPCompareMeshVertexColorsToColorSnippetsSettings::CompareWithColorsSnippetTag' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorSnippetsSettings, CompareWithColorsSnippetDataAssetInfo) == 0x000038, "Member 'FRVPDPCompareMeshVertexColorsToColorSnippetsSettings::CompareWithColorsSnippetDataAssetInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCallbackFromSpecifiedMeshComponentsInfo
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPCallbackFromSpecifiedMeshComponentsInfo final
{
public:
	TArray<class UObject*>                        RunCallbacksOnObjects;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPCallbackFromSpecifiedMeshComponentsInfo) == 0x000008, "Wrong alignment on FRVPDPCallbackFromSpecifiedMeshComponentsInfo");
static_assert(sizeof(FRVPDPCallbackFromSpecifiedMeshComponentsInfo) == 0x000010, "Wrong size on FRVPDPCallbackFromSpecifiedMeshComponentsInfo");
static_assert(offsetof(FRVPDPCallbackFromSpecifiedMeshComponentsInfo, RunCallbacksOnObjects) == 0x000000, "Member 'FRVPDPCallbackFromSpecifiedMeshComponentsInfo::RunCallbacksOnObjects' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTaskCallbackSettings
// 0x00C8 (0x00C8 - 0x0000)
struct FRVPDPTaskCallbackSettings final
{
public:
	bool                                          RunCallbackDelegate;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunCallbackInterfacesOnObject;                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ObjectToRunInterfacesOn;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunCallbackInterfacesOnObjectComponents;           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexDataOnlyForLOD0;                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeColorsOfEachBone;                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings IncludeAmountOfPaintedColorsOfEachChannel;         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPCompareMeshVertexColorsToColorArraySettings CompareMeshVertexColorsToColorArray;               // 0x0030(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPCompareMeshVertexColorsToColorSnippetsSettings CompareMeshVertexColorsToColorSnippets;            // 0x0068(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexColorData;                            // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSerializedVertexColorData;                  // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexPositionData;                         // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexNormalData;                           // 0x00B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexIndexes;                              // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPCallbackFromSpecifiedMeshComponentsInfo CallbacksOnObjectsForMeshComponent;                // 0x00B8(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPTaskCallbackSettings) == 0x000008, "Wrong alignment on FRVPDPTaskCallbackSettings");
static_assert(sizeof(FRVPDPTaskCallbackSettings) == 0x0000C8, "Wrong size on FRVPDPTaskCallbackSettings");
static_assert(offsetof(FRVPDPTaskCallbackSettings, RunCallbackDelegate) == 0x000000, "Member 'FRVPDPTaskCallbackSettings::RunCallbackDelegate' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, RunCallbackInterfacesOnObject) == 0x000001, "Member 'FRVPDPTaskCallbackSettings::RunCallbackInterfacesOnObject' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, ObjectToRunInterfacesOn) == 0x000008, "Member 'FRVPDPTaskCallbackSettings::ObjectToRunInterfacesOn' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, RunCallbackInterfacesOnObjectComponents) == 0x000010, "Member 'FRVPDPTaskCallbackSettings::RunCallbackInterfacesOnObjectComponents' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeVertexDataOnlyForLOD0) == 0x000011, "Member 'FRVPDPTaskCallbackSettings::IncludeVertexDataOnlyForLOD0' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeColorsOfEachBone) == 0x000012, "Member 'FRVPDPTaskCallbackSettings::IncludeColorsOfEachBone' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeAmountOfPaintedColorsOfEachChannel) == 0x000018, "Member 'FRVPDPTaskCallbackSettings::IncludeAmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, CompareMeshVertexColorsToColorArray) == 0x000030, "Member 'FRVPDPTaskCallbackSettings::CompareMeshVertexColorsToColorArray' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, CompareMeshVertexColorsToColorSnippets) == 0x000068, "Member 'FRVPDPTaskCallbackSettings::CompareMeshVertexColorsToColorSnippets' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeVertexColorData) == 0x0000B0, "Member 'FRVPDPTaskCallbackSettings::IncludeVertexColorData' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeSerializedVertexColorData) == 0x0000B1, "Member 'FRVPDPTaskCallbackSettings::IncludeSerializedVertexColorData' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeVertexPositionData) == 0x0000B2, "Member 'FRVPDPTaskCallbackSettings::IncludeVertexPositionData' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeVertexNormalData) == 0x0000B3, "Member 'FRVPDPTaskCallbackSettings::IncludeVertexNormalData' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, IncludeVertexIndexes) == 0x0000B4, "Member 'FRVPDPTaskCallbackSettings::IncludeVertexIndexes' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskCallbackSettings, CallbacksOnObjectsForMeshComponent) == 0x0000B8, "Member 'FRVPDPTaskCallbackSettings::CallbacksOnObjectsForMeshComponent' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPMultiThreadSettings
// 0x0001 (0x0001 - 0x0000)
struct FRVPDPMultiThreadSettings final
{
public:
	bool                                          UseMultithreadingForCalculations;                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPMultiThreadSettings) == 0x000001, "Wrong alignment on FRVPDPMultiThreadSettings");
static_assert(sizeof(FRVPDPMultiThreadSettings) == 0x000001, "Wrong size on FRVPDPMultiThreadSettings");
static_assert(offsetof(FRVPDPMultiThreadSettings, UseMultithreadingForCalculations) == 0x000000, "Member 'FRVPDPMultiThreadSettings::UseMultithreadingForCalculations' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGameThreadSpecificDebugSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPGameThreadSpecificDebugSettings final
{
public:
	bool                                          DrawVertexPositionDebugPoint;                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawVertexPositionDebugPointIfGotPaintApplied;     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawClothVertexPositionDebugPoint;                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawVertexNormalDebugArrow;                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPaintConditionsDebugSymbols;                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawGameThreadSpecificDebugSymbolsDuration;        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGameThreadSpecificDebugSettings) == 0x000004, "Wrong alignment on FRVPDPGameThreadSpecificDebugSettings");
static_assert(sizeof(FRVPDPGameThreadSpecificDebugSettings) == 0x00000C, "Wrong size on FRVPDPGameThreadSpecificDebugSettings");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawVertexPositionDebugPoint) == 0x000000, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawVertexPositionDebugPoint' has a wrong offset!");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawVertexPositionDebugPointIfGotPaintApplied) == 0x000001, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawVertexPositionDebugPointIfGotPaintApplied' has a wrong offset!");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawClothVertexPositionDebugPoint) == 0x000002, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawClothVertexPositionDebugPoint' has a wrong offset!");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawVertexNormalDebugArrow) == 0x000003, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawVertexNormalDebugArrow' has a wrong offset!");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawPaintConditionsDebugSymbols) == 0x000004, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawPaintConditionsDebugSymbols' has a wrong offset!");
static_assert(offsetof(FRVPDPGameThreadSpecificDebugSettings, DrawGameThreadSpecificDebugSymbolsDuration) == 0x000008, "Member 'FRVPDPGameThreadSpecificDebugSettings::DrawGameThreadSpecificDebugSymbolsDuration' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTaskSpecificDebugSymbolsSettings
// 0x0008 (0x0008 - 0x0000)
struct FRVPDPTaskSpecificDebugSymbolsSettings final
{
public:
	bool                                          DrawTaskDebugSymbols;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTaskDebugSymbolsDuration;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPTaskSpecificDebugSymbolsSettings) == 0x000004, "Wrong alignment on FRVPDPTaskSpecificDebugSymbolsSettings");
static_assert(sizeof(FRVPDPTaskSpecificDebugSymbolsSettings) == 0x000008, "Wrong size on FRVPDPTaskSpecificDebugSymbolsSettings");
static_assert(offsetof(FRVPDPTaskSpecificDebugSymbolsSettings, DrawTaskDebugSymbols) == 0x000000, "Member 'FRVPDPTaskSpecificDebugSymbolsSettings::DrawTaskDebugSymbols' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskSpecificDebugSymbolsSettings, DrawTaskDebugSymbolsDuration) == 0x000004, "Member 'FRVPDPTaskSpecificDebugSymbolsSettings::DrawTaskDebugSymbolsDuration' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPDebugSettings
// 0x0028 (0x0028 - 0x0000)
struct FRVPDPDebugSettings final
{
public:
	class UWorld*                                 WorldTaskWasCreatedIn;                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintLogsToScreen;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrintLogsToScreen_Duration;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintLogsToOutputLog;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPGameThreadSpecificDebugSettings  GameThreadSpecificDebugSymbols;                    // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPTaskSpecificDebugSymbolsSettings TaskSpecificDebugSymbols;                          // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPDebugSettings) == 0x000008, "Wrong alignment on FRVPDPDebugSettings");
static_assert(sizeof(FRVPDPDebugSettings) == 0x000028, "Wrong size on FRVPDPDebugSettings");
static_assert(offsetof(FRVPDPDebugSettings, WorldTaskWasCreatedIn) == 0x000000, "Member 'FRVPDPDebugSettings::WorldTaskWasCreatedIn' has a wrong offset!");
static_assert(offsetof(FRVPDPDebugSettings, PrintLogsToScreen) == 0x000008, "Member 'FRVPDPDebugSettings::PrintLogsToScreen' has a wrong offset!");
static_assert(offsetof(FRVPDPDebugSettings, PrintLogsToScreen_Duration) == 0x00000C, "Member 'FRVPDPDebugSettings::PrintLogsToScreen_Duration' has a wrong offset!");
static_assert(offsetof(FRVPDPDebugSettings, PrintLogsToOutputLog) == 0x000010, "Member 'FRVPDPDebugSettings::PrintLogsToOutputLog' has a wrong offset!");
static_assert(offsetof(FRVPDPDebugSettings, GameThreadSpecificDebugSymbols) == 0x000014, "Member 'FRVPDPDebugSettings::GameThreadSpecificDebugSymbols' has a wrong offset!");
static_assert(offsetof(FRVPDPDebugSettings, TaskSpecificDebugSymbols) == 0x000020, "Member 'FRVPDPDebugSettings::TaskSpecificDebugSymbols' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTaskFundamentalSettings
// 0x0110 (0x0110 - 0x0000)
struct FRVPDPTaskFundamentalSettings
{
public:
	class UWorld*                                 TaskWorld;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentItem;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPTaskCallbackSettings             CallbackSettings;                                  // 0x0018(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPMultiThreadSettings              MultiThreadSettings;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IgnoreTaskQueueLimit;                              // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPDebugSettings                    DebugSettings;                                     // 0x00E8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPTaskFundamentalSettings) == 0x000008, "Wrong alignment on FRVPDPTaskFundamentalSettings");
static_assert(sizeof(FRVPDPTaskFundamentalSettings) == 0x000110, "Wrong size on FRVPDPTaskFundamentalSettings");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, TaskWorld) == 0x000000, "Member 'FRVPDPTaskFundamentalSettings::TaskWorld' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, MeshComponent) == 0x000008, "Member 'FRVPDPTaskFundamentalSettings::MeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, ComponentItem) == 0x000010, "Member 'FRVPDPTaskFundamentalSettings::ComponentItem' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, CallbackSettings) == 0x000018, "Member 'FRVPDPTaskFundamentalSettings::CallbackSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, MultiThreadSettings) == 0x0000E0, "Member 'FRVPDPTaskFundamentalSettings::MultiThreadSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, IgnoreTaskQueueLimit) == 0x0000E1, "Member 'FRVPDPTaskFundamentalSettings::IgnoreTaskQueueLimit' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskFundamentalSettings, DebugSettings) == 0x0000E8, "Member 'FRVPDPTaskFundamentalSettings::DebugSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPDetectTaskSettings
// 0x0000 (0x0110 - 0x0110)
struct FRVPDPDetectTaskSettings : public FRVPDPTaskFundamentalSettings
{
};
static_assert(alignof(FRVPDPDetectTaskSettings) == 0x000008, "Wrong alignment on FRVPDPDetectTaskSettings");
static_assert(sizeof(FRVPDPDetectTaskSettings) == 0x000110, "Wrong size on FRVPDPDetectTaskSettings");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGetAverageColorSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPGetAverageColorSettings final
{
public:
	bool                                          GetAverageColor;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AreaRangeToGetAvarageColorFrom;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor; // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGetAverageColorSettings) == 0x000004, "Wrong alignment on FRVPDPGetAverageColorSettings");
static_assert(sizeof(FRVPDPGetAverageColorSettings) == 0x00000C, "Wrong size on FRVPDPGetAverageColorSettings");
static_assert(offsetof(FRVPDPGetAverageColorSettings, GetAverageColor) == 0x000000, "Member 'FRVPDPGetAverageColorSettings::GetAverageColor' has a wrong offset!");
static_assert(offsetof(FRVPDPGetAverageColorSettings, AreaRangeToGetAvarageColorFrom) == 0x000004, "Member 'FRVPDPGetAverageColorSettings::AreaRangeToGetAvarageColorFrom' has a wrong offset!");
static_assert(offsetof(FRVPDPGetAverageColorSettings, VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor) == 0x000008, "Member 'FRVPDPGetAverageColorSettings::VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAtLocationTasksSettings
// 0x0060 (0x0060 - 0x0000)
struct FRVPDPAtLocationTasksSettings final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocationInComponentSpace;                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBone;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RunTaskFor;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAtLocationTasksSettings) == 0x000008, "Wrong alignment on FRVPDPAtLocationTasksSettings");
static_assert(sizeof(FRVPDPAtLocationTasksSettings) == 0x000060, "Wrong size on FRVPDPAtLocationTasksSettings");
static_assert(offsetof(FRVPDPAtLocationTasksSettings, HitLocation) == 0x000000, "Member 'FRVPDPAtLocationTasksSettings::HitLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPAtLocationTasksSettings, HitLocationInComponentSpace) == 0x000018, "Member 'FRVPDPAtLocationTasksSettings::HitLocationInComponentSpace' has a wrong offset!");
static_assert(offsetof(FRVPDPAtLocationTasksSettings, HitNormal) == 0x000030, "Member 'FRVPDPAtLocationTasksSettings::HitNormal' has a wrong offset!");
static_assert(offsetof(FRVPDPAtLocationTasksSettings, HitBone) == 0x000048, "Member 'FRVPDPAtLocationTasksSettings::HitBone' has a wrong offset!");
static_assert(offsetof(FRVPDPAtLocationTasksSettings, RunTaskFor) == 0x000050, "Member 'FRVPDPAtLocationTasksSettings::RunTaskFor' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPEstimatedColorAtHitLocationSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPEstimatedColorAtHitLocationSettings final
{
public:
	bool                                          GetEstimatedColorAtHitLocation;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyGetIfMeshHasMaxAmountOfVertices;               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmountOfVertices;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHitNormalToVertexNormalDotRequired;             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPEstimatedColorAtHitLocationSettings) == 0x000004, "Wrong alignment on FRVPDPEstimatedColorAtHitLocationSettings");
static_assert(sizeof(FRVPDPEstimatedColorAtHitLocationSettings) == 0x00000C, "Wrong size on FRVPDPEstimatedColorAtHitLocationSettings");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationSettings, GetEstimatedColorAtHitLocation) == 0x000000, "Member 'FRVPDPEstimatedColorAtHitLocationSettings::GetEstimatedColorAtHitLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationSettings, OnlyGetIfMeshHasMaxAmountOfVertices) == 0x000001, "Member 'FRVPDPEstimatedColorAtHitLocationSettings::OnlyGetIfMeshHasMaxAmountOfVertices' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationSettings, MaxAmountOfVertices) == 0x000004, "Member 'FRVPDPEstimatedColorAtHitLocationSettings::MaxAmountOfVertices' has a wrong offset!");
static_assert(offsetof(FRVPDPEstimatedColorAtHitLocationSettings, MinHitNormalToVertexNormalDotRequired) == 0x000008, "Member 'FRVPDPEstimatedColorAtHitLocationSettings::MinHitNormalToVertexNormalDotRequired' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPClosestVertexDataOptimizationSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPClosestVertexDataOptimizationSettings final
{
public:
	int32                                         OptionalStaticMeshFaceIndex;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptClosestVertexDataIfVertexIsWithinMinRange;   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptClosestVertexDataIfVertexIsWithinRange;      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPClosestVertexDataOptimizationSettings) == 0x000004, "Wrong alignment on FRVPDPClosestVertexDataOptimizationSettings");
static_assert(sizeof(FRVPDPClosestVertexDataOptimizationSettings) == 0x00000C, "Wrong size on FRVPDPClosestVertexDataOptimizationSettings");
static_assert(offsetof(FRVPDPClosestVertexDataOptimizationSettings, OptionalStaticMeshFaceIndex) == 0x000000, "Member 'FRVPDPClosestVertexDataOptimizationSettings::OptionalStaticMeshFaceIndex' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexDataOptimizationSettings, AcceptClosestVertexDataIfVertexIsWithinMinRange) == 0x000004, "Member 'FRVPDPClosestVertexDataOptimizationSettings::AcceptClosestVertexDataIfVertexIsWithinMinRange' has a wrong offset!");
static_assert(offsetof(FRVPDPClosestVertexDataOptimizationSettings, AcceptClosestVertexDataIfVertexIsWithinRange) == 0x000008, "Member 'FRVPDPClosestVertexDataOptimizationSettings::AcceptClosestVertexDataIfVertexIsWithinRange' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGetClosestVertexDataSettings
// 0x0088 (0x0198 - 0x0110)
struct FRVPDPGetClosestVertexDataSettings final : public FRVPDPDetectTaskSettings
{
public:
	struct FRVPDPGetAverageColorSettings          GetAverageColorInAreaSettings;                     // 0x0110(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPAtLocationTasksSettings          HitFundementals;                                   // 0x0120(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPEstimatedColorAtHitLocationSettings GetEstimatedColorAtHitLocationSettings;            // 0x0180(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPClosestVertexDataOptimizationSettings ClosestVertexDataOptimizationSettings;             // 0x018C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGetClosestVertexDataSettings) == 0x000008, "Wrong alignment on FRVPDPGetClosestVertexDataSettings");
static_assert(sizeof(FRVPDPGetClosestVertexDataSettings) == 0x000198, "Wrong size on FRVPDPGetClosestVertexDataSettings");
static_assert(offsetof(FRVPDPGetClosestVertexDataSettings, GetAverageColorInAreaSettings) == 0x000110, "Member 'FRVPDPGetClosestVertexDataSettings::GetAverageColorInAreaSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataSettings, HitFundementals) == 0x000120, "Member 'FRVPDPGetClosestVertexDataSettings::HitFundementals' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataSettings, GetEstimatedColorAtHitLocationSettings) == 0x000180, "Member 'FRVPDPGetClosestVertexDataSettings::GetEstimatedColorAtHitLocationSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataSettings, ClosestVertexDataOptimizationSettings) == 0x00018C, "Member 'FRVPDPGetClosestVertexDataSettings::ClosestVertexDataOptimizationSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPComponentToCheckIfIsWithinAreaInfo
// 0x02D0 (0x02D0 - 0x0000)
struct alignas(0x10) FRVPDPComponentToCheckIfIsWithinAreaInfo final
{
public:
	class UPrimitiveComponent*                    ComponentToCheckIfIsWithin;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaintWithinAreaShape                         PaintWithinAreaShape;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceComplexIfComplexShape;                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2C6];                                      // 0x000A(0x02C6)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPComponentToCheckIfIsWithinAreaInfo) == 0x000010, "Wrong alignment on FRVPDPComponentToCheckIfIsWithinAreaInfo");
static_assert(sizeof(FRVPDPComponentToCheckIfIsWithinAreaInfo) == 0x0002D0, "Wrong size on FRVPDPComponentToCheckIfIsWithinAreaInfo");
static_assert(offsetof(FRVPDPComponentToCheckIfIsWithinAreaInfo, ComponentToCheckIfIsWithin) == 0x000000, "Member 'FRVPDPComponentToCheckIfIsWithinAreaInfo::ComponentToCheckIfIsWithin' has a wrong offset!");
static_assert(offsetof(FRVPDPComponentToCheckIfIsWithinAreaInfo, PaintWithinAreaShape) == 0x000008, "Member 'FRVPDPComponentToCheckIfIsWithinAreaInfo::PaintWithinAreaShape' has a wrong offset!");
static_assert(offsetof(FRVPDPComponentToCheckIfIsWithinAreaInfo, TraceComplexIfComplexShape) == 0x000009, "Member 'FRVPDPComponentToCheckIfIsWithinAreaInfo::TraceComplexIfComplexShape' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPWithinAreaSettings
// 0x0048 (0x0048 - 0x0000)
struct FRVPDPWithinAreaSettings final
{
public:
	TArray<struct FRVPDPComponentToCheckIfIsWithinAreaInfo> ComponentsToCheckIfIsWithin;                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexColorsWithinArea;                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexPositionsWithinrea;                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexNormalsWithinArea;                    // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexIndexesWithinArea;                    // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPIncludeAmountOfPaintedColorsOfEachChannelSettings IncludeAmountOfColorsOfEachChannelWithinArea;      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TraceForSpecificBonesWithinArea;                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPWithinAreaSettings) == 0x000008, "Wrong alignment on FRVPDPWithinAreaSettings");
static_assert(sizeof(FRVPDPWithinAreaSettings) == 0x000048, "Wrong size on FRVPDPWithinAreaSettings");
static_assert(offsetof(FRVPDPWithinAreaSettings, ComponentsToCheckIfIsWithin) == 0x000000, "Member 'FRVPDPWithinAreaSettings::ComponentsToCheckIfIsWithin' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, IncludeVertexColorsWithinArea) == 0x000010, "Member 'FRVPDPWithinAreaSettings::IncludeVertexColorsWithinArea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, IncludeVertexPositionsWithinrea) == 0x000011, "Member 'FRVPDPWithinAreaSettings::IncludeVertexPositionsWithinrea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, IncludeVertexNormalsWithinArea) == 0x000012, "Member 'FRVPDPWithinAreaSettings::IncludeVertexNormalsWithinArea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, IncludeVertexIndexesWithinArea) == 0x000013, "Member 'FRVPDPWithinAreaSettings::IncludeVertexIndexesWithinArea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, IncludeAmountOfColorsOfEachChannelWithinArea) == 0x000018, "Member 'FRVPDPWithinAreaSettings::IncludeAmountOfColorsOfEachChannelWithinArea' has a wrong offset!");
static_assert(offsetof(FRVPDPWithinAreaSettings, TraceForSpecificBonesWithinArea) == 0x000030, "Member 'FRVPDPWithinAreaSettings::TraceForSpecificBonesWithinArea' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGetColorsWithinAreaSettings
// 0x0048 (0x0158 - 0x0110)
struct FRVPDPGetColorsWithinAreaSettings final : public FRVPDPDetectTaskSettings
{
public:
	struct FRVPDPWithinAreaSettings               WithinAreaSettings;                                // 0x0110(0x0048)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGetColorsWithinAreaSettings) == 0x000008, "Wrong alignment on FRVPDPGetColorsWithinAreaSettings");
static_assert(sizeof(FRVPDPGetColorsWithinAreaSettings) == 0x000158, "Wrong size on FRVPDPGetColorsWithinAreaSettings");
static_assert(offsetof(FRVPDPGetColorsWithinAreaSettings, WithinAreaSettings) == 0x000110, "Member 'FRVPDPGetColorsWithinAreaSettings::WithinAreaSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPVertexDataInfo
// 0x0060 (0x0060 - 0x0000)
struct FRVPDPVertexDataInfo final
{
public:
	TSoftObjectPtr<class UObject>                 MeshSource;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimitiveComponent>     MeshComp;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, ExportObject, EditConst, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectMeshDataPerLODStruct> MeshDataPerLOD;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPVertexDataInfo) == 0x000008, "Wrong alignment on FRVPDPVertexDataInfo");
static_assert(sizeof(FRVPDPVertexDataInfo) == 0x000060, "Wrong size on FRVPDPVertexDataInfo");
static_assert(offsetof(FRVPDPVertexDataInfo, MeshSource) == 0x000000, "Member 'FRVPDPVertexDataInfo::MeshSource' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexDataInfo, MeshComp) == 0x000028, "Member 'FRVPDPVertexDataInfo::MeshComp' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexDataInfo, MeshDataPerLOD) == 0x000050, "Member 'FRVPDPVertexDataInfo::MeshDataPerLOD' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCompareMeshVertexColorsToColorArrayResult
// 0x000C (0x000C - 0x0000)
struct FRVPDPCompareMeshVertexColorsToColorArrayResult final
{
public:
	bool                                          SuccessfullyComparedMeshVertexColorsToColorArray;  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MatchingPercent;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkippedAllVertices;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPCompareMeshVertexColorsToColorArrayResult) == 0x000004, "Wrong alignment on FRVPDPCompareMeshVertexColorsToColorArrayResult");
static_assert(sizeof(FRVPDPCompareMeshVertexColorsToColorArrayResult) == 0x00000C, "Wrong size on FRVPDPCompareMeshVertexColorsToColorArrayResult");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorArrayResult, SuccessfullyComparedMeshVertexColorsToColorArray) == 0x000000, "Member 'FRVPDPCompareMeshVertexColorsToColorArrayResult::SuccessfullyComparedMeshVertexColorsToColorArray' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorArrayResult, MatchingPercent) == 0x000004, "Member 'FRVPDPCompareMeshVertexColorsToColorArrayResult::MatchingPercent' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorArrayResult, SkippedAllVertices) == 0x000008, "Member 'FRVPDPCompareMeshVertexColorsToColorArrayResult::SkippedAllVertices' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCompareMeshVertexColorsToColorSnippetResult
// 0x00A8 (0x00A8 - 0x0000)
struct FRVPDPCompareMeshVertexColorsToColorSnippetResult final
{
public:
	bool                                          SuccessfullyComparedMeshVertexColorsToColorSnippet; // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, float>              MatchingPercentPerColorSnippet;                    // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, bool>               SkippedAllVerticesPerSnippet;                      // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPCompareMeshVertexColorsToColorSnippetResult) == 0x000008, "Wrong alignment on FRVPDPCompareMeshVertexColorsToColorSnippetResult");
static_assert(sizeof(FRVPDPCompareMeshVertexColorsToColorSnippetResult) == 0x0000A8, "Wrong size on FRVPDPCompareMeshVertexColorsToColorSnippetResult");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorSnippetResult, SuccessfullyComparedMeshVertexColorsToColorSnippet) == 0x000000, "Member 'FRVPDPCompareMeshVertexColorsToColorSnippetResult::SuccessfullyComparedMeshVertexColorsToColorSnippet' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorSnippetResult, MatchingPercentPerColorSnippet) == 0x000008, "Member 'FRVPDPCompareMeshVertexColorsToColorSnippetResult::MatchingPercentPerColorSnippet' has a wrong offset!");
static_assert(offsetof(FRVPDPCompareMeshVertexColorsToColorSnippetResult, SkippedAllVerticesPerSnippet) == 0x000058, "Member 'FRVPDPCompareMeshVertexColorsToColorSnippetResult::SkippedAllVerticesPerSnippet' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPBoneVertexColorsInfo
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPBoneVertexColorsInfo final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         BoneVertexColors;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPBoneVertexColorsInfo) == 0x000008, "Wrong alignment on FRVPDPBoneVertexColorsInfo");
static_assert(sizeof(FRVPDPBoneVertexColorsInfo) == 0x000018, "Wrong size on FRVPDPBoneVertexColorsInfo");
static_assert(offsetof(FRVPDPBoneVertexColorsInfo, BoneName) == 0x000000, "Member 'FRVPDPBoneVertexColorsInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FRVPDPBoneVertexColorsInfo, BoneVertexColors) == 0x000008, "Member 'FRVPDPBoneVertexColorsInfo::BoneVertexColors' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPVertexColorsOnEachBoneResult
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPVertexColorsOnEachBoneResult final
{
public:
	bool                                          SuccessFullyGotColorsForEachBone;                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPBoneVertexColorsInfo>     ColorsOfEachBone;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPVertexColorsOnEachBoneResult) == 0x000008, "Wrong alignment on FRVPDPVertexColorsOnEachBoneResult");
static_assert(sizeof(FRVPDPVertexColorsOnEachBoneResult) == 0x000018, "Wrong size on FRVPDPVertexColorsOnEachBoneResult");
static_assert(offsetof(FRVPDPVertexColorsOnEachBoneResult, SuccessFullyGotColorsForEachBone) == 0x000000, "Member 'FRVPDPVertexColorsOnEachBoneResult::SuccessFullyGotColorsForEachBone' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexColorsOnEachBoneResult, ColorsOfEachBone) == 0x000008, "Member 'FRVPDPVertexColorsOnEachBoneResult::ColorsOfEachBone' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTaskResults
// 0x01A0 (0x01A0 - 0x0000)
struct FRVPDPTaskResults final
{
public:
	bool                                          TaskSuccessfull;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TaskDuration;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintDetectionComponent*         AssociatedPaintComponent;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPVertexDataInfo                   MeshVertexData;                                    // 0x0018(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPCompareMeshVertexColorsToColorArrayResult CompareMeshVertexColorsToColorArrayResult;         // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPCompareMeshVertexColorsToColorSnippetResult CompareMeshVertexColorsToColorSnippetResult;       // 0x0088(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPAmountOfColorsOfEachChannelResults AmountOfPaintedColorsOfEachChannel;                // 0x0130(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FRVPDPVertexColorsOnEachBoneResult     VertexColorsOnEachBone;                            // 0x0188(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPTaskResults) == 0x000008, "Wrong alignment on FRVPDPTaskResults");
static_assert(sizeof(FRVPDPTaskResults) == 0x0001A0, "Wrong size on FRVPDPTaskResults");
static_assert(offsetof(FRVPDPTaskResults, TaskSuccessfull) == 0x000000, "Member 'FRVPDPTaskResults::TaskSuccessfull' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, TaskDuration) == 0x000004, "Member 'FRVPDPTaskResults::TaskDuration' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, AssociatedPaintComponent) == 0x000008, "Member 'FRVPDPTaskResults::AssociatedPaintComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, MeshComponent) == 0x000010, "Member 'FRVPDPTaskResults::MeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, MeshVertexData) == 0x000018, "Member 'FRVPDPTaskResults::MeshVertexData' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, CompareMeshVertexColorsToColorArrayResult) == 0x000078, "Member 'FRVPDPTaskResults::CompareMeshVertexColorsToColorArrayResult' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, CompareMeshVertexColorsToColorSnippetResult) == 0x000088, "Member 'FRVPDPTaskResults::CompareMeshVertexColorsToColorSnippetResult' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, AmountOfPaintedColorsOfEachChannel) == 0x000130, "Member 'FRVPDPTaskResults::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPTaskResults, VertexColorsOnEachBone) == 0x000188, "Member 'FRVPDPTaskResults::VertexColorsOnEachBone' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPOverrideLODToPaintUpToSettings
// 0x0008 (0x0008 - 0x0000)
struct FRVPDPOverrideLODToPaintUpToSettings final
{
public:
	bool                                          OverrideLODToPaintUpTo;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmountOfLODsToPaint;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPOverrideLODToPaintUpToSettings) == 0x000004, "Wrong alignment on FRVPDPOverrideLODToPaintUpToSettings");
static_assert(sizeof(FRVPDPOverrideLODToPaintUpToSettings) == 0x000008, "Wrong size on FRVPDPOverrideLODToPaintUpToSettings");
static_assert(offsetof(FRVPDPOverrideLODToPaintUpToSettings, OverrideLODToPaintUpTo) == 0x000000, "Member 'FRVPDPOverrideLODToPaintUpToSettings::OverrideLODToPaintUpTo' has a wrong offset!");
static_assert(offsetof(FRVPDPOverrideLODToPaintUpToSettings, AmountOfLODsToPaint) == 0x000004, "Member 'FRVPDPOverrideLODToPaintUpToSettings::AmountOfLODsToPaint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPOverrideColorsToApplySettings
// 0x0018 (0x0018 - 0x0000)
struct FRVPDPOverrideColorsToApplySettings final
{
public:
	bool                                          OverrideVertexColorsToApply;                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ObjectToRunOverrideVertexColorsInterface;          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideVertexColorsToApplyID;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyRunOverrideInterfaceIfTryingToApplyColorToVertex; // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeMostDominantPhysicsSurface;                 // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPOverrideColorsToApplySettings) == 0x000008, "Wrong alignment on FRVPDPOverrideColorsToApplySettings");
static_assert(sizeof(FRVPDPOverrideColorsToApplySettings) == 0x000018, "Wrong size on FRVPDPOverrideColorsToApplySettings");
static_assert(offsetof(FRVPDPOverrideColorsToApplySettings, OverrideVertexColorsToApply) == 0x000000, "Member 'FRVPDPOverrideColorsToApplySettings::OverrideVertexColorsToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPOverrideColorsToApplySettings, ObjectToRunOverrideVertexColorsInterface) == 0x000008, "Member 'FRVPDPOverrideColorsToApplySettings::ObjectToRunOverrideVertexColorsInterface' has a wrong offset!");
static_assert(offsetof(FRVPDPOverrideColorsToApplySettings, OverrideVertexColorsToApplyID) == 0x000010, "Member 'FRVPDPOverrideColorsToApplySettings::OverrideVertexColorsToApplyID' has a wrong offset!");
static_assert(offsetof(FRVPDPOverrideColorsToApplySettings, OnlyRunOverrideInterfaceIfTryingToApplyColorToVertex) == 0x000014, "Member 'FRVPDPOverrideColorsToApplySettings::OnlyRunOverrideInterfaceIfTryingToApplyColorToVertex' has a wrong offset!");
static_assert(offsetof(FRVPDPOverrideColorsToApplySettings, IncludeMostDominantPhysicsSurface) == 0x000015, "Member 'FRVPDPOverrideColorsToApplySettings::IncludeMostDominantPhysicsSurface' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintTaskSettings
// 0x0038 (0x0148 - 0x0110)
struct FRVPDPPaintTaskSettings : public FRVPDPTaskFundamentalSettings
{
public:
	bool                                          ApplyPaintJobToVertexColors;                       // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPOverrideLODToPaintUpToSettings   OverrideLOD;                                       // 0x0114(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AffectClothPhysics;                                // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CanOnlyApplyPaintOnTheseActors;                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRVPDPOverrideColorsToApplySettings    OverrideVertexColorsToApplySettings;               // 0x0130(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintTaskSettings) == 0x000008, "Wrong alignment on FRVPDPPaintTaskSettings");
static_assert(sizeof(FRVPDPPaintTaskSettings) == 0x000148, "Wrong size on FRVPDPPaintTaskSettings");
static_assert(offsetof(FRVPDPPaintTaskSettings, ApplyPaintJobToVertexColors) == 0x000110, "Member 'FRVPDPPaintTaskSettings::ApplyPaintJobToVertexColors' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskSettings, OverrideLOD) == 0x000114, "Member 'FRVPDPPaintTaskSettings::OverrideLOD' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskSettings, AffectClothPhysics) == 0x00011C, "Member 'FRVPDPPaintTaskSettings::AffectClothPhysics' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskSettings, CanOnlyApplyPaintOnTheseActors) == 0x000120, "Member 'FRVPDPPaintTaskSettings::CanOnlyApplyPaintOnTheseActors' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskSettings, OverrideVertexColorsToApplySettings) == 0x000130, "Member 'FRVPDPPaintTaskSettings::OverrideVertexColorsToApplySettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintLimitSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPPaintLimitSettings final
{
public:
	bool                                          UsePaintLimits;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PaintLimit;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LimitColorIfTheColorWasAlreadyOverTheLimit;        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPaintLimitSettings) == 0x000004, "Wrong alignment on FRVPDPPaintLimitSettings");
static_assert(sizeof(FRVPDPPaintLimitSettings) == 0x00000C, "Wrong size on FRVPDPPaintLimitSettings");
static_assert(offsetof(FRVPDPPaintLimitSettings, UsePaintLimits) == 0x000000, "Member 'FRVPDPPaintLimitSettings::UsePaintLimits' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintLimitSettings, PaintLimit) == 0x000004, "Member 'FRVPDPPaintLimitSettings::PaintLimit' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintLimitSettings, LimitColorIfTheColorWasAlreadyOverTheLimit) == 0x000008, "Member 'FRVPDPPaintLimitSettings::LimitColorIfTheColorWasAlreadyOverTheLimit' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintDirectlyTaskSettings
// 0x0030 (0x0178 - 0x0148)
struct FRVPDPPaintDirectlyTaskSettings : public FRVPDPPaintTaskSettings
{
public:
	struct FRVPDPPaintLimitSettings               VertexColorRedChannelsLimit;                       // 0x0148(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPPaintLimitSettings               VertexColorGreenChannelsLimit;                     // 0x0154(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPPaintLimitSettings               VertexColorBlueChannelsLimit;                      // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPPaintLimitSettings               VertexColorAlphaChannelsLimit;                     // 0x016C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintDirectlyTaskSettings) == 0x000008, "Wrong alignment on FRVPDPPaintDirectlyTaskSettings");
static_assert(sizeof(FRVPDPPaintDirectlyTaskSettings) == 0x000178, "Wrong size on FRVPDPPaintDirectlyTaskSettings");
static_assert(offsetof(FRVPDPPaintDirectlyTaskSettings, VertexColorRedChannelsLimit) == 0x000148, "Member 'FRVPDPPaintDirectlyTaskSettings::VertexColorRedChannelsLimit' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintDirectlyTaskSettings, VertexColorGreenChannelsLimit) == 0x000154, "Member 'FRVPDPPaintDirectlyTaskSettings::VertexColorGreenChannelsLimit' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintDirectlyTaskSettings, VertexColorBlueChannelsLimit) == 0x000160, "Member 'FRVPDPPaintDirectlyTaskSettings::VertexColorBlueChannelsLimit' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintDirectlyTaskSettings, VertexColorAlphaChannelsLimit) == 0x00016C, "Member 'FRVPDPPaintDirectlyTaskSettings::VertexColorAlphaChannelsLimit' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSetVertexColorsSettings
// 0x0010 (0x0188 - 0x0178)
struct FRVPDPSetVertexColorsSettings final : public FRVPDPPaintDirectlyTaskSettings
{
public:
	TArray<struct FColor>                         VertexColorsAtLOD0ToSet;                           // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSetVertexColorsSettings) == 0x000008, "Wrong alignment on FRVPDPSetVertexColorsSettings");
static_assert(sizeof(FRVPDPSetVertexColorsSettings) == 0x000188, "Wrong size on FRVPDPSetVertexColorsSettings");
static_assert(offsetof(FRVPDPSetVertexColorsSettings, VertexColorsAtLOD0ToSet) == 0x000178, "Member 'FRVPDPSetVertexColorsSettings::VertexColorsAtLOD0ToSet' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSkeletalMeshBonesToIncludeInfo
// 0x0028 (0x0028 - 0x0000)
struct FRVPDPSkeletalMeshBonesToIncludeInfo final
{
public:
	class FName                                   ParentBoneName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneParentsToInclude;                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneChildsToInclude;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSkeletalMeshBonesToIncludeInfo) == 0x000008, "Wrong alignment on FRVPDPSkeletalMeshBonesToIncludeInfo");
static_assert(sizeof(FRVPDPSkeletalMeshBonesToIncludeInfo) == 0x000028, "Wrong size on FRVPDPSkeletalMeshBonesToIncludeInfo");
static_assert(offsetof(FRVPDPSkeletalMeshBonesToIncludeInfo, ParentBoneName) == 0x000000, "Member 'FRVPDPSkeletalMeshBonesToIncludeInfo::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshBonesToIncludeInfo, BoneParentsToInclude) == 0x000008, "Member 'FRVPDPSkeletalMeshBonesToIncludeInfo::BoneParentsToInclude' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshBonesToIncludeInfo, BoneChildsToInclude) == 0x000018, "Member 'FRVPDPSkeletalMeshBonesToIncludeInfo::BoneChildsToInclude' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintTaskResultInfo
// 0x0028 (0x0028 - 0x0000)
struct FRVPDPPaintTaskResultInfo final
{
public:
	bool                                          AnyVertexColorGotChanged;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           VertexColorAppliedToBones;                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<EVertexColorChannel>                   ColorAppliedToVertexColorChannels;                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintTaskResultInfo) == 0x000008, "Wrong alignment on FRVPDPPaintTaskResultInfo");
static_assert(sizeof(FRVPDPPaintTaskResultInfo) == 0x000028, "Wrong size on FRVPDPPaintTaskResultInfo");
static_assert(offsetof(FRVPDPPaintTaskResultInfo, AnyVertexColorGotChanged) == 0x000000, "Member 'FRVPDPPaintTaskResultInfo::AnyVertexColorGotChanged' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskResultInfo, VertexColorAppliedToBones) == 0x000008, "Member 'FRVPDPPaintTaskResultInfo::VertexColorAppliedToBones' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintTaskResultInfo, ColorAppliedToVertexColorChannels) == 0x000018, "Member 'FRVPDPPaintTaskResultInfo::ColorAppliedToVertexColorChannels' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSetVertexColorsUsingSerializedStringSettings
// 0x0010 (0x0188 - 0x0178)
struct FRVPDPSetVertexColorsUsingSerializedStringSettings final : public FRVPDPPaintDirectlyTaskSettings
{
public:
	class FString                                 SerializedColorDataAtLOD0;                         // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSetVertexColorsUsingSerializedStringSettings) == 0x000008, "Wrong alignment on FRVPDPSetVertexColorsUsingSerializedStringSettings");
static_assert(sizeof(FRVPDPSetVertexColorsUsingSerializedStringSettings) == 0x000188, "Wrong size on FRVPDPSetVertexColorsUsingSerializedStringSettings");
static_assert(offsetof(FRVPDPSetVertexColorsUsingSerializedStringSettings, SerializedColorDataAtLOD0) == 0x000178, "Member 'FRVPDPSetVertexColorsUsingSerializedStringSettings::SerializedColorDataAtLOD0' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAutoPaintTaskResults
// 0x0300 (0x0300 - 0x0000)
struct FRVPDPAutoPaintTaskResults final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPTaskResults                      TaskResultInfo;                                    // 0x0008(0x01A0)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintTaskResultInfo              PaintTaskResultInfo;                               // 0x01A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPAdditionalDataToPassThroughInfo  AdditionalData;                                    // 0x01D0(0x0130)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAutoPaintTaskResults) == 0x000008, "Wrong alignment on FRVPDPAutoPaintTaskResults");
static_assert(sizeof(FRVPDPAutoPaintTaskResults) == 0x000300, "Wrong size on FRVPDPAutoPaintTaskResults");
static_assert(offsetof(FRVPDPAutoPaintTaskResults, MeshComponent) == 0x000000, "Member 'FRVPDPAutoPaintTaskResults::MeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoPaintTaskResults, TaskResultInfo) == 0x000008, "Member 'FRVPDPAutoPaintTaskResults::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoPaintTaskResults, PaintTaskResultInfo) == 0x0001A8, "Member 'FRVPDPAutoPaintTaskResults::PaintTaskResultInfo' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoPaintTaskResults, AdditionalData) == 0x0001D0, "Member 'FRVPDPAutoPaintTaskResults::AdditionalData' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPStartNewRoundOfTasksInfo
// 0x0050 (0x0050 - 0x0000)
struct FRVPDPStartNewRoundOfTasksInfo final
{
public:
	TMap<class UPrimitiveComponent*, struct FRVPDPAutoPaintTaskResults> NewRoundOfTasks;                                   // 0x0000(0x0050)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPStartNewRoundOfTasksInfo) == 0x000008, "Wrong alignment on FRVPDPStartNewRoundOfTasksInfo");
static_assert(sizeof(FRVPDPStartNewRoundOfTasksInfo) == 0x000050, "Wrong size on FRVPDPStartNewRoundOfTasksInfo");
static_assert(offsetof(FRVPDPStartNewRoundOfTasksInfo, NewRoundOfTasks) == 0x000000, "Member 'FRVPDPStartNewRoundOfTasksInfo::NewRoundOfTasks' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPChaosClothPhysicsSettings
// 0x0150 (0x0150 - 0x0000)
struct FRVPDPChaosClothPhysicsSettings final
{
public:
	bool                                          SetDamping;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsDampingSettings      ClothDampingSettings;                              // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetGravity;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsGravitySettings      ClothGravitySettings;                              // 0x0010(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetWind;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsWindSettings         ClothWindSettings;                                 // 0x0038(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAnimDrive;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsAnimDriveSettings    ClothAnimDriveSettings;                            // 0x0080(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetCollision;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsCollisionSettings    ClothCollisionSettings;                            // 0x00A4(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetLongRangeAttachment;                            // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsLongRangeAttachmentSettings ClothLongRangeAttachmentSettings;                  // 0x00B8(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetMaterial;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsMaterialSettings     ClothMaterialSettings;                             // 0x00E0(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetPhysicsVelocityScale;                           // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsVelocityScaleSettings ClothPhysicsVelocityScaleSettings;                 // 0x0118(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAirPressure;                                    // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPClothPhysicsSetAirPressureSettings ClothPhysicssAirPressureSettings;                  // 0x0140(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPChaosClothPhysicsSettings) == 0x000008, "Wrong alignment on FRVPDPChaosClothPhysicsSettings");
static_assert(sizeof(FRVPDPChaosClothPhysicsSettings) == 0x000150, "Wrong size on FRVPDPChaosClothPhysicsSettings");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetDamping) == 0x000000, "Member 'FRVPDPChaosClothPhysicsSettings::SetDamping' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothDampingSettings) == 0x000004, "Member 'FRVPDPChaosClothPhysicsSettings::ClothDampingSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetGravity) == 0x000008, "Member 'FRVPDPChaosClothPhysicsSettings::SetGravity' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothGravitySettings) == 0x000010, "Member 'FRVPDPChaosClothPhysicsSettings::ClothGravitySettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetWind) == 0x000030, "Member 'FRVPDPChaosClothPhysicsSettings::SetWind' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothWindSettings) == 0x000038, "Member 'FRVPDPChaosClothPhysicsSettings::ClothWindSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetAnimDrive) == 0x000078, "Member 'FRVPDPChaosClothPhysicsSettings::SetAnimDrive' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothAnimDriveSettings) == 0x000080, "Member 'FRVPDPChaosClothPhysicsSettings::ClothAnimDriveSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetCollision) == 0x0000A0, "Member 'FRVPDPChaosClothPhysicsSettings::SetCollision' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothCollisionSettings) == 0x0000A4, "Member 'FRVPDPChaosClothPhysicsSettings::ClothCollisionSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetLongRangeAttachment) == 0x0000B4, "Member 'FRVPDPChaosClothPhysicsSettings::SetLongRangeAttachment' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothLongRangeAttachmentSettings) == 0x0000B8, "Member 'FRVPDPChaosClothPhysicsSettings::ClothLongRangeAttachmentSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetMaterial) == 0x0000D8, "Member 'FRVPDPChaosClothPhysicsSettings::SetMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothMaterialSettings) == 0x0000E0, "Member 'FRVPDPChaosClothPhysicsSettings::ClothMaterialSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetPhysicsVelocityScale) == 0x000110, "Member 'FRVPDPChaosClothPhysicsSettings::SetPhysicsVelocityScale' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothPhysicsVelocityScaleSettings) == 0x000118, "Member 'FRVPDPChaosClothPhysicsSettings::ClothPhysicsVelocityScaleSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, SetAirPressure) == 0x000138, "Member 'FRVPDPChaosClothPhysicsSettings::SetAirPressure' has a wrong offset!");
static_assert(offsetof(FRVPDPChaosClothPhysicsSettings, ClothPhysicssAirPressureSettings) == 0x000140, "Member 'FRVPDPChaosClothPhysicsSettings::ClothPhysicssAirPressureSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPCalculateColorsInfo
// 0x2870 (0x2870 - 0x0000)
struct FRVPDPCalculateColorsInfo final
{
public:
	uint8                                         Pad_0[0x1D8];                                      // 0x0000(0x01D8)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     PaintAtLocation_ClosestVertexMaterial;             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x40];                                     // 0x01E0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     GetClosestVertexData_ClosestVertexMaterial;        // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x2588];                                   // 0x0228(0x2588)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClothingAssetBase*, struct FRVPDPChaosClothPhysicsSettings> ClothPhysicsSettings;                              // 0x27B0(0x0050)(NativeAccessSpecifierPublic)
	class AActor*                                 VertexPaintActor;                                  // 0x2800(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    VertexPaintComponent;                              // 0x2808(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   VertexPaintStaticMeshComponent;                    // 0x2810(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          VertexPaintInstancedStaticMeshComponent;           // 0x2818(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   VertexPaintSplineMeshComponent;                    // 0x2820(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 VertexPaintSkelComponent;                          // 0x2828(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          VertexPaintSkelComponentsSkeletalMesh;             // 0x2830(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedMeshComponent*                  VertexPaintSkelComponentsMasterSkinnedComp;        // 0x2838(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                VertexPaintSourceMesh;                             // 0x2840(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintMaterialDataAsset*          VertexPaintMaterialDataAsset;                      // 0x2848(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicMeshComponent*                  VertexPaintDynamicMeshComponent;                   // 0x2850(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollectionComponent*           VertexPaintGeometryCollectionComponent;            // 0x2858(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollection*                    VertexPaintGeometryCollection;                     // 0x2860(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2868[0x8];                                     // 0x2868(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPCalculateColorsInfo) == 0x000008, "Wrong alignment on FRVPDPCalculateColorsInfo");
static_assert(sizeof(FRVPDPCalculateColorsInfo) == 0x002870, "Wrong size on FRVPDPCalculateColorsInfo");
static_assert(offsetof(FRVPDPCalculateColorsInfo, PaintAtLocation_ClosestVertexMaterial) == 0x0001D8, "Member 'FRVPDPCalculateColorsInfo::PaintAtLocation_ClosestVertexMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, GetClosestVertexData_ClosestVertexMaterial) == 0x000220, "Member 'FRVPDPCalculateColorsInfo::GetClosestVertexData_ClosestVertexMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, ClothPhysicsSettings) == 0x0027B0, "Member 'FRVPDPCalculateColorsInfo::ClothPhysicsSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintActor) == 0x002800, "Member 'FRVPDPCalculateColorsInfo::VertexPaintActor' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintComponent) == 0x002808, "Member 'FRVPDPCalculateColorsInfo::VertexPaintComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintStaticMeshComponent) == 0x002810, "Member 'FRVPDPCalculateColorsInfo::VertexPaintStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintInstancedStaticMeshComponent) == 0x002818, "Member 'FRVPDPCalculateColorsInfo::VertexPaintInstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintSplineMeshComponent) == 0x002820, "Member 'FRVPDPCalculateColorsInfo::VertexPaintSplineMeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintSkelComponent) == 0x002828, "Member 'FRVPDPCalculateColorsInfo::VertexPaintSkelComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintSkelComponentsSkeletalMesh) == 0x002830, "Member 'FRVPDPCalculateColorsInfo::VertexPaintSkelComponentsSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintSkelComponentsMasterSkinnedComp) == 0x002838, "Member 'FRVPDPCalculateColorsInfo::VertexPaintSkelComponentsMasterSkinnedComp' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintSourceMesh) == 0x002840, "Member 'FRVPDPCalculateColorsInfo::VertexPaintSourceMesh' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintMaterialDataAsset) == 0x002848, "Member 'FRVPDPCalculateColorsInfo::VertexPaintMaterialDataAsset' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintDynamicMeshComponent) == 0x002850, "Member 'FRVPDPCalculateColorsInfo::VertexPaintDynamicMeshComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintGeometryCollectionComponent) == 0x002858, "Member 'FRVPDPCalculateColorsInfo::VertexPaintGeometryCollectionComponent' has a wrong offset!");
static_assert(offsetof(FRVPDPCalculateColorsInfo, VertexPaintGeometryCollection) == 0x002860, "Member 'FRVPDPCalculateColorsInfo::VertexPaintGeometryCollection' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGetColorsOnlySettings
// 0x0000 (0x0110 - 0x0110)
struct FRVPDPGetColorsOnlySettings final : public FRVPDPDetectTaskSettings
{
};
static_assert(alignof(FRVPDPGetColorsOnlySettings) == 0x000008, "Wrong alignment on FRVPDPGetColorsOnlySettings");
static_assert(sizeof(FRVPDPGetColorsOnlySettings) == 0x000110, "Wrong size on FRVPDPGetColorsOnlySettings");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAverageColorInAreaInfo
// 0x0128 (0x0128 - 0x0000)
struct FRVPDPAverageColorInAreaInfo final
{
public:
	bool                                          GotAvarageVertexColorsWithinAreaOfEffect;          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           AvarageVertexColorsWithinAreaOfEffect;             // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPPhysicsSurfaceDataInfo           AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial; // 0x0018(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAverageColorInAreaInfo) == 0x000008, "Wrong alignment on FRVPDPAverageColorInAreaInfo");
static_assert(sizeof(FRVPDPAverageColorInAreaInfo) == 0x000128, "Wrong size on FRVPDPAverageColorInAreaInfo");
static_assert(offsetof(FRVPDPAverageColorInAreaInfo, GotAvarageVertexColorsWithinAreaOfEffect) == 0x000000, "Member 'FRVPDPAverageColorInAreaInfo::GotAvarageVertexColorsWithinAreaOfEffect' has a wrong offset!");
static_assert(offsetof(FRVPDPAverageColorInAreaInfo, AvarageVertexColorsWithinAreaOfEffect) == 0x000004, "Member 'FRVPDPAverageColorInAreaInfo::AvarageVertexColorsWithinAreaOfEffect' has a wrong offset!");
static_assert(offsetof(FRVPDPAverageColorInAreaInfo, AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial) == 0x000018, "Member 'FRVPDPAverageColorInAreaInfo::AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintColorSnippetSettings
// 0x0038 (0x01B0 - 0x0178)
struct FRVPDPPaintColorSnippetSettings : public FRVPDPPaintDirectlyTaskSettings
{
public:
	struct FGameplayTag                           ColorSnippetTag;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFRVPDPPaintColorSnippetSetting               PaintColorSnippetSetting;                          // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomizeSnippetUnderChosenTagCategory;            // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PaintGroupSnippetMeshes;                           // 0x0188(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPColorSnippetDataAssetInfo        ColorSnippetDataAssetInfo;                         // 0x0198(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintColorSnippetSettings) == 0x000008, "Wrong alignment on FRVPDPPaintColorSnippetSettings");
static_assert(sizeof(FRVPDPPaintColorSnippetSettings) == 0x0001B0, "Wrong size on FRVPDPPaintColorSnippetSettings");
static_assert(offsetof(FRVPDPPaintColorSnippetSettings, ColorSnippetTag) == 0x000178, "Member 'FRVPDPPaintColorSnippetSettings::ColorSnippetTag' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintColorSnippetSettings, PaintColorSnippetSetting) == 0x000180, "Member 'FRVPDPPaintColorSnippetSettings::PaintColorSnippetSetting' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintColorSnippetSettings, RandomizeSnippetUnderChosenTagCategory) == 0x000181, "Member 'FRVPDPPaintColorSnippetSettings::RandomizeSnippetUnderChosenTagCategory' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintColorSnippetSettings, PaintGroupSnippetMeshes) == 0x000188, "Member 'FRVPDPPaintColorSnippetSettings::PaintGroupSnippetMeshes' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintColorSnippetSettings, ColorSnippetDataAssetInfo) == 0x000198, "Member 'FRVPDPPaintColorSnippetSettings::ColorSnippetDataAssetInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPStoredColorSnippetInfo
// 0x0088 (0x0088 - 0x0000)
struct FRVPDPStoredColorSnippetInfo final
{
public:
	TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset> ColorSnippetDataAssetStoredOn;                     // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ObjectColorSnippetBelongsTo;                       // 0x0028(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPartOfAGroupSnippet;                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupSnippetID;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocationToGroupCenterPoint;                // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DotProductToGroupCenterPoint;                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPStoredColorSnippetInfo) == 0x000008, "Wrong alignment on FRVPDPStoredColorSnippetInfo");
static_assert(sizeof(FRVPDPStoredColorSnippetInfo) == 0x000088, "Wrong size on FRVPDPStoredColorSnippetInfo");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, ColorSnippetDataAssetStoredOn) == 0x000000, "Member 'FRVPDPStoredColorSnippetInfo::ColorSnippetDataAssetStoredOn' has a wrong offset!");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, ObjectColorSnippetBelongsTo) == 0x000028, "Member 'FRVPDPStoredColorSnippetInfo::ObjectColorSnippetBelongsTo' has a wrong offset!");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, IsPartOfAGroupSnippet) == 0x000050, "Member 'FRVPDPStoredColorSnippetInfo::IsPartOfAGroupSnippet' has a wrong offset!");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, GroupSnippetID) == 0x000058, "Member 'FRVPDPStoredColorSnippetInfo::GroupSnippetID' has a wrong offset!");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, RelativeLocationToGroupCenterPoint) == 0x000068, "Member 'FRVPDPStoredColorSnippetInfo::RelativeLocationToGroupCenterPoint' has a wrong offset!");
static_assert(offsetof(FRVPDPStoredColorSnippetInfo, DotProductToGroupCenterPoint) == 0x000080, "Member 'FRVPDPStoredColorSnippetInfo::DotProductToGroupCenterPoint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPLerpVertexColorToTargetSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPLerpVertexColorToTargetSettings final
{
public:
	bool                                          LerpToTarget;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpStrength;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPLerpVertexColorToTargetSettings) == 0x000004, "Wrong alignment on FRVPDPLerpVertexColorToTargetSettings");
static_assert(sizeof(FRVPDPLerpVertexColorToTargetSettings) == 0x00000C, "Wrong size on FRVPDPLerpVertexColorToTargetSettings");
static_assert(offsetof(FRVPDPLerpVertexColorToTargetSettings, LerpToTarget) == 0x000000, "Member 'FRVPDPLerpVertexColorToTargetSettings::LerpToTarget' has a wrong offset!");
static_assert(offsetof(FRVPDPLerpVertexColorToTargetSettings, TargetValue) == 0x000004, "Member 'FRVPDPLerpVertexColorToTargetSettings::TargetValue' has a wrong offset!");
static_assert(offsetof(FRVPDPLerpVertexColorToTargetSettings, LerpStrength) == 0x000008, "Member 'FRVPDPLerpVertexColorToTargetSettings::LerpStrength' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintConditionBase
// 0x0008 (0x0008 - 0x0000)
struct FRVPDPPaintConditionBase
{
public:
	float                                         ColorStrengthIfThisConditionIsNotMet;              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyVertexColorSetting                      SettingIfConditionIsNotMet;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPaintConditionBase) == 0x000004, "Wrong alignment on FRVPDPPaintConditionBase");
static_assert(sizeof(FRVPDPPaintConditionBase) == 0x000008, "Wrong size on FRVPDPPaintConditionBase");
static_assert(offsetof(FRVPDPPaintConditionBase, ColorStrengthIfThisConditionIsNotMet) == 0x000000, "Member 'FRVPDPPaintConditionBase::ColorStrengthIfThisConditionIsNotMet' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionBase, SettingIfConditionIsNotMet) == 0x000004, "Member 'FRVPDPPaintConditionBase::SettingIfConditionIsNotMet' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings
// 0x0028 (0x0030 - 0x0008)
struct FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	struct FVector                                DirectionToCheckAgainst;                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDotProductToDirectionRequired;                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GetDirectionFromActorRotation;                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings) == 0x000030, "Wrong size on FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings, DirectionToCheckAgainst) == 0x000008, "Member 'FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings::DirectionToCheckAgainst' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings, MinDotProductToDirectionRequired) == 0x000020, "Member 'FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings::MinDotProductToDirectionRequired' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings, GetDirectionFromActorRotation) == 0x000028, "Member 'FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings::GetDirectionFromActorRotation' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexDirectionTowardLocationPaintConditionSettings
// 0x0028 (0x0030 - 0x0008)
struct FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDotProductToActorOrLocation;                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings) == 0x000030, "Wrong size on FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings, Actor) == 0x000008, "Member 'FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings::Actor' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings, Location) == 0x000010, "Member 'FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings::Location' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings, MinDotProductToActorOrLocation) == 0x000028, "Member 'FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings::MinDotProductToActorOrLocation' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings
// 0x0040 (0x0048 - 0x0008)
struct FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDotProductToDirection;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings) == 0x000048, "Wrong size on FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings, Actor) == 0x000008, "Member 'FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings::Actor' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings, Location) == 0x000010, "Member 'FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings::Location' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings, Direction) == 0x000028, "Member 'FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings::Direction' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings, MinDotProductToDirection) == 0x000040, "Member 'FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings::MinDotProductToDirection' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings
// 0x0008 (0x0010 - 0x0008)
struct FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	float                                         IfVertexIsAboveOrBelowWorldZ;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckIfAboveInsteadOfBelowZ;                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings) == 0x000004, "Wrong alignment on FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings) == 0x000010, "Wrong size on FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings, IfVertexIsAboveOrBelowWorldZ) == 0x000008, "Member 'FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings::IfVertexIsAboveOrBelowWorldZ' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings, CheckIfAboveInsteadOfBelowZ) == 0x00000C, "Member 'FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings::CheckIfAboveInsteadOfBelowZ' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexColorWithinColorRangePaintConditionSettings
// 0x0010 (0x0018 - 0x0008)
struct FRVPDPIsVertexColorWithinColorRangePaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	EPhysicalSurface                              IfChannelWithPhysicsSurfaceIsWithinColorRange;     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceAtChannel                             IfVertexColorChannelWithinColorRange;              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IfCurrentVertexColorValueIsHigherOrEqualThan;      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IfCurrentVertexColorValueIsLessOrEqualThan;        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings) == 0x000004, "Wrong alignment on FRVPDPIsVertexColorWithinColorRangePaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings) == 0x000018, "Wrong size on FRVPDPIsVertexColorWithinColorRangePaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings, IfChannelWithPhysicsSurfaceIsWithinColorRange) == 0x000008, "Member 'FRVPDPIsVertexColorWithinColorRangePaintConditionSettings::IfChannelWithPhysicsSurfaceIsWithinColorRange' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings, IfVertexColorChannelWithinColorRange) == 0x000009, "Member 'FRVPDPIsVertexColorWithinColorRangePaintConditionSettings::IfVertexColorChannelWithinColorRange' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings, IfCurrentVertexColorValueIsHigherOrEqualThan) == 0x00000C, "Member 'FRVPDPIsVertexColorWithinColorRangePaintConditionSettings::IfCurrentVertexColorValueIsHigherOrEqualThan' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexColorWithinColorRangePaintConditionSettings, IfCurrentVertexColorValueIsLessOrEqualThan) == 0x000010, "Member 'FRVPDPIsVertexColorWithinColorRangePaintConditionSettings::IfCurrentVertexColorValueIsLessOrEqualThan' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexOnBonePaintConditionSettings
// 0x000C (0x0014 - 0x0008)
struct FRVPDPIsVertexOnBonePaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	class FName                                   IfVertexIsAtBone;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBoneWeight;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPIsVertexOnBonePaintConditionSettings) == 0x000004, "Wrong alignment on FRVPDPIsVertexOnBonePaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexOnBonePaintConditionSettings) == 0x000014, "Wrong size on FRVPDPIsVertexOnBonePaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexOnBonePaintConditionSettings, IfVertexIsAtBone) == 0x000008, "Member 'FRVPDPIsVertexOnBonePaintConditionSettings::IfVertexIsAtBone' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexOnBonePaintConditionSettings, MinBoneWeight) == 0x000010, "Member 'FRVPDPIsVertexOnBonePaintConditionSettings::MinBoneWeight' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPIsVertexOnMaterialPaintConditionSettings
// 0x0018 (0x0020 - 0x0008)
struct FRVPDPIsVertexOnMaterialPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	class UMaterialInterface*                     IfVertexIsOnMaterial;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     IfVertexIsOnMaterialParent;                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckMaterialParents;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPIsVertexOnMaterialPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPIsVertexOnMaterialPaintConditionSettings");
static_assert(sizeof(FRVPDPIsVertexOnMaterialPaintConditionSettings) == 0x000020, "Wrong size on FRVPDPIsVertexOnMaterialPaintConditionSettings");
static_assert(offsetof(FRVPDPIsVertexOnMaterialPaintConditionSettings, IfVertexIsOnMaterial) == 0x000008, "Member 'FRVPDPIsVertexOnMaterialPaintConditionSettings::IfVertexIsOnMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexOnMaterialPaintConditionSettings, IfVertexIsOnMaterialParent) == 0x000010, "Member 'FRVPDPIsVertexOnMaterialPaintConditionSettings::IfVertexIsOnMaterialParent' has a wrong offset!");
static_assert(offsetof(FRVPDPIsVertexOnMaterialPaintConditionSettings, CheckMaterialParents) == 0x000018, "Member 'FRVPDPIsVertexOnMaterialPaintConditionSettings::CheckMaterialParents' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPDoesVertexHasLineOfSightPaintConditionSettings
// 0x00E0 (0x00E8 - 0x0008)
struct FRVPDPDoesVertexHasLineOfSightPaintConditionSettings final : public FRVPDPPaintConditionBase
{
public:
	class AActor*                                 IfVertexHasLineOfSightToActor;                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IfVertexHasLineOfSightToPosition;                  // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromVertexPositionToStartTrace;            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CheckLineOfSightAgainstObjectTypes;                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TraceForComplex;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LineOfSightTraceActorsToIgnore;                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            LineOfSightTraceMeshComponentsToIgnore;            // 0x0058(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x80];                                      // 0x0068(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPDoesVertexHasLineOfSightPaintConditionSettings");
static_assert(sizeof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings) == 0x0000E8, "Wrong size on FRVPDPDoesVertexHasLineOfSightPaintConditionSettings");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, IfVertexHasLineOfSightToActor) == 0x000008, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::IfVertexHasLineOfSightToActor' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, IfVertexHasLineOfSightToPosition) == 0x000010, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::IfVertexHasLineOfSightToPosition' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, DistanceFromVertexPositionToStartTrace) == 0x000028, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::DistanceFromVertexPositionToStartTrace' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, CheckLineOfSightAgainstObjectTypes) == 0x000030, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::CheckLineOfSightAgainstObjectTypes' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, TraceForComplex) == 0x000040, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::TraceForComplex' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, LineOfSightTraceActorsToIgnore) == 0x000048, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::LineOfSightTraceActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FRVPDPDoesVertexHasLineOfSightPaintConditionSettings, LineOfSightTraceMeshComponentsToIgnore) == 0x000058, "Member 'FRVPDPDoesVertexHasLineOfSightPaintConditionSettings::LineOfSightTraceMeshComponentsToIgnore' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintConditionSettings
// 0x0080 (0x0080 - 0x0000)
struct FRVPDPPaintConditionSettings final
{
public:
	TArray<struct FRVPDPIsVertexNormalWithinDotToDirectionPaintConditionSettings> IsVertexNormalWithinDotToDirection;                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexDirectionTowardLocationPaintConditionSettings> OnlyAffectVerticesWithDirectionToActorOrLocation;  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexWithinDirectionFromLocationPaintConditionSettings> OnlyAffectVerticesWithinDirectionFromActorOrLocation; // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexAboveOrBelowWorldZPaintConditionSettings> IfVertexIsAboveOrBelowWorldZ;                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexColorWithinColorRangePaintConditionSettings> IfVertexColorIsWithinRange;                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexOnBonePaintConditionSettings> IfVertexIsOnBone;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPIsVertexOnMaterialPaintConditionSettings> IfVertexIsOnMaterial;                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRVPDPDoesVertexHasLineOfSightPaintConditionSettings> IfVertexHasLineOfSightTo;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintConditionSettings) == 0x000008, "Wrong alignment on FRVPDPPaintConditionSettings");
static_assert(sizeof(FRVPDPPaintConditionSettings) == 0x000080, "Wrong size on FRVPDPPaintConditionSettings");
static_assert(offsetof(FRVPDPPaintConditionSettings, IsVertexNormalWithinDotToDirection) == 0x000000, "Member 'FRVPDPPaintConditionSettings::IsVertexNormalWithinDotToDirection' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, OnlyAffectVerticesWithDirectionToActorOrLocation) == 0x000010, "Member 'FRVPDPPaintConditionSettings::OnlyAffectVerticesWithDirectionToActorOrLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, OnlyAffectVerticesWithinDirectionFromActorOrLocation) == 0x000020, "Member 'FRVPDPPaintConditionSettings::OnlyAffectVerticesWithinDirectionFromActorOrLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, IfVertexIsAboveOrBelowWorldZ) == 0x000030, "Member 'FRVPDPPaintConditionSettings::IfVertexIsAboveOrBelowWorldZ' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, IfVertexColorIsWithinRange) == 0x000040, "Member 'FRVPDPPaintConditionSettings::IfVertexColorIsWithinRange' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, IfVertexIsOnBone) == 0x000050, "Member 'FRVPDPPaintConditionSettings::IfVertexIsOnBone' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, IfVertexIsOnMaterial) == 0x000060, "Member 'FRVPDPPaintConditionSettings::IfVertexIsOnMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintConditionSettings, IfVertexHasLineOfSightTo) == 0x000070, "Member 'FRVPDPPaintConditionSettings::IfVertexHasLineOfSightTo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPhysicsSurfaceToApplySettings
// 0x00A8 (0x00A8 - 0x0000)
struct FRVPDPPhysicsSurfaceToApplySettings final
{
public:
	EPhysicalSurface                              SurfaceToApply;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrengthToApply;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyVertexColorSetting                      SettingToApplyWith;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPPaintConditionSettings           PaintConditions;                                   // 0x0010(0x0080)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPLerpVertexColorToTargetSettings  LerpPhysicsSurfaceToTarget;                        // 0x0090(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPPaintLimitSettings               SurfacePaintLimit;                                 // 0x009C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPhysicsSurfaceToApplySettings) == 0x000008, "Wrong alignment on FRVPDPPhysicsSurfaceToApplySettings");
static_assert(sizeof(FRVPDPPhysicsSurfaceToApplySettings) == 0x0000A8, "Wrong size on FRVPDPPhysicsSurfaceToApplySettings");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, SurfaceToApply) == 0x000000, "Member 'FRVPDPPhysicsSurfaceToApplySettings::SurfaceToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, StrengthToApply) == 0x000004, "Member 'FRVPDPPhysicsSurfaceToApplySettings::StrengthToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, SettingToApplyWith) == 0x000008, "Member 'FRVPDPPhysicsSurfaceToApplySettings::SettingToApplyWith' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, PaintConditions) == 0x000010, "Member 'FRVPDPPhysicsSurfaceToApplySettings::PaintConditions' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, LerpPhysicsSurfaceToTarget) == 0x000090, "Member 'FRVPDPPhysicsSurfaceToApplySettings::LerpPhysicsSurfaceToTarget' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceToApplySettings, SurfacePaintLimit) == 0x00009C, "Member 'FRVPDPPhysicsSurfaceToApplySettings::SurfacePaintLimit' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPApplyColorsUsingPhysicsSurfaceSettings
// 0x0020 (0x0020 - 0x0000)
struct FRVPDPApplyColorsUsingPhysicsSurfaceSettings final
{
public:
	bool                                          ApplyVertexColorUsingPhysicsSurface;               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPPhysicsSurfaceToApplySettings> PhysicalSurfacesToApply;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         StrengtOnChannelsWithoutThePhysicsSurfaces;        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyVertexColorSetting                      ApplyWithSettingOnChannelsWithoutThePhysicsSurface; // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings) == 0x000008, "Wrong alignment on FRVPDPApplyColorsUsingPhysicsSurfaceSettings");
static_assert(sizeof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings) == 0x000020, "Wrong size on FRVPDPApplyColorsUsingPhysicsSurfaceSettings");
static_assert(offsetof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings, ApplyVertexColorUsingPhysicsSurface) == 0x000000, "Member 'FRVPDPApplyColorsUsingPhysicsSurfaceSettings::ApplyVertexColorUsingPhysicsSurface' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings, PhysicalSurfacesToApply) == 0x000008, "Member 'FRVPDPApplyColorsUsingPhysicsSurfaceSettings::PhysicalSurfacesToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings, StrengtOnChannelsWithoutThePhysicsSurfaces) == 0x000018, "Member 'FRVPDPApplyColorsUsingPhysicsSurfaceSettings::StrengtOnChannelsWithoutThePhysicsSurfaces' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingPhysicsSurfaceSettings, ApplyWithSettingOnChannelsWithoutThePhysicsSurface) == 0x00001C, "Member 'FRVPDPApplyColorsUsingPhysicsSurfaceSettings::ApplyWithSettingOnChannelsWithoutThePhysicsSurface' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPApplyColorsUsingVertexChannelSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FRVPDPApplyColorsUsingVertexChannelSettings final
{
public:
	float                                         AmountToApply;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPLerpVertexColorToTargetSettings  LerpVertexColorToTarget;                           // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EApplyVertexColorSetting                      ApplyWithSetting;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPPaintConditionSettings           PaintConditions;                                   // 0x0018(0x0080)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPPaintLimitSettings               PaintLimit;                                        // 0x0098(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPApplyColorsUsingVertexChannelSettings) == 0x000008, "Wrong alignment on FRVPDPApplyColorsUsingVertexChannelSettings");
static_assert(sizeof(FRVPDPApplyColorsUsingVertexChannelSettings) == 0x0000A8, "Wrong size on FRVPDPApplyColorsUsingVertexChannelSettings");
static_assert(offsetof(FRVPDPApplyColorsUsingVertexChannelSettings, AmountToApply) == 0x000000, "Member 'FRVPDPApplyColorsUsingVertexChannelSettings::AmountToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingVertexChannelSettings, LerpVertexColorToTarget) == 0x000004, "Member 'FRVPDPApplyColorsUsingVertexChannelSettings::LerpVertexColorToTarget' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingVertexChannelSettings, ApplyWithSetting) == 0x000010, "Member 'FRVPDPApplyColorsUsingVertexChannelSettings::ApplyWithSetting' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingVertexChannelSettings, PaintConditions) == 0x000018, "Member 'FRVPDPApplyColorsUsingVertexChannelSettings::PaintConditions' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorsUsingVertexChannelSettings, PaintLimit) == 0x000098, "Member 'FRVPDPApplyColorsUsingVertexChannelSettings::PaintLimit' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAdjustPaintStrengthToDeltaTimeSettings
// 0x000C (0x000C - 0x0000)
struct FRVPDPAdjustPaintStrengthToDeltaTimeSettings final
{
public:
	bool                                          AdjustPaintStrengthsToDeltaTime;                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTimeToAdjustTo;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFPS;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPAdjustPaintStrengthToDeltaTimeSettings) == 0x000004, "Wrong alignment on FRVPDPAdjustPaintStrengthToDeltaTimeSettings");
static_assert(sizeof(FRVPDPAdjustPaintStrengthToDeltaTimeSettings) == 0x00000C, "Wrong size on FRVPDPAdjustPaintStrengthToDeltaTimeSettings");
static_assert(offsetof(FRVPDPAdjustPaintStrengthToDeltaTimeSettings, AdjustPaintStrengthsToDeltaTime) == 0x000000, "Member 'FRVPDPAdjustPaintStrengthToDeltaTimeSettings::AdjustPaintStrengthsToDeltaTime' has a wrong offset!");
static_assert(offsetof(FRVPDPAdjustPaintStrengthToDeltaTimeSettings, DeltaTimeToAdjustTo) == 0x000004, "Member 'FRVPDPAdjustPaintStrengthToDeltaTimeSettings::DeltaTimeToAdjustTo' has a wrong offset!");
static_assert(offsetof(FRVPDPAdjustPaintStrengthToDeltaTimeSettings, TargetFPS) == 0x000008, "Member 'FRVPDPAdjustPaintStrengthToDeltaTimeSettings::TargetFPS' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPApplyColorSettings
// 0x02D0 (0x02D0 - 0x0000)
struct FRVPDPApplyColorSettings final
{
public:
	struct FRVPDPApplyColorsUsingPhysicsSurfaceSettings ApplyColorsUsingPhysicsSurface;                    // 0x0000(0x0020)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPApplyColorsUsingVertexChannelSettings ApplyColorsOnRedChannel;                           // 0x0020(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPApplyColorsUsingVertexChannelSettings ApplyColorsOnGreenChannel;                         // 0x00C8(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPApplyColorsUsingVertexChannelSettings ApplyColorsOnBlueChannel;                          // 0x0170(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPApplyColorsUsingVertexChannelSettings ApplyColorsOnAlphaChannel;                         // 0x0218(0x00A8)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRVPDPAdjustPaintStrengthToDeltaTimeSettings AdjustPaintStrengthToDeltaTimeSettings;            // 0x02C0(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPApplyColorSettings) == 0x000008, "Wrong alignment on FRVPDPApplyColorSettings");
static_assert(sizeof(FRVPDPApplyColorSettings) == 0x0002D0, "Wrong size on FRVPDPApplyColorSettings");
static_assert(offsetof(FRVPDPApplyColorSettings, ApplyColorsUsingPhysicsSurface) == 0x000000, "Member 'FRVPDPApplyColorSettings::ApplyColorsUsingPhysicsSurface' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorSettings, ApplyColorsOnRedChannel) == 0x000020, "Member 'FRVPDPApplyColorSettings::ApplyColorsOnRedChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorSettings, ApplyColorsOnGreenChannel) == 0x0000C8, "Member 'FRVPDPApplyColorSettings::ApplyColorsOnGreenChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorSettings, ApplyColorsOnBlueChannel) == 0x000170, "Member 'FRVPDPApplyColorSettings::ApplyColorsOnBlueChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorSettings, ApplyColorsOnAlphaChannel) == 0x000218, "Member 'FRVPDPApplyColorSettings::ApplyColorsOnAlphaChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPApplyColorSettings, AdjustPaintStrengthToDeltaTimeSettings) == 0x0002C0, "Member 'FRVPDPApplyColorSettings::AdjustPaintStrengthToDeltaTimeSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPApplyColorSetting
// 0x02D0 (0x0418 - 0x0148)
struct FRVPDPApplyColorSetting : public FRVPDPPaintTaskSettings
{
public:
	struct FRVPDPApplyColorSettings               ApplyVertexColorSettings;                          // 0x0148(0x02D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPApplyColorSetting) == 0x000008, "Wrong alignment on FRVPDPApplyColorSetting");
static_assert(sizeof(FRVPDPApplyColorSetting) == 0x000418, "Wrong size on FRVPDPApplyColorSetting");
static_assert(offsetof(FRVPDPApplyColorSetting, ApplyVertexColorSettings) == 0x000148, "Member 'FRVPDPApplyColorSetting::ApplyVertexColorSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPVertexPaintFallOffSettings
// 0x0014 (0x0014 - 0x0000)
struct FRVPDPVertexPaintFallOffSettings
{
public:
	float                                         FallOffStrength;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFRVPDPStartFallOffDistanceFromSetting        StartFallOffDistanceFrom;                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToStartFallOffFrom;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LimitFallOffColor;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorLimitAtFallOffEdge;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPVertexPaintFallOffSettings) == 0x000004, "Wrong alignment on FRVPDPVertexPaintFallOffSettings");
static_assert(sizeof(FRVPDPVertexPaintFallOffSettings) == 0x000014, "Wrong size on FRVPDPVertexPaintFallOffSettings");
static_assert(offsetof(FRVPDPVertexPaintFallOffSettings, FallOffStrength) == 0x000000, "Member 'FRVPDPVertexPaintFallOffSettings::FallOffStrength' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexPaintFallOffSettings, StartFallOffDistanceFrom) == 0x000004, "Member 'FRVPDPVertexPaintFallOffSettings::StartFallOffDistanceFrom' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexPaintFallOffSettings, DistanceToStartFallOffFrom) == 0x000008, "Member 'FRVPDPVertexPaintFallOffSettings::DistanceToStartFallOffFrom' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexPaintFallOffSettings, LimitFallOffColor) == 0x00000C, "Member 'FRVPDPVertexPaintFallOffSettings::LimitFallOffColor' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexPaintFallOffSettings, ColorLimitAtFallOffEdge) == 0x000010, "Member 'FRVPDPVertexPaintFallOffSettings::ColorLimitAtFallOffEdge' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintAtLocationFallOffSettings
// 0x0004 (0x0018 - 0x0014)
struct FRVPDPPaintAtLocationFallOffSettings final : public FRVPDPVertexPaintFallOffSettings
{
public:
	EVertexPaintAtLocationFallOffType             PaintAtLocationFallOffType;                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPaintAtLocationFallOffSettings) == 0x000004, "Wrong alignment on FRVPDPPaintAtLocationFallOffSettings");
static_assert(sizeof(FRVPDPPaintAtLocationFallOffSettings) == 0x000018, "Wrong size on FRVPDPPaintAtLocationFallOffSettings");
static_assert(offsetof(FRVPDPPaintAtLocationFallOffSettings, PaintAtLocationFallOffType) == 0x000014, "Member 'FRVPDPPaintAtLocationFallOffSettings::PaintAtLocationFallOffType' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintAtLocationAreaOfEffectSettings
// 0x0048 (0x0048 - 0x0000)
struct FRVPDPPaintAtLocationAreaOfEffectSettings final
{
public:
	float                                         AreaOfEffectRangeStart;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaOfEffectRangeEnd;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationFallOffSettings   FallOffSettings;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPGetAverageColorSettings          GetAverageColorAfterApplyingColorSettings;         // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SpecificBonesToPaint;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPaintAtLocationAreaOfEffectSettings) == 0x000008, "Wrong alignment on FRVPDPPaintAtLocationAreaOfEffectSettings");
static_assert(sizeof(FRVPDPPaintAtLocationAreaOfEffectSettings) == 0x000048, "Wrong size on FRVPDPPaintAtLocationAreaOfEffectSettings");
static_assert(offsetof(FRVPDPPaintAtLocationAreaOfEffectSettings, AreaOfEffectRangeStart) == 0x000000, "Member 'FRVPDPPaintAtLocationAreaOfEffectSettings::AreaOfEffectRangeStart' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationAreaOfEffectSettings, AreaOfEffectRangeEnd) == 0x000004, "Member 'FRVPDPPaintAtLocationAreaOfEffectSettings::AreaOfEffectRangeEnd' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationAreaOfEffectSettings, FallOffSettings) == 0x000008, "Member 'FRVPDPPaintAtLocationAreaOfEffectSettings::FallOffSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationAreaOfEffectSettings, GetAverageColorAfterApplyingColorSettings) == 0x000020, "Member 'FRVPDPPaintAtLocationAreaOfEffectSettings::GetAverageColorAfterApplyingColorSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationAreaOfEffectSettings, SpecificBonesToPaint) == 0x000030, "Member 'FRVPDPPaintAtLocationAreaOfEffectSettings::SpecificBonesToPaint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPGetClosestVertexDataComboPaintAtLocationSettings
// 0x0078 (0x0078 - 0x0000)
struct FRVPDPGetClosestVertexDataComboPaintAtLocationSettings final
{
public:
	bool                                          RunGetClosestVertexDataOnMeshBeforeApplyingPaint;  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunGetClosestVertexDataOnMeshAfterApplyingPaint;   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPGetAverageColorSettings          GetAverageColorBeforeApplyingColorSettings;        // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseCustomHitSettings;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPAtLocationTasksSettings          CustomHitSettings;                                 // 0x0018(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings) == 0x000008, "Wrong alignment on FRVPDPGetClosestVertexDataComboPaintAtLocationSettings");
static_assert(sizeof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings) == 0x000078, "Wrong size on FRVPDPGetClosestVertexDataComboPaintAtLocationSettings");
static_assert(offsetof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings, RunGetClosestVertexDataOnMeshBeforeApplyingPaint) == 0x000000, "Member 'FRVPDPGetClosestVertexDataComboPaintAtLocationSettings::RunGetClosestVertexDataOnMeshBeforeApplyingPaint' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings, RunGetClosestVertexDataOnMeshAfterApplyingPaint) == 0x000001, "Member 'FRVPDPGetClosestVertexDataComboPaintAtLocationSettings::RunGetClosestVertexDataOnMeshAfterApplyingPaint' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings, GetAverageColorBeforeApplyingColorSettings) == 0x000004, "Member 'FRVPDPGetClosestVertexDataComboPaintAtLocationSettings::GetAverageColorBeforeApplyingColorSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings, UseCustomHitSettings) == 0x000010, "Member 'FRVPDPGetClosestVertexDataComboPaintAtLocationSettings::UseCustomHitSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPGetClosestVertexDataComboPaintAtLocationSettings, CustomHitSettings) == 0x000018, "Member 'FRVPDPGetClosestVertexDataComboPaintAtLocationSettings::CustomHitSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintAtLocationSettings
// 0x0130 (0x0548 - 0x0418)
struct FRVPDPPaintAtLocationSettings final : public FRVPDPApplyColorSetting
{
public:
	struct FRVPDPAtLocationTasksSettings          HitFundementals;                                   // 0x0418(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPPaintAtLocationAreaOfEffectSettings PaintAtAreaSettings;                               // 0x0478(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRVPDPEstimatedColorAtHitLocationSettings GetEstimatedColorAtHitLocationSettings;            // 0x04C0(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRVPDPGetClosestVertexDataComboPaintAtLocationSettings GetClosestVertexDataCombo;                         // 0x04D0(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintAtLocationSettings) == 0x000008, "Wrong alignment on FRVPDPPaintAtLocationSettings");
static_assert(sizeof(FRVPDPPaintAtLocationSettings) == 0x000548, "Wrong size on FRVPDPPaintAtLocationSettings");
static_assert(offsetof(FRVPDPPaintAtLocationSettings, HitFundementals) == 0x000418, "Member 'FRVPDPPaintAtLocationSettings::HitFundementals' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationSettings, PaintAtAreaSettings) == 0x000478, "Member 'FRVPDPPaintAtLocationSettings::PaintAtAreaSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationSettings, GetEstimatedColorAtHitLocationSettings) == 0x0004C0, "Member 'FRVPDPPaintAtLocationSettings::GetEstimatedColorAtHitLocationSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintAtLocationSettings, GetClosestVertexDataCombo) == 0x0004D0, "Member 'FRVPDPPaintAtLocationSettings::GetClosestVertexDataCombo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintOnEntireMeshAtRandomVerticesSettings
// 0x0040 (0x0040 - 0x0000)
struct FRVPDPPaintOnEntireMeshAtRandomVerticesSettings final
{
public:
	bool                                          PaintAtRandomVerticesSpreadOutOverTheEntireMesh;   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint; // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaintEntireMeshPropogateToLODsMethod         PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod; // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyRandomizeWithinAreaOfEffectAtLocation;         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OnlyRandomizeWithinAreaOfEffectAtLocation_AreaOfEffect; // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OnlyRandomizeWithinAreaOfEffectAtLocation_Location; // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnlyRandomizeWithinAreaOfEffectAtLocation_ProbabilityFactor; // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideRandomSeeds;                               // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          SeedToOverrideWith;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FRandomStream                          RandomSeedsUsedInPaintJob;                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings) == 0x000008, "Wrong alignment on FRVPDPPaintOnEntireMeshAtRandomVerticesSettings");
static_assert(sizeof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings) == 0x000040, "Wrong size on FRVPDPPaintOnEntireMeshAtRandomVerticesSettings");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, PaintAtRandomVerticesSpreadOutOverTheEntireMesh) == 0x000000, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::PaintAtRandomVerticesSpreadOutOverTheEntireMesh' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint) == 0x000004, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod) == 0x000008, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, OnlyRandomizeWithinAreaOfEffectAtLocation) == 0x000009, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::OnlyRandomizeWithinAreaOfEffectAtLocation' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, OnlyRandomizeWithinAreaOfEffectAtLocation_AreaOfEffect) == 0x00000C, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::OnlyRandomizeWithinAreaOfEffectAtLocation_AreaOfEffect' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, OnlyRandomizeWithinAreaOfEffectAtLocation_Location) == 0x000010, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::OnlyRandomizeWithinAreaOfEffectAtLocation_Location' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, OnlyRandomizeWithinAreaOfEffectAtLocation_ProbabilityFactor) == 0x000028, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::OnlyRandomizeWithinAreaOfEffectAtLocation_ProbabilityFactor' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, OverrideRandomSeeds) == 0x00002C, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::OverrideRandomSeeds' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, SeedToOverrideWith) == 0x000030, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::SeedToOverrideWith' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintOnEntireMeshAtRandomVerticesSettings, RandomSeedsUsedInPaintJob) == 0x000038, "Member 'FRVPDPPaintOnEntireMeshAtRandomVerticesSettings::RandomSeedsUsedInPaintJob' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintOnEntireMeshSettings
// 0x0040 (0x0458 - 0x0418)
struct FRVPDPPaintOnEntireMeshSettings final : public FRVPDPApplyColorSetting
{
public:
	struct FRVPDPPaintOnEntireMeshAtRandomVerticesSettings PaintOnRandomVerticesSettings;                     // 0x0418(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintOnEntireMeshSettings) == 0x000008, "Wrong alignment on FRVPDPPaintOnEntireMeshSettings");
static_assert(sizeof(FRVPDPPaintOnEntireMeshSettings) == 0x000458, "Wrong size on FRVPDPPaintOnEntireMeshSettings");
static_assert(offsetof(FRVPDPPaintOnEntireMeshSettings, PaintOnRandomVerticesSettings) == 0x000418, "Member 'FRVPDPPaintOnEntireMeshSettings::PaintOnRandomVerticesSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintWithinAreaFallOffSettings
// 0x0004 (0x0018 - 0x0014)
struct FRVPDPPaintWithinAreaFallOffSettings final : public FRVPDPVertexPaintFallOffSettings
{
public:
	EVertexPaintWithinAreaFallOffType             PaintWithinAreaFallOffType;                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPaintWithinAreaFallOffSettings) == 0x000004, "Wrong alignment on FRVPDPPaintWithinAreaFallOffSettings");
static_assert(sizeof(FRVPDPPaintWithinAreaFallOffSettings) == 0x000018, "Wrong size on FRVPDPPaintWithinAreaFallOffSettings");
static_assert(offsetof(FRVPDPPaintWithinAreaFallOffSettings, PaintWithinAreaFallOffType) == 0x000014, "Member 'FRVPDPPaintWithinAreaFallOffSettings::PaintWithinAreaFallOffType' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintSettingsOutsideOfArea
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPPaintSettingsOutsideOfArea final
{
public:
	float                                         RedVertexColorToApply;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GreenVertexColorToApply;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlueVertexColorToApply;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaVertexColorToApply;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintSettingsOutsideOfArea) == 0x000004, "Wrong alignment on FRVPDPPaintSettingsOutsideOfArea");
static_assert(sizeof(FRVPDPPaintSettingsOutsideOfArea) == 0x000010, "Wrong size on FRVPDPPaintSettingsOutsideOfArea");
static_assert(offsetof(FRVPDPPaintSettingsOutsideOfArea, RedVertexColorToApply) == 0x000000, "Member 'FRVPDPPaintSettingsOutsideOfArea::RedVertexColorToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintSettingsOutsideOfArea, GreenVertexColorToApply) == 0x000004, "Member 'FRVPDPPaintSettingsOutsideOfArea::GreenVertexColorToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintSettingsOutsideOfArea, BlueVertexColorToApply) == 0x000008, "Member 'FRVPDPPaintSettingsOutsideOfArea::BlueVertexColorToApply' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintSettingsOutsideOfArea, AlphaVertexColorToApply) == 0x00000C, "Member 'FRVPDPPaintSettingsOutsideOfArea::AlphaVertexColorToApply' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintWithinAreaSettings
// 0x0078 (0x0490 - 0x0418)
struct FRVPDPPaintWithinAreaSettings final : public FRVPDPApplyColorSetting
{
public:
	struct FRVPDPWithinAreaSettings               WithinAreaSettings;                                // 0x0418(0x0048)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          GetColorsWithinAreaCombo;                          // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraExtentToApplyPaintOn;                         // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRVPDPPaintWithinAreaFallOffSettings   FallOffSettings;                                   // 0x0468(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPPaintSettingsOutsideOfArea       ColorToApplyToVerticesOutsideOfArea;               // 0x0480(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintWithinAreaSettings) == 0x000008, "Wrong alignment on FRVPDPPaintWithinAreaSettings");
static_assert(sizeof(FRVPDPPaintWithinAreaSettings) == 0x000490, "Wrong size on FRVPDPPaintWithinAreaSettings");
static_assert(offsetof(FRVPDPPaintWithinAreaSettings, WithinAreaSettings) == 0x000418, "Member 'FRVPDPPaintWithinAreaSettings::WithinAreaSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintWithinAreaSettings, GetColorsWithinAreaCombo) == 0x000460, "Member 'FRVPDPPaintWithinAreaSettings::GetColorsWithinAreaCombo' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintWithinAreaSettings, ExtraExtentToApplyPaintOn) == 0x000464, "Member 'FRVPDPPaintWithinAreaSettings::ExtraExtentToApplyPaintOn' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintWithinAreaSettings, FallOffSettings) == 0x000468, "Member 'FRVPDPPaintWithinAreaSettings::FallOffSettings' has a wrong offset!");
static_assert(offsetof(FRVPDPPaintWithinAreaSettings, ColorToApplyToVerticesOutsideOfArea) == 0x000480, "Member 'FRVPDPPaintWithinAreaSettings::ColorToApplyToVerticesOutsideOfArea' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPAutoAddColorSettings
// 0x0318 (0x0318 - 0x0000)
struct alignas(0x08) FRVPDPAutoAddColorSettings final
{
public:
	bool                                          CanEverGetPaused;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBetweenTasks;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopAutoPaintingMeshIfFullyPainted;                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopAutoPaintingMeshIfCompletelyEmpty;             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyStartNewTaskIfChangeWasMadeByOwningPaintComponent; // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x30D];                                      // 0x000B(0x030D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPAutoAddColorSettings) == 0x000008, "Wrong alignment on FRVPDPAutoAddColorSettings");
static_assert(sizeof(FRVPDPAutoAddColorSettings) == 0x000318, "Wrong size on FRVPDPAutoAddColorSettings");
static_assert(offsetof(FRVPDPAutoAddColorSettings, CanEverGetPaused) == 0x000000, "Member 'FRVPDPAutoAddColorSettings::CanEverGetPaused' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoAddColorSettings, DelayBetweenTasks) == 0x000004, "Member 'FRVPDPAutoAddColorSettings::DelayBetweenTasks' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoAddColorSettings, StopAutoPaintingMeshIfFullyPainted) == 0x000008, "Member 'FRVPDPAutoAddColorSettings::StopAutoPaintingMeshIfFullyPainted' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoAddColorSettings, StopAutoPaintingMeshIfCompletelyEmpty) == 0x000009, "Member 'FRVPDPAutoAddColorSettings::StopAutoPaintingMeshIfCompletelyEmpty' has a wrong offset!");
static_assert(offsetof(FRVPDPAutoAddColorSettings, OnlyStartNewTaskIfChangeWasMadeByOwningPaintComponent) == 0x00000A, "Member 'FRVPDPAutoAddColorSettings::OnlyStartNewTaskIfChangeWasMadeByOwningPaintComponent' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPVertexChannelsChaosClothPhysicsSettings
// 0x0980 (0x0980 - 0x0000)
struct FRVPDPVertexChannelsChaosClothPhysicsSettings final
{
public:
	struct FRVPDPChaosClothPhysicsAtVertexColorChannelSettings ClothPhysicsSettingsAtRedChannel;                  // 0x0000(0x0260)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPChaosClothPhysicsAtVertexColorChannelSettings ClothPhysicsSettingsAtGreenChannel;                // 0x0260(0x0260)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPChaosClothPhysicsAtVertexColorChannelSettings ClothPhysicsSettingsAtBlueChannel;                 // 0x04C0(0x0260)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRVPDPChaosClothPhysicsAtVertexColorChannelSettings ClothPhysicsSettingsAtAlphaChannel;                // 0x0720(0x0260)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPVertexChannelsChaosClothPhysicsSettings) == 0x000008, "Wrong alignment on FRVPDPVertexChannelsChaosClothPhysicsSettings");
static_assert(sizeof(FRVPDPVertexChannelsChaosClothPhysicsSettings) == 0x000980, "Wrong size on FRVPDPVertexChannelsChaosClothPhysicsSettings");
static_assert(offsetof(FRVPDPVertexChannelsChaosClothPhysicsSettings, ClothPhysicsSettingsAtRedChannel) == 0x000000, "Member 'FRVPDPVertexChannelsChaosClothPhysicsSettings::ClothPhysicsSettingsAtRedChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexChannelsChaosClothPhysicsSettings, ClothPhysicsSettingsAtGreenChannel) == 0x000260, "Member 'FRVPDPVertexChannelsChaosClothPhysicsSettings::ClothPhysicsSettingsAtGreenChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexChannelsChaosClothPhysicsSettings, ClothPhysicsSettingsAtBlueChannel) == 0x0004C0, "Member 'FRVPDPVertexChannelsChaosClothPhysicsSettings::ClothPhysicsSettingsAtBlueChannel' has a wrong offset!");
static_assert(offsetof(FRVPDPVertexChannelsChaosClothPhysicsSettings, ClothPhysicsSettingsAtAlphaChannel) == 0x000720, "Member 'FRVPDPVertexChannelsChaosClothPhysicsSettings::ClothPhysicsSettingsAtAlphaChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPColorSnippetReferenceDataInfo
// 0x0050 (0x0050 - 0x0000)
struct FRVPDPColorSnippetReferenceDataInfo final
{
public:
	TMap<class FString, struct FRVPDPStoredColorSnippetInfo> ColorSnippetsStorageInfo;                          // 0x0000(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPColorSnippetReferenceDataInfo) == 0x000008, "Wrong alignment on FRVPDPColorSnippetReferenceDataInfo");
static_assert(sizeof(FRVPDPColorSnippetReferenceDataInfo) == 0x000050, "Wrong size on FRVPDPColorSnippetReferenceDataInfo");
static_assert(offsetof(FRVPDPColorSnippetReferenceDataInfo, ColorSnippetsStorageInfo) == 0x000000, "Member 'FRVPDPColorSnippetReferenceDataInfo::ColorSnippetsStorageInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPColorSnippetDataInfo
// 0x0038 (0x0038 - 0x0000)
struct FRVPDPColorSnippetDataInfo final
{
public:
	TSoftObjectPtr<class UObject>                 ObjectColorSnippetBelongsTo;                       // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectMeshDataPerLODStruct> ColorSnippetDataPerLOD;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPColorSnippetDataInfo) == 0x000008, "Wrong alignment on FRVPDPColorSnippetDataInfo");
static_assert(sizeof(FRVPDPColorSnippetDataInfo) == 0x000038, "Wrong size on FRVPDPColorSnippetDataInfo");
static_assert(offsetof(FRVPDPColorSnippetDataInfo, ObjectColorSnippetBelongsTo) == 0x000000, "Member 'FRVPDPColorSnippetDataInfo::ObjectColorSnippetBelongsTo' has a wrong offset!");
static_assert(offsetof(FRVPDPColorSnippetDataInfo, ColorSnippetDataPerLOD) == 0x000028, "Member 'FRVPDPColorSnippetDataInfo::ColorSnippetDataPerLOD' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPVertexColorChannels
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPVertexColorChannels final
{
public:
	TArray<EVertexColorChannel>                   VertexColorChannels;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPVertexColorChannels) == 0x000008, "Wrong alignment on FRVPDPVertexColorChannels");
static_assert(sizeof(FRVPDPVertexColorChannels) == 0x000010, "Wrong size on FRVPDPVertexColorChannels");
static_assert(offsetof(FRVPDPVertexColorChannels, VertexColorChannels) == 0x000000, "Member 'FRVPDPVertexColorChannels::VertexColorChannels' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintGroupSnippetSettings
// 0x0000 (0x01B0 - 0x01B0)
struct FRVPDPPaintGroupSnippetSettings final : public FRVPDPPaintColorSnippetSettings
{
};
static_assert(alignof(FRVPDPPaintGroupSnippetSettings) == 0x000008, "Wrong alignment on FRVPDPPaintGroupSnippetSettings");
static_assert(sizeof(FRVPDPPaintGroupSnippetSettings) == 0x0001B0, "Wrong size on FRVPDPPaintGroupSnippetSettings");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTaskQueueIDInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRVPDPTaskQueueIDInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPTaskQueueIDInfo) == 0x000008, "Wrong alignment on FRVPDPTaskQueueIDInfo");
static_assert(sizeof(FRVPDPTaskQueueIDInfo) == 0x000010, "Wrong size on FRVPDPTaskQueueIDInfo");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite
// 0x0108 (0x0108 - 0x0000)
struct FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite final
{
public:
	TArray<class FName>                           MeshBonesWithinTrace;                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FHitResult                             ClosestHitResultOfMesh;                            // 0x0010(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite) == 0x000008, "Wrong alignment on FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite");
static_assert(sizeof(FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite) == 0x000108, "Wrong size on FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite");
static_assert(offsetof(FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite, MeshBonesWithinTrace) == 0x000000, "Member 'FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite::MeshBonesWithinTrace' has a wrong offset!");
static_assert(offsetof(FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite, ClosestHitResultOfMesh) == 0x000010, "Member 'FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite::ClosestHitResultOfMesh' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPhysicsSurfaceBlendSettings
// 0x0040 (0x0040 - 0x0000)
struct FRVPDPPhysicsSurfaceBlendSettings final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      AssociatedMaterial;                                // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicsSurfacesThatCanBlend;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         MinAmountOnEachSurfaceToBeAbleToBlend;             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurfaceToResultIn;                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRVPDPPhysicsSurfaceBlendSettings) == 0x000008, "Wrong alignment on FRVPDPPhysicsSurfaceBlendSettings");
static_assert(sizeof(FRVPDPPhysicsSurfaceBlendSettings) == 0x000040, "Wrong size on FRVPDPPhysicsSurfaceBlendSettings");
static_assert(offsetof(FRVPDPPhysicsSurfaceBlendSettings, AssociatedMaterial) == 0x000000, "Member 'FRVPDPPhysicsSurfaceBlendSettings::AssociatedMaterial' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceBlendSettings, PhysicsSurfacesThatCanBlend) == 0x000028, "Member 'FRVPDPPhysicsSurfaceBlendSettings::PhysicsSurfacesThatCanBlend' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceBlendSettings, MinAmountOnEachSurfaceToBeAbleToBlend) == 0x000038, "Member 'FRVPDPPhysicsSurfaceBlendSettings::MinAmountOnEachSurfaceToBeAbleToBlend' has a wrong offset!");
static_assert(offsetof(FRVPDPPhysicsSurfaceBlendSettings, PhysicsSurfaceToResultIn) == 0x00003C, "Member 'FRVPDPPhysicsSurfaceBlendSettings::PhysicsSurfaceToResultIn' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPRegisteredMaterialSetting
// 0x0058 (0x0058 - 0x0000)
struct FRVPDPRegisteredMaterialSetting final
{
public:
	bool                                          IncludeDefaultChannelWhenDetecting;                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              AtDefault;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtRed;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtGreen;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtBlue;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtAlpha;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, struct FRVPDPPhysicsSurfaceBlendSettings> PhysicsSurfaceBlendingSettings;                    // 0x0008(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPRegisteredMaterialSetting) == 0x000008, "Wrong alignment on FRVPDPRegisteredMaterialSetting");
static_assert(sizeof(FRVPDPRegisteredMaterialSetting) == 0x000058, "Wrong size on FRVPDPRegisteredMaterialSetting");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, IncludeDefaultChannelWhenDetecting) == 0x000000, "Member 'FRVPDPRegisteredMaterialSetting::IncludeDefaultChannelWhenDetecting' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, AtDefault) == 0x000001, "Member 'FRVPDPRegisteredMaterialSetting::AtDefault' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, PaintedAtRed) == 0x000002, "Member 'FRVPDPRegisteredMaterialSetting::PaintedAtRed' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, PaintedAtGreen) == 0x000003, "Member 'FRVPDPRegisteredMaterialSetting::PaintedAtGreen' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, PaintedAtBlue) == 0x000004, "Member 'FRVPDPRegisteredMaterialSetting::PaintedAtBlue' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, PaintedAtAlpha) == 0x000005, "Member 'FRVPDPRegisteredMaterialSetting::PaintedAtAlpha' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredMaterialSetting, PhysicsSurfaceBlendingSettings) == 0x000008, "Member 'FRVPDPRegisteredMaterialSetting::PhysicsSurfaceBlendingSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPRegisteredPhysicsSurfacesSettings
// 0x0010 (0x0010 - 0x0000)
struct FRVPDPRegisteredPhysicsSurfacesSettings final
{
public:
	TArray<EPhysicalSurface>                      ChildSurfaces;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPRegisteredPhysicsSurfacesSettings) == 0x000008, "Wrong alignment on FRVPDPRegisteredPhysicsSurfacesSettings");
static_assert(sizeof(FRVPDPRegisteredPhysicsSurfacesSettings) == 0x000010, "Wrong size on FRVPDPRegisteredPhysicsSurfacesSettings");
static_assert(offsetof(FRVPDPRegisteredPhysicsSurfacesSettings, ChildSurfaces) == 0x000000, "Member 'FRVPDPRegisteredPhysicsSurfacesSettings::ChildSurfaces' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPPaintOnLODSettings
// 0x0004 (0x0004 - 0x0000)
struct FRVPDPPaintOnLODSettings final
{
public:
	int32                                         MaxAmountOfLODsToPaint;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPPaintOnLODSettings) == 0x000004, "Wrong alignment on FRVPDPPaintOnLODSettings");
static_assert(sizeof(FRVPDPPaintOnLODSettings) == 0x000004, "Wrong size on FRVPDPPaintOnLODSettings");
static_assert(offsetof(FRVPDPPaintOnLODSettings, MaxAmountOfLODsToPaint) == 0x000000, "Member 'FRVPDPPaintOnLODSettings::MaxAmountOfLODsToPaint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPSkeletalMeshBoneInfoPerLOD
// 0x0058 (0x0058 - 0x0000)
struct FRVPDPSkeletalMeshBoneInfoPerLOD final
{
public:
	int32                                         Lod;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FRVPDPSkeletalMeshSectionInfo> SkeletalMeshSectionInfo;                           // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPSkeletalMeshBoneInfoPerLOD) == 0x000008, "Wrong alignment on FRVPDPSkeletalMeshBoneInfoPerLOD");
static_assert(sizeof(FRVPDPSkeletalMeshBoneInfoPerLOD) == 0x000058, "Wrong size on FRVPDPSkeletalMeshBoneInfoPerLOD");
static_assert(offsetof(FRVPDPSkeletalMeshBoneInfoPerLOD, Lod) == 0x000000, "Member 'FRVPDPSkeletalMeshBoneInfoPerLOD::Lod' has a wrong offset!");
static_assert(offsetof(FRVPDPSkeletalMeshBoneInfoPerLOD, SkeletalMeshSectionInfo) == 0x000008, "Member 'FRVPDPSkeletalMeshBoneInfoPerLOD::SkeletalMeshSectionInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.RVPDPRegisteredSkeletalMeshInfo
// 0x0068 (0x0068 - 0x0000)
struct FRVPDPRegisteredSkeletalMeshInfo final
{
public:
	int32                                         TotalAmountsOfPaintableBonesWithCollision;         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRVPDPSkeletalMeshBoneInfoPerLOD> SkeletalMeshBoneInfoPerLOD;                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRVPDPSkeletalMeshBonesToIncludeInfo> SkeletalMeshBonesToInclude;                        // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRVPDPRegisteredSkeletalMeshInfo) == 0x000008, "Wrong alignment on FRVPDPRegisteredSkeletalMeshInfo");
static_assert(sizeof(FRVPDPRegisteredSkeletalMeshInfo) == 0x000068, "Wrong size on FRVPDPRegisteredSkeletalMeshInfo");
static_assert(offsetof(FRVPDPRegisteredSkeletalMeshInfo, TotalAmountsOfPaintableBonesWithCollision) == 0x000000, "Member 'FRVPDPRegisteredSkeletalMeshInfo::TotalAmountsOfPaintableBonesWithCollision' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredSkeletalMeshInfo, SkeletalMeshBoneInfoPerLOD) == 0x000008, "Member 'FRVPDPRegisteredSkeletalMeshInfo::SkeletalMeshBoneInfoPerLOD' has a wrong offset!");
static_assert(offsetof(FRVPDPRegisteredSkeletalMeshInfo, SkeletalMeshBonesToInclude) == 0x000018, "Member 'FRVPDPRegisteredSkeletalMeshInfo::SkeletalMeshBonesToInclude' has a wrong offset!");

}

