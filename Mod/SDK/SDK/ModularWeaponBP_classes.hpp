#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModularWeaponBP

#include "Basic.hpp"

#include "Enum_MaterialLayer_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GripType_Enum_structs.hpp"
#include "Enum_MaterialQuality_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SheathType_Enum_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "SwitchGrip_Type_Enum_structs.hpp"
#include "Enum_Weapon_Material_Type_structs.hpp"
#include "Str_WeaponParts_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ModularWeaponBP.ModularWeaponBP_C
// 0x08A0 (0x0B30 - 0x0290)
class AModularWeaponBP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Grip_L_Hand_Default_Pos;                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Grip_R_Hand_Default_Pos;                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SearchBeacon;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RuntimeVertexPaintAndDetectionComponent_C* BPC_RuntimeVertexPaintAndDetectionComponent;       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Grip_R_Hand_Alt_Pos;                               // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Grip_L_Hand_Alt_Pos;                               // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 GuardSk;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound_Slide;                                       // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Trace_Length_Top;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Trace_Length_Bottom;                               // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 GripSk;                                            // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root_Scene;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sub_Module_1_Mesh;                                 // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grip;                                              // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Grip_L_Hand_Off_Hand;                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Guard;                                             // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PommelSk;                                          // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HeadSk;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pommel;                                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SubModule_2_Mesh;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BaseMesh;                                          // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Collision_Component;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AWillie_BP_C*                           Parent_Actor;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EGripType_Enum                                Grip_R_Hand_Default;                               // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                Grip_L_Hand_Default;                               // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGripType_Enum                                Grip_Alternative;                                  // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Weapon_Velocity;                                   // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rigidity;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Edge_Sharpness;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        base;                                              // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Hit_Comp;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Hit_Bone_Name;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Point;                                      // 0x03A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stab_;                                             // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Stuck_Bones;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 Hit_Actor;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Double_Edged;                                      // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Normal_Impulse;                                    // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_Result;                                        // 0x0400(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        Cutting_Rate;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Normal;                                     // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Hit_Surface;                                       // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Edge_Alignment;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Edge_Direction;                                    // 0x0528(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                Tips;                                              // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class USceneComponent*                        Closest_Tip;                                       // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Tip_Sharpness;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tip_Alignment;                                     // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Impulse_Length;                               // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sliding;                                           // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Grip_Module;                                       // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AModular_Weapon_Grip_C*                 Spawned_Weapon_Parts;                              // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Dismemberment_Level_Sharp;                         // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dismemberment_Level_Blunt;                         // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Friendly_Fire_;                                    // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Piercing;                                          // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulates_Physics;                                 // 0x0592(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Just_Thrown;                                       // 0x0593(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Other_Actor;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        OffhandStr;                                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OffhandLimit;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Raw_Damage;                                        // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Thrust_Grip_Rate;                                  // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, Enum_MaterialLayer>               Module_Material_Groups;                            // 0x05C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Stab_Rate;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mat_Density;                                       // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weapon_Length;                                     // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length_to_Bottom;                                  // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Length_to_Top_R_Default;                           // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Threat_On;                                         // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Def_Rating;                                        // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stab_Chance_NPC;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Print_;                                            // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLinearColor>              Module_Color_Groups;                               // 0x0658(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        AI_Balance_Point__temp_;                           // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    Applied_Constraints_Array;                         // 0x06B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USceneComponent*>                Children_0;                                        // 0x06C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Box_Collision;                                     // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoStab;                                            // 0x06D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D2[0x6];                                      // 0x06D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Hit_Box_Collision;                                 // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            Collision_Components_Array;                        // 0x06E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Distance_To_Collision_Component;                   // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Jammed_Tip;                                        // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Nearest_Collisions_Jamming;                // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AltGrip1_Str;                                      // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AltGrip1_Limit;                                    // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AltGrip2_Str;                                      // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AltGrip2_Limit;                                    // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Weapon_Velocity_Old;                               // 0x0728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weapon_Velocity_Difference;                        // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sound_Woosh_Int;                                   // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sound_Woosh_Pitch;                                 // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sound_Woosh_Threshold;                             // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scabbard;                                          // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Last_Hit_Bone;                                     // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Hit_Power;                                    // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_1;                                           // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_2;                                           // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_3;                                           // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESheathType_Enum                              SheathSlot;                                        // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AConstraint_Weapon_Stuck_BP_C*>  Stuck_Constraints_Array;                           // 0x07B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Instant_Unsheath;                                  // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Icon;                                              // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 My_Class;                                          // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Search_Priority;                                   // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_MaterialQuality                          Quality;                                           // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Grip_Rate;                                         // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Collision;                                      // 0x07F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F1[0x3];                                      // 0x07F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NewVar;                                            // 0x07F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7FC[0x4];                                      // 0x07FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wound_Shape;                                       // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brush_Scale;                                       // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Just_Parried_Rate;                                 // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Just_Parried;                                      // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_819[0x7];                                      // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Draw_Cut_Rate;                                     // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mass_Adjust_Scale__Temp_;                          // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_Hand_Stamina_Burn_Rate;                          // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_Hand_Stamina_Burn_Rate;                          // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoH_Default_Stamina_Burn_Rate;                    // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoH_Alt_Stamina_Burn_Rate;                        // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESwitchGrip_Type_Enum                         Alt_Grip_Switch_Type;                              // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AI_Movement_Range;                                 // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length_to_Top_2H;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length_to_Top_Alt;                                 // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length_to_Top_L_Default;                           // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AI_Invincibility_Rate;                             // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Impact_Sound_Multiplier;                           // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shield;                                            // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Grip_Static_Mesh;                                  // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Loaded_From_Save;                                  // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_899[0x7];                                      // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Module_Head;                                       // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Module_Guard;                                      // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Module_Pommel;                                     // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Head_Size;                                         // 0x08B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Guard_Size;                                        // 0x08D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pommel_Size;                                       // 0x08E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Sub_Module_1_Class;                                // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Sub_Module_2_Class;                                // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USG_Weapon_Try_C*                       SG_Weap;                                           // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<Enum_Weapon_Material_Type, Enum_MaterialLayer> Module_Material_Groups_0;                          // 0x0918(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<Enum_Weapon_Material_Type, struct FLinearColor> Module_Color_Groups_0;                             // 0x0968(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Generated;                                         // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B9[0x7];                                      // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStr_WeaponParts                       Str_Weapon_Parts;                                  // 0x09C0(0x0130)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Int_Shield_COA;                                    // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hit_Component_is_Character;                        // 0x0AF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF5[0x3];                                      // 0x0AF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team;                                              // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Temp_Disable_Damage;                               // 0x0AFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AFD[0x3];                                      // 0x0AFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Kick_Power;                                        // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Box_Extent;                                        // 0x0B08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWillie_BP_C*                           Last_Parent;                                       // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Use_Alt_Against_Armor_Rate_NPC;                    // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__ModularWeaponBP_BaseMesh_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_Grip_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_Guard_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_Head_SubModule_1_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_Head_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_Pommel_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ModularWeaponBP_SubModule_2_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Clear_Stuck_Bone(class FName bone);
	void Collision_Hit(class UPrimitiveComponent* Hit_Component, class AActor* Other_Actor_0, const struct FVector& Normal_Impulse_0, const struct FHitResult& Hit);
	void ExecuteUbergraph_ModularWeaponBP(int32 EntryPoint);
	void GGAGA();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Collisions();
	void Release_All_Jammed_Bones();
	void Set_Up_Module(class UStaticMeshComponent* Part, class USkeletalMeshComponent* Part_Sk, class AModular_Weapon_Part_Master_C* Spawned_Part, class USceneComponent* Socket, class AModular_Weapon_Part_Master_C* Sub_Module_1, class AModular_Weapon_Part_Master_C* Sub_Module_2, class UStaticMesh* Part_Static_Mesh);
	void Sheathed_Mode();
	class AModular_Weapon_Part_Master_C* Spawn_Module(const struct FVector& Scale, class UClass* InputPin, class UClass* Sub_Module_I, class UClass* Sub_Module_II, class AModular_Weapon_Part_Master_C** Sub_Module_1, class AModular_Weapon_Part_Master_C** Sub_Module_2);
	void Temporary_Disable_Damage();
	void Turn_Off_Collision();
	void Turn_On_Collision();
	void Unsheathed_Mode();
	void UserConstructionScript();
	void Vertex_Paint();
	void Weapon_HIt(class UPrimitiveComponent* Hit_Component, const struct FVector& Weapon_Velocity_0, const struct FHitResult& Hit_Result_0, double EdgeAllignment_Dot, bool Laser_temp_, class UClass* Weapon);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ModularWeaponBP_C">();
	}
	static class AModularWeaponBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AModularWeaponBP_C>();
	}
};
static_assert(alignof(AModularWeaponBP_C) == 0x000008, "Wrong alignment on AModularWeaponBP_C");
static_assert(sizeof(AModularWeaponBP_C) == 0x000B30, "Wrong size on AModularWeaponBP_C");
static_assert(offsetof(AModularWeaponBP_C, UberGraphFrame) == 0x000290, "Member 'AModularWeaponBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_L_Hand_Default_Pos) == 0x000298, "Member 'AModularWeaponBP_C::Grip_L_Hand_Default_Pos' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_R_Hand_Default_Pos) == 0x0002A0, "Member 'AModularWeaponBP_C::Grip_R_Hand_Default_Pos' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, SearchBeacon) == 0x0002A8, "Member 'AModularWeaponBP_C::SearchBeacon' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, BPC_RuntimeVertexPaintAndDetectionComponent) == 0x0002B0, "Member 'AModularWeaponBP_C::BPC_RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_R_Hand_Alt_Pos) == 0x0002B8, "Member 'AModularWeaponBP_C::Grip_R_Hand_Alt_Pos' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_L_Hand_Alt_Pos) == 0x0002C0, "Member 'AModularWeaponBP_C::Grip_L_Hand_Alt_Pos' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, GuardSk) == 0x0002C8, "Member 'AModularWeaponBP_C::GuardSk' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sound_Slide) == 0x0002D0, "Member 'AModularWeaponBP_C::Sound_Slide' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Trace_Length_Top) == 0x0002D8, "Member 'AModularWeaponBP_C::Trace_Length_Top' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Trace_Length_Bottom) == 0x0002E0, "Member 'AModularWeaponBP_C::Trace_Length_Bottom' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, GripSk) == 0x0002E8, "Member 'AModularWeaponBP_C::GripSk' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Root_Scene) == 0x0002F0, "Member 'AModularWeaponBP_C::Root_Scene' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sub_Module_1_Mesh) == 0x0002F8, "Member 'AModularWeaponBP_C::Sub_Module_1_Mesh' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip) == 0x000300, "Member 'AModularWeaponBP_C::Grip' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Arrow) == 0x000308, "Member 'AModularWeaponBP_C::Arrow' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_L_Hand_Off_Hand) == 0x000310, "Member 'AModularWeaponBP_C::Grip_L_Hand_Off_Hand' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Head) == 0x000318, "Member 'AModularWeaponBP_C::Head' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Guard) == 0x000320, "Member 'AModularWeaponBP_C::Guard' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, PommelSk) == 0x000328, "Member 'AModularWeaponBP_C::PommelSk' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, HeadSk) == 0x000330, "Member 'AModularWeaponBP_C::HeadSk' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Pommel) == 0x000338, "Member 'AModularWeaponBP_C::Pommel' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, SubModule_2_Mesh) == 0x000340, "Member 'AModularWeaponBP_C::SubModule_2_Mesh' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, BaseMesh) == 0x000348, "Member 'AModularWeaponBP_C::BaseMesh' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Collision_Component) == 0x000350, "Member 'AModularWeaponBP_C::Collision_Component' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Parent_Actor) == 0x000358, "Member 'AModularWeaponBP_C::Parent_Actor' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_R_Hand_Default) == 0x000360, "Member 'AModularWeaponBP_C::Grip_R_Hand_Default' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_L_Hand_Default) == 0x000361, "Member 'AModularWeaponBP_C::Grip_L_Hand_Default' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_Alternative) == 0x000362, "Member 'AModularWeaponBP_C::Grip_Alternative' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Weapon_Velocity) == 0x000368, "Member 'AModularWeaponBP_C::Weapon_Velocity' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Rigidity) == 0x000380, "Member 'AModularWeaponBP_C::Rigidity' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Edge_Sharpness) == 0x000388, "Member 'AModularWeaponBP_C::Edge_Sharpness' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, base) == 0x000390, "Member 'AModularWeaponBP_C::base' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Comp) == 0x000398, "Member 'AModularWeaponBP_C::Hit_Comp' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Bone_Name) == 0x0003A0, "Member 'AModularWeaponBP_C::Hit_Bone_Name' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Impact_Point) == 0x0003A8, "Member 'AModularWeaponBP_C::Impact_Point' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Stab_) == 0x0003C0, "Member 'AModularWeaponBP_C::Stab_' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Stuck_Bones) == 0x0003C8, "Member 'AModularWeaponBP_C::Stuck_Bones' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Actor) == 0x0003D8, "Member 'AModularWeaponBP_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Double_Edged) == 0x0003E0, "Member 'AModularWeaponBP_C::Double_Edged' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Normal_Impulse) == 0x0003E8, "Member 'AModularWeaponBP_C::Normal_Impulse' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Result) == 0x000400, "Member 'AModularWeaponBP_C::Hit_Result' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Cutting_Rate) == 0x0004F8, "Member 'AModularWeaponBP_C::Cutting_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Impact_Normal) == 0x000500, "Member 'AModularWeaponBP_C::Impact_Normal' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Surface) == 0x000518, "Member 'AModularWeaponBP_C::Hit_Surface' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Edge_Alignment) == 0x000520, "Member 'AModularWeaponBP_C::Edge_Alignment' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Edge_Direction) == 0x000528, "Member 'AModularWeaponBP_C::Edge_Direction' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Tips) == 0x000540, "Member 'AModularWeaponBP_C::Tips' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Closest_Tip) == 0x000550, "Member 'AModularWeaponBP_C::Closest_Tip' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Tip_Sharpness) == 0x000558, "Member 'AModularWeaponBP_C::Tip_Sharpness' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Tip_Alignment) == 0x000560, "Member 'AModularWeaponBP_C::Tip_Alignment' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Last_Impulse_Length) == 0x000568, "Member 'AModularWeaponBP_C::Last_Impulse_Length' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sliding) == 0x000570, "Member 'AModularWeaponBP_C::Sliding' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_Module) == 0x000578, "Member 'AModularWeaponBP_C::Grip_Module' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Spawned_Weapon_Parts) == 0x000580, "Member 'AModularWeaponBP_C::Spawned_Weapon_Parts' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Dismemberment_Level_Sharp) == 0x000588, "Member 'AModularWeaponBP_C::Dismemberment_Level_Sharp' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Dismemberment_Level_Blunt) == 0x00058C, "Member 'AModularWeaponBP_C::Dismemberment_Level_Blunt' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Friendly_Fire_) == 0x000590, "Member 'AModularWeaponBP_C::Friendly_Fire_' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Piercing) == 0x000591, "Member 'AModularWeaponBP_C::Piercing' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Simulates_Physics) == 0x000592, "Member 'AModularWeaponBP_C::Simulates_Physics' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Just_Thrown) == 0x000593, "Member 'AModularWeaponBP_C::Just_Thrown' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Other_Actor) == 0x000598, "Member 'AModularWeaponBP_C::Other_Actor' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, OffhandStr) == 0x0005A0, "Member 'AModularWeaponBP_C::OffhandStr' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, OffhandLimit) == 0x0005A8, "Member 'AModularWeaponBP_C::OffhandLimit' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Raw_Damage) == 0x0005B0, "Member 'AModularWeaponBP_C::Raw_Damage' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Thrust_Grip_Rate) == 0x0005B8, "Member 'AModularWeaponBP_C::Thrust_Grip_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Material_Groups) == 0x0005C0, "Member 'AModularWeaponBP_C::Module_Material_Groups' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Stab_Rate) == 0x000610, "Member 'AModularWeaponBP_C::Stab_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Mat_Density) == 0x000618, "Member 'AModularWeaponBP_C::Mat_Density' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Weapon_Length) == 0x000620, "Member 'AModularWeaponBP_C::Weapon_Length' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Length_to_Bottom) == 0x000628, "Member 'AModularWeaponBP_C::Length_to_Bottom' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Length_to_Top_R_Default) == 0x000630, "Member 'AModularWeaponBP_C::Length_to_Top_R_Default' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Threat_On) == 0x000638, "Member 'AModularWeaponBP_C::Threat_On' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Def_Rating) == 0x000640, "Member 'AModularWeaponBP_C::Def_Rating' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Stab_Chance_NPC) == 0x000648, "Member 'AModularWeaponBP_C::Stab_Chance_NPC' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Print_) == 0x000650, "Member 'AModularWeaponBP_C::Print_' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Color_Groups) == 0x000658, "Member 'AModularWeaponBP_C::Module_Color_Groups' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AI_Balance_Point__temp_) == 0x0006A8, "Member 'AModularWeaponBP_C::AI_Balance_Point__temp_' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Applied_Constraints_Array) == 0x0006B0, "Member 'AModularWeaponBP_C::Applied_Constraints_Array' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Children_0) == 0x0006C0, "Member 'AModularWeaponBP_C::Children_0' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Box_Collision) == 0x0006D0, "Member 'AModularWeaponBP_C::Box_Collision' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, NoStab) == 0x0006D1, "Member 'AModularWeaponBP_C::NoStab' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Box_Collision) == 0x0006D8, "Member 'AModularWeaponBP_C::Hit_Box_Collision' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Collision_Components_Array) == 0x0006E0, "Member 'AModularWeaponBP_C::Collision_Components_Array' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Distance_To_Collision_Component) == 0x0006F0, "Member 'AModularWeaponBP_C::Distance_To_Collision_Component' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Jammed_Tip) == 0x0006F8, "Member 'AModularWeaponBP_C::Jammed_Tip' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Disable_Nearest_Collisions_Jamming) == 0x000700, "Member 'AModularWeaponBP_C::Disable_Nearest_Collisions_Jamming' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AltGrip1_Str) == 0x000708, "Member 'AModularWeaponBP_C::AltGrip1_Str' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AltGrip1_Limit) == 0x000710, "Member 'AModularWeaponBP_C::AltGrip1_Limit' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AltGrip2_Str) == 0x000718, "Member 'AModularWeaponBP_C::AltGrip2_Str' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AltGrip2_Limit) == 0x000720, "Member 'AModularWeaponBP_C::AltGrip2_Limit' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Weapon_Velocity_Old) == 0x000728, "Member 'AModularWeaponBP_C::Weapon_Velocity_Old' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Weapon_Velocity_Difference) == 0x000740, "Member 'AModularWeaponBP_C::Weapon_Velocity_Difference' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sound_Woosh_Int) == 0x000748, "Member 'AModularWeaponBP_C::Sound_Woosh_Int' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sound_Woosh_Pitch) == 0x000750, "Member 'AModularWeaponBP_C::Sound_Woosh_Pitch' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sound_Woosh_Threshold) == 0x000758, "Member 'AModularWeaponBP_C::Sound_Woosh_Threshold' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Scabbard) == 0x000760, "Member 'AModularWeaponBP_C::Scabbard' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Last_Hit_Bone) == 0x000768, "Member 'AModularWeaponBP_C::Last_Hit_Bone' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Last_Hit_Power) == 0x000770, "Member 'AModularWeaponBP_C::Last_Hit_Power' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Color_1) == 0x000778, "Member 'AModularWeaponBP_C::Color_1' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Color_2) == 0x000788, "Member 'AModularWeaponBP_C::Color_2' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Color_3) == 0x000798, "Member 'AModularWeaponBP_C::Color_3' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, SheathSlot) == 0x0007A8, "Member 'AModularWeaponBP_C::SheathSlot' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Stuck_Constraints_Array) == 0x0007B0, "Member 'AModularWeaponBP_C::Stuck_Constraints_Array' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Instant_Unsheath) == 0x0007C0, "Member 'AModularWeaponBP_C::Instant_Unsheath' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Icon) == 0x0007C8, "Member 'AModularWeaponBP_C::Icon' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, My_Class) == 0x0007D0, "Member 'AModularWeaponBP_C::My_Class' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Search_Priority) == 0x0007D8, "Member 'AModularWeaponBP_C::Search_Priority' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Quality) == 0x0007E0, "Member 'AModularWeaponBP_C::Quality' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_Rate) == 0x0007E8, "Member 'AModularWeaponBP_C::Grip_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, No_Collision) == 0x0007F0, "Member 'AModularWeaponBP_C::No_Collision' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, NewVar) == 0x0007F4, "Member 'AModularWeaponBP_C::NewVar' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Wound_Shape) == 0x000800, "Member 'AModularWeaponBP_C::Wound_Shape' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Brush_Scale) == 0x000808, "Member 'AModularWeaponBP_C::Brush_Scale' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Just_Parried_Rate) == 0x000810, "Member 'AModularWeaponBP_C::Just_Parried_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Just_Parried) == 0x000818, "Member 'AModularWeaponBP_C::Just_Parried' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Draw_Cut_Rate) == 0x000820, "Member 'AModularWeaponBP_C::Draw_Cut_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Mass_Adjust_Scale__Temp_) == 0x000828, "Member 'AModularWeaponBP_C::Mass_Adjust_Scale__Temp_' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, R_Hand_Stamina_Burn_Rate) == 0x000830, "Member 'AModularWeaponBP_C::R_Hand_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, L_Hand_Stamina_Burn_Rate) == 0x000838, "Member 'AModularWeaponBP_C::L_Hand_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, TwoH_Default_Stamina_Burn_Rate) == 0x000840, "Member 'AModularWeaponBP_C::TwoH_Default_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, TwoH_Alt_Stamina_Burn_Rate) == 0x000848, "Member 'AModularWeaponBP_C::TwoH_Alt_Stamina_Burn_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Alt_Grip_Switch_Type) == 0x000850, "Member 'AModularWeaponBP_C::Alt_Grip_Switch_Type' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AI_Movement_Range) == 0x000858, "Member 'AModularWeaponBP_C::AI_Movement_Range' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Length_to_Top_2H) == 0x000860, "Member 'AModularWeaponBP_C::Length_to_Top_2H' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Length_to_Top_Alt) == 0x000868, "Member 'AModularWeaponBP_C::Length_to_Top_Alt' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Length_to_Top_L_Default) == 0x000870, "Member 'AModularWeaponBP_C::Length_to_Top_L_Default' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, AI_Invincibility_Rate) == 0x000878, "Member 'AModularWeaponBP_C::AI_Invincibility_Rate' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Impact_Sound_Multiplier) == 0x000880, "Member 'AModularWeaponBP_C::Impact_Sound_Multiplier' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Shield) == 0x000888, "Member 'AModularWeaponBP_C::Shield' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Grip_Static_Mesh) == 0x000890, "Member 'AModularWeaponBP_C::Grip_Static_Mesh' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Loaded_From_Save) == 0x000898, "Member 'AModularWeaponBP_C::Loaded_From_Save' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Head) == 0x0008A0, "Member 'AModularWeaponBP_C::Module_Head' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Guard) == 0x0008A8, "Member 'AModularWeaponBP_C::Module_Guard' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Pommel) == 0x0008B0, "Member 'AModularWeaponBP_C::Module_Pommel' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Head_Size) == 0x0008B8, "Member 'AModularWeaponBP_C::Head_Size' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Guard_Size) == 0x0008D0, "Member 'AModularWeaponBP_C::Guard_Size' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Pommel_Size) == 0x0008E8, "Member 'AModularWeaponBP_C::Pommel_Size' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sub_Module_1_Class) == 0x000900, "Member 'AModularWeaponBP_C::Sub_Module_1_Class' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Sub_Module_2_Class) == 0x000908, "Member 'AModularWeaponBP_C::Sub_Module_2_Class' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, SG_Weap) == 0x000910, "Member 'AModularWeaponBP_C::SG_Weap' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Material_Groups_0) == 0x000918, "Member 'AModularWeaponBP_C::Module_Material_Groups_0' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Module_Color_Groups_0) == 0x000968, "Member 'AModularWeaponBP_C::Module_Color_Groups_0' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Generated) == 0x0009B8, "Member 'AModularWeaponBP_C::Generated' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Str_Weapon_Parts) == 0x0009C0, "Member 'AModularWeaponBP_C::Str_Weapon_Parts' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Int_Shield_COA) == 0x000AF0, "Member 'AModularWeaponBP_C::Int_Shield_COA' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Hit_Component_is_Character) == 0x000AF4, "Member 'AModularWeaponBP_C::Hit_Component_is_Character' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Team) == 0x000AF8, "Member 'AModularWeaponBP_C::Team' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Temp_Disable_Damage) == 0x000AFC, "Member 'AModularWeaponBP_C::Temp_Disable_Damage' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Kick_Power) == 0x000B00, "Member 'AModularWeaponBP_C::Kick_Power' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Box_Extent) == 0x000B08, "Member 'AModularWeaponBP_C::Box_Extent' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Last_Parent) == 0x000B20, "Member 'AModularWeaponBP_C::Last_Parent' has a wrong offset!");
static_assert(offsetof(AModularWeaponBP_C, Use_Alt_Against_Armor_Rate_NPC) == 0x000B28, "Member 'AModularWeaponBP_C::Use_Alt_Against_Armor_Rate_NPC' has a wrong offset!");

}

