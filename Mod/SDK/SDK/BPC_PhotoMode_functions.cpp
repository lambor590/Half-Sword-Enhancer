#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PhotoMode

#include "Basic.hpp"

#include "BPC_PhotoMode_classes.hpp"
#include "BPC_PhotoMode_parameters.hpp"


namespace SDK
{

// Function BPC_PhotoMode.BPC_PhotoMode_C.Calculate Weight by Ref
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APostProcessVolume*               PostProcessVolume                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  PropertyTotal                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PropertyCount                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PropertyValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceWeight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::Calculate_Weight_by_Ref(class APostProcessVolume* PostProcessVolume, double& PropertyTotal, double& PropertyCount, double PropertyValue, double DistanceWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "Calculate Weight by Ref");

	Params::BPC_PhotoMode_C_Calculate_Weight_by_Ref Parms{};

	Parms.PostProcessVolume = PostProcessVolume;
	Parms.PropertyTotal = PropertyTotal;
	Parms.PropertyCount = PropertyCount;
	Parms.PropertyValue = PropertyValue;
	Parms.DistanceWeight = DistanceWeight;

	UObject::ProcessEvent(Func, &Parms);

	PropertyTotal = Parms.PropertyTotal;
	PropertyCount = Parms.PropertyCount;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.Create Post Process
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_PhotoMode_C::Create_Post_Process()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "Create Post Process");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.ExecuteUbergraph_BPC_PhotoMode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::ExecuteUbergraph_BPC_PhotoMode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "ExecuteUbergraph_BPC_PhotoMode");

	Params::BPC_PhotoMode_C_ExecuteUbergraph_BPC_PhotoMode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.Get Active Camera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCameraComponent*                 CurrentCamera                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              CurrentSpringArm                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::Get_Active_Camera(class UCameraComponent** CurrentCamera, class USpringArmComponent** CurrentSpringArm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "Get Active Camera");

	Params::BPC_PhotoMode_C_Get_Active_Camera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentCamera != nullptr)
		*CurrentCamera = Parms.CurrentCamera;

	if (CurrentSpringArm != nullptr)
		*CurrentSpringArm = Parms.CurrentSpringArm;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.GetCameraLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::GetCameraLocation(struct FVector* CameraLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "GetCameraLocation");

	Params::BPC_PhotoMode_C_GetCameraLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraLocation != nullptr)
		*CameraLocation = std::move(Parms.CameraLocation);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.GetCameraManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerCameraManager*             PlayerCameraManager                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::GetCameraManager(class APlayerCameraManager** PlayerCameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "GetCameraManager");

	Params::BPC_PhotoMode_C_GetCameraManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerCameraManager != nullptr)
		*PlayerCameraManager = Parms.PlayerCameraManager;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.getScreenshotPath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           FullPath                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::getScreenshotPath(class FString* FullPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "getScreenshotPath");

	Params::BPC_PhotoMode_C_getScreenshotPath Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FullPath != nullptr)
		*FullPath = std::move(Parms.FullPath);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.GetSliderCameraDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  CameraDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::GetSliderCameraDistance(double* CameraDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "GetSliderCameraDistance");

	Params::BPC_PhotoMode_C_GetSliderCameraDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraDistance != nullptr)
		*CameraDistance = Parms.CameraDistance;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.GetSliderFOV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  FOV                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::GetSliderFOV(double* FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "GetSliderFOV");

	Params::BPC_PhotoMode_C_GetSliderFOV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FOV != nullptr)
		*FOV = Parms.FOV;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.GetSliderRoll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Roll                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::GetSliderRoll(double* Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "GetSliderRoll");

	Params::BPC_PhotoMode_C_GetSliderRoll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Roll != nullptr)
		*Roll = Parms.Roll;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.IconSelector - Gallery
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_PhotoMode_C::IconSelector___Gallery(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "IconSelector - Gallery");

	Params::BPC_PhotoMode_C_IconSelector___Gallery Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.IconSelector - Photo Mode Menu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_PhotoMode_C::IconSelector___Photo_Mode_Menu(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "IconSelector - Photo Mode Menu");

	Params::BPC_PhotoMode_C_IconSelector___Photo_Mode_Menu Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.InitWidgets
// (BlueprintCallable, BlueprintEvent)

void UBPC_PhotoMode_C::InitWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "InitWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.OpenGallery
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             LastKey_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_PhotoMode_C::OpenGallery(const struct FKey& LastKey_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "OpenGallery");

	Params::BPC_PhotoMode_C_OpenGallery Parms{};

	Parms.LastKey_0 = std::move(LastKey_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.Photo Mode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_PhotoMode_C::Photo_Mode(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "Photo Mode");

	Params::BPC_PhotoMode_C_Photo_Mode Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBPC_PhotoMode_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.ResetGallery
// (BlueprintCallable, BlueprintEvent)

void UBPC_PhotoMode_C::ResetGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "ResetGallery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.ResetPhotoMode
// (BlueprintCallable, BlueprintEvent)

void UBPC_PhotoMode_C::ResetPhotoMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "ResetPhotoMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.UnpausedGameAxisMovementControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  AxisValueIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AxisValueOut                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::UnpausedGameAxisMovementControl(double AxisValueIn, double* AxisValueOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "UnpausedGameAxisMovementControl");

	Params::BPC_PhotoMode_C_UnpausedGameAxisMovementControl Parms{};

	Parms.AxisValueIn = AxisValueIn;

	UObject::ProcessEvent(Func, &Parms);

	if (AxisValueOut != nullptr)
		*AxisValueOut = Parms.AxisValueOut;
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.UpdateOutputFolder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Custom_Path                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::UpdateOutputFolder(const class FString& Custom_Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "UpdateOutputFolder");

	Params::BPC_PhotoMode_C_UpdateOutputFolder Parms{};

	Parms.Custom_Path = std::move(Custom_Path);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PhotoMode.BPC_PhotoMode_C.UpdateReferences
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCheckWidgets                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PhotoMode_C::UpdateReferences(bool bCheckWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PhotoMode_C", "UpdateReferences");

	Params::BPC_PhotoMode_C_UpdateReferences Parms{};

	Parms.bCheckWidgets = bCheckWidgets;

	UObject::ProcessEvent(Func, &Parms);
}

}

