#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_PhotoModeUtilities

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "E_ScreenshotMethod_structs.hpp"
#include "E_SaveSort_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_PhotoModeUtilities.BPFL_PhotoModeUtilities_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_PhotoModeUtilities_C final : public UBlueprintFunctionLibrary
{
public:
	static void Directory_Path_Correction(bool Use_Custom_Path_, const class FString& Custom_Path, class UObject* __WorldContext, class FString* Corrected_Path);
	static void Get_Default_Screen_Resolution(class UObject* __WorldContext, struct FIntPoint* Resolution__X_and_Y_);
	static void Get_Screenshot_File(class UObject* WorldContextObject, const class FString& FullFilePath, class UObject* __WorldContext, bool* IsValid_, class UTexture2D** TwoD_Image, class FString* Base_Filename, class FString* Full_File_Path);
	static void GetAllImersedPostProcess(class APlayerController* PlayerController, class UObject* __WorldContext, struct FVector* CameraLocation, TMap<class APostProcessVolume*, struct FTransform>* VolumesTransforms, TMap<class APostProcessVolume*, struct FVector>* VolumesExtent);
	static void Hide_HUD_When_Using_Photo_Mode(ESlateVisibility If_Not_Using_Photo_Mode_Set_This_Widget_As, class UBPC_PhotoMode_C* PhotoModeComponent, class UObject* __WorldContext, ESlateVisibility* Visibility, bool* Using_Photo_Mode_or_Gallery_);
	static void HighResScreenshot__without_UI_(class UObject* World_Context_Object__Self_, class APlayerController* Player_Controller, const class FString& Screenshot_Folder_Path, const struct FIntPoint& Resolution__X_and_Y_, E_ScreenshotMethod ScreenshotMethod, class ABP_ScreenshotManager_C* ScreenshotManager, class UObject* __WorldContext, class FString* Full_Photo_Path, class FString* Photo_Name);
	static void isGalleryOpened(class UObject* __WorldContext, bool* bIsOpened, class UUI_Gallery_C** WidgetReference);
	static void isPhotoModeOpened(class UObject* __WorldContext, bool* bIsOpened, class UUI_PhotoMode_C** WidgetReference);
	static void isPhotoModeOrGalleryOpened(class UObject* __WorldContext, bool* bIsOpened);
	static void LoadPhotos(class UObject* __WorldContext, bool* SaveGameIsValid_, TArray<struct FS_PhotosData>* PhotosData);
	static void MakeThumbnail(class UObject* World_Context_Object__Self_, class APlayerController* Player_Controller, const class FString& Screenshot_Folder_Path, const struct FIntPoint& Resolution__X_and_Y_, const class FString& PhotoName, E_ScreenshotMethod ScreenshotMethod, class ABP_ScreenshotManager_C* ScreenshotManager, class UObject* __WorldContext, class FString* Full_Thumbnail_Path, class FString* BaseThumbnailName);
	static void Nearest_Distance_To_Box_With_Transform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent, class UObject* __WorldContext, double* Distance);
	static void NormalizeScreenshotPath(const class FString& Folder_Path, class UObject* __WorldContext, class FString* Normalized_Path);
	static void SaveAllPhotos(TArray<struct FS_PhotosData>& SaveNewPhoto, class UObject* __WorldContext);
	static void SavePhoto(const struct FS_PhotosData& SaveNewPhoto, E_SaveSort Sort, class UObject* __WorldContext);
	static void Screenshot__with_UI_(class UObject* World_Context_Object__Self_, class APlayerController* Player_Controller, const class FString& Screenshot_Folder_Path, class UObject* __WorldContext, class FString* Full_Screenshot_File_Path, class FString* PhotoName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_PhotoModeUtilities_C">();
	}
	static class UBPFL_PhotoModeUtilities_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_PhotoModeUtilities_C>();
	}
};
static_assert(alignof(UBPFL_PhotoModeUtilities_C) == 0x000008, "Wrong alignment on UBPFL_PhotoModeUtilities_C");
static_assert(sizeof(UBPFL_PhotoModeUtilities_C) == 0x000028, "Wrong size on UBPFL_PhotoModeUtilities_C");

}

