#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CollisionDisabler

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct CollisionDisabler.CollisionParams
// 0x0018 (0x0018 - 0x0000)
struct FCollisionParams final
{
public:
	uint8                                         BitPad_0_0 : 1;                                    // 0x0000(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bOverrideMaxImpulse : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideStaticFriction : 1;                       // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideDynamicFriction : 1;                      // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideRestitution : 1;                          // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSeparation : 1;                           // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxImpulse;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticFriction;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicFriction;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Restitution;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Separation;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollisionParams) == 0x000004, "Wrong alignment on FCollisionParams");
static_assert(sizeof(FCollisionParams) == 0x000018, "Wrong size on FCollisionParams");
static_assert(offsetof(FCollisionParams, MaxImpulse) == 0x000004, "Member 'FCollisionParams::MaxImpulse' has a wrong offset!");
static_assert(offsetof(FCollisionParams, StaticFriction) == 0x000008, "Member 'FCollisionParams::StaticFriction' has a wrong offset!");
static_assert(offsetof(FCollisionParams, DynamicFriction) == 0x00000C, "Member 'FCollisionParams::DynamicFriction' has a wrong offset!");
static_assert(offsetof(FCollisionParams, Restitution) == 0x000010, "Member 'FCollisionParams::Restitution' has a wrong offset!");
static_assert(offsetof(FCollisionParams, Separation) == 0x000014, "Member 'FCollisionParams::Separation' has a wrong offset!");

}

