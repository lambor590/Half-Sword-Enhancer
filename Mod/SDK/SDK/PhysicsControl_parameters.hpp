#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsControl

#include "Basic.hpp"

#include "PhysicsControl_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PhysicsControl.PhysicsControlBPLibrary.AddControlParameters
// 0x00B8 (0x00B8 - 0x0000)
struct PhysicsControlBPLibrary_AddControlParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              ControlData;                                       // 0x0068(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_AddControlParameters) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_AddControlParameters");
static_assert(sizeof(PhysicsControlBPLibrary_AddControlParameters) == 0x0000B8, "Wrong size on PhysicsControlBPLibrary_AddControlParameters");
static_assert(offsetof(PhysicsControlBPLibrary_AddControlParameters, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_AddControlParameters::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddControlParameters, OutParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_AddControlParameters::OutParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddControlParameters, Name_0) == 0x000060, "Member 'PhysicsControlBPLibrary_AddControlParameters::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddControlParameters, ControlData) == 0x000068, "Member 'PhysicsControlBPLibrary_AddControlParameters::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.AddModifierParameters
// 0x0078 (0x0078 - 0x0000)
struct PhysicsControlBPLibrary_AddModifierParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      ModifierData;                                      // 0x0068(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_AddModifierParameters) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_AddModifierParameters");
static_assert(sizeof(PhysicsControlBPLibrary_AddModifierParameters) == 0x000078, "Wrong size on PhysicsControlBPLibrary_AddModifierParameters");
static_assert(offsetof(PhysicsControlBPLibrary_AddModifierParameters, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_AddModifierParameters::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddModifierParameters, OutParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_AddModifierParameters::OutParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddModifierParameters, Name_0) == 0x000060, "Member 'PhysicsControlBPLibrary_AddModifierParameters::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddModifierParameters, ModifierData) == 0x000068, "Member 'PhysicsControlBPLibrary_AddModifierParameters::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.AddMultipleControlParameters
// 0x00C0 (0x00C0 - 0x0000)
struct PhysicsControlBPLibrary_AddMultipleControlParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Names;                                             // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              ControlData;                                       // 0x0070(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_AddMultipleControlParameters) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_AddMultipleControlParameters");
static_assert(sizeof(PhysicsControlBPLibrary_AddMultipleControlParameters) == 0x0000C0, "Wrong size on PhysicsControlBPLibrary_AddMultipleControlParameters");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleControlParameters, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_AddMultipleControlParameters::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleControlParameters, OutParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_AddMultipleControlParameters::OutParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleControlParameters, Names) == 0x000060, "Member 'PhysicsControlBPLibrary_AddMultipleControlParameters::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleControlParameters, ControlData) == 0x000070, "Member 'PhysicsControlBPLibrary_AddMultipleControlParameters::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.AddMultipleModifierParameters
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlBPLibrary_AddMultipleModifierParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Names;                                             // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      ModifierData;                                      // 0x0070(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_AddMultipleModifierParameters) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_AddMultipleModifierParameters");
static_assert(sizeof(PhysicsControlBPLibrary_AddMultipleModifierParameters) == 0x000080, "Wrong size on PhysicsControlBPLibrary_AddMultipleModifierParameters");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleModifierParameters, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_AddMultipleModifierParameters::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleModifierParameters, OutParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_AddMultipleModifierParameters::OutParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleModifierParameters, Names) == 0x000060, "Member 'PhysicsControlBPLibrary_AddMultipleModifierParameters::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_AddMultipleModifierParameters, ModifierData) == 0x000070, "Member 'PhysicsControlBPLibrary_AddMultipleModifierParameters::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.BlendControlParametersThroughSet
// 0x0120 (0x0120 - 0x0000)
struct PhysicsControlBPLibrary_BlendControlParametersThroughSet final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlNamedControlParameters  InStartControlParameters;                          // 0x0030(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlNamedControlParameters  InEndControlParameters;                            // 0x0088(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ControlNames;                                      // 0x00E0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x00F0(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_BlendControlParametersThroughSet) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_BlendControlParametersThroughSet");
static_assert(sizeof(PhysicsControlBPLibrary_BlendControlParametersThroughSet) == 0x000120, "Wrong size on PhysicsControlBPLibrary_BlendControlParametersThroughSet");
static_assert(offsetof(PhysicsControlBPLibrary_BlendControlParametersThroughSet, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_BlendControlParametersThroughSet::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendControlParametersThroughSet, InStartControlParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_BlendControlParametersThroughSet::InStartControlParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendControlParametersThroughSet, InEndControlParameters) == 0x000088, "Member 'PhysicsControlBPLibrary_BlendControlParametersThroughSet::InEndControlParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendControlParametersThroughSet, ControlNames) == 0x0000E0, "Member 'PhysicsControlBPLibrary_BlendControlParametersThroughSet::ControlNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendControlParametersThroughSet, OutParameters) == 0x0000F0, "Member 'PhysicsControlBPLibrary_BlendControlParametersThroughSet::OutParameters' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.BlendModifierParametersThroughSet
// 0x00A0 (0x00A0 - 0x0000)
struct PhysicsControlBPLibrary_BlendModifierParametersThroughSet final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParameters;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlNamedModifierParameters InStartModifierParameters;                         // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlNamedModifierParameters InEndModifierParameters;                           // 0x0048(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ModifierNames;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0070(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_BlendModifierParametersThroughSet");
static_assert(sizeof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet) == 0x0000A0, "Wrong size on PhysicsControlBPLibrary_BlendModifierParametersThroughSet");
static_assert(offsetof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet, InParameters) == 0x000000, "Member 'PhysicsControlBPLibrary_BlendModifierParametersThroughSet::InParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet, InStartModifierParameters) == 0x000030, "Member 'PhysicsControlBPLibrary_BlendModifierParametersThroughSet::InStartModifierParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet, InEndModifierParameters) == 0x000048, "Member 'PhysicsControlBPLibrary_BlendModifierParametersThroughSet::InEndModifierParameters' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet, ModifierNames) == 0x000060, "Member 'PhysicsControlBPLibrary_BlendModifierParametersThroughSet::ModifierNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendModifierParametersThroughSet, OutParameters) == 0x000070, "Member 'PhysicsControlBPLibrary_BlendModifierParametersThroughSet::OutParameters' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.BlendParameters
// 0x0098 (0x0098 - 0x0000)
struct PhysicsControlBPLibrary_BlendParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters InParametersA;                                     // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters InParametersB;                                     // 0x0030(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InInterpolationWeight;                             // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlControlAndModifierParameters OutParameters;                                     // 0x0068(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_BlendParameters) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_BlendParameters");
static_assert(sizeof(PhysicsControlBPLibrary_BlendParameters) == 0x000098, "Wrong size on PhysicsControlBPLibrary_BlendParameters");
static_assert(offsetof(PhysicsControlBPLibrary_BlendParameters, InParametersA) == 0x000000, "Member 'PhysicsControlBPLibrary_BlendParameters::InParametersA' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendParameters, InParametersB) == 0x000030, "Member 'PhysicsControlBPLibrary_BlendParameters::InParametersB' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendParameters, InInterpolationWeight) == 0x000060, "Member 'PhysicsControlBPLibrary_BlendParameters::InInterpolationWeight' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_BlendParameters, OutParameters) == 0x000068, "Member 'PhysicsControlBPLibrary_BlendParameters::OutParameters' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.ConvertToRigidBodyWithControl
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlBPLibrary_ConvertToRigidBodyWithControl final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigidBodyWithControlReference         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControl) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_ConvertToRigidBodyWithControl");
static_assert(sizeof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControl) == 0x000028, "Wrong size on PhysicsControlBPLibrary_ConvertToRigidBodyWithControl");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControl, Node) == 0x000000, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControl::Node' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControl, Result) == 0x000010, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControl::Result' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControl, ReturnValue) == 0x000018, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControl::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.ConvertToRigidBodyWithControlPure
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigidBodyWithControlReference         RigidBodyWithControl;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure");
static_assert(sizeof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure) == 0x000028, "Wrong size on PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure, Node) == 0x000000, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure::Node' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure, RigidBodyWithControl) == 0x000010, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure::RigidBodyWithControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure, Result) == 0x000020, "Member 'PhysicsControlBPLibrary_ConvertToRigidBodyWithControlPure::Result' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.GetBodyModifierNamesInSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlBPLibrary_GetBodyModifierNamesInSet final
{
public:
	struct FRigidBodyWithControlReference         RigidBodyWithControl;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SetName;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_GetBodyModifierNamesInSet) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_GetBodyModifierNamesInSet");
static_assert(sizeof(PhysicsControlBPLibrary_GetBodyModifierNamesInSet) == 0x000028, "Wrong size on PhysicsControlBPLibrary_GetBodyModifierNamesInSet");
static_assert(offsetof(PhysicsControlBPLibrary_GetBodyModifierNamesInSet, RigidBodyWithControl) == 0x000000, "Member 'PhysicsControlBPLibrary_GetBodyModifierNamesInSet::RigidBodyWithControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_GetBodyModifierNamesInSet, SetName) == 0x000010, "Member 'PhysicsControlBPLibrary_GetBodyModifierNamesInSet::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_GetBodyModifierNamesInSet, ReturnValue) == 0x000018, "Member 'PhysicsControlBPLibrary_GetBodyModifierNamesInSet::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.GetControlNamesInSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlBPLibrary_GetControlNamesInSet final
{
public:
	struct FRigidBodyWithControlReference         RigidBodyWithControl;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SetName;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_GetControlNamesInSet) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_GetControlNamesInSet");
static_assert(sizeof(PhysicsControlBPLibrary_GetControlNamesInSet) == 0x000028, "Wrong size on PhysicsControlBPLibrary_GetControlNamesInSet");
static_assert(offsetof(PhysicsControlBPLibrary_GetControlNamesInSet, RigidBodyWithControl) == 0x000000, "Member 'PhysicsControlBPLibrary_GetControlNamesInSet::RigidBodyWithControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_GetControlNamesInSet, SetName) == 0x000010, "Member 'PhysicsControlBPLibrary_GetControlNamesInSet::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_GetControlNamesInSet, ReturnValue) == 0x000018, "Member 'PhysicsControlBPLibrary_GetControlNamesInSet::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlBPLibrary.SetOverridePhysicsAsset
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlBPLibrary_SetOverridePhysicsAsset final
{
public:
	struct FRigidBodyWithControlReference         Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigidBodyWithControlReference         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlBPLibrary_SetOverridePhysicsAsset) == 0x000008, "Wrong alignment on PhysicsControlBPLibrary_SetOverridePhysicsAsset");
static_assert(sizeof(PhysicsControlBPLibrary_SetOverridePhysicsAsset) == 0x000028, "Wrong size on PhysicsControlBPLibrary_SetOverridePhysicsAsset");
static_assert(offsetof(PhysicsControlBPLibrary_SetOverridePhysicsAsset, Node) == 0x000000, "Member 'PhysicsControlBPLibrary_SetOverridePhysicsAsset::Node' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_SetOverridePhysicsAsset, PhysicsAsset) == 0x000010, "Member 'PhysicsControlBPLibrary_SetOverridePhysicsAsset::PhysicsAsset' has a wrong offset!");
static_assert(offsetof(PhysicsControlBPLibrary_SetOverridePhysicsAsset, ReturnValue) == 0x000018, "Member 'PhysicsControlBPLibrary_SetOverridePhysicsAsset::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.AddBodyModifiersToSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_AddBodyModifiersToSet final
{
public:
	struct FPhysicsControlNames                   NewSet;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           BodyModifiers;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_AddBodyModifiersToSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_AddBodyModifiersToSet");
static_assert(sizeof(PhysicsControlComponent_AddBodyModifiersToSet) == 0x000028, "Wrong size on PhysicsControlComponent_AddBodyModifiersToSet");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifiersToSet, NewSet) == 0x000000, "Member 'PhysicsControlComponent_AddBodyModifiersToSet::NewSet' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifiersToSet, BodyModifiers) == 0x000010, "Member 'PhysicsControlComponent_AddBodyModifiersToSet::BodyModifiers' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifiersToSet, Set) == 0x000020, "Member 'PhysicsControlComponent_AddBodyModifiersToSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.AddBodyModifierToSet
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_AddBodyModifierToSet final
{
public:
	struct FPhysicsControlNames                   NewSet;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   BodyModifier;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_AddBodyModifierToSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_AddBodyModifierToSet");
static_assert(sizeof(PhysicsControlComponent_AddBodyModifierToSet) == 0x000020, "Wrong size on PhysicsControlComponent_AddBodyModifierToSet");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifierToSet, NewSet) == 0x000000, "Member 'PhysicsControlComponent_AddBodyModifierToSet::NewSet' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifierToSet, BodyModifier) == 0x000010, "Member 'PhysicsControlComponent_AddBodyModifierToSet::BodyModifier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddBodyModifierToSet, Set) == 0x000018, "Member 'PhysicsControlComponent_AddBodyModifierToSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.AddControlsToSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_AddControlsToSet final
{
public:
	struct FPhysicsControlNames                   NewSet;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Controls;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_AddControlsToSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_AddControlsToSet");
static_assert(sizeof(PhysicsControlComponent_AddControlsToSet) == 0x000028, "Wrong size on PhysicsControlComponent_AddControlsToSet");
static_assert(offsetof(PhysicsControlComponent_AddControlsToSet, NewSet) == 0x000000, "Member 'PhysicsControlComponent_AddControlsToSet::NewSet' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddControlsToSet, Controls) == 0x000010, "Member 'PhysicsControlComponent_AddControlsToSet::Controls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddControlsToSet, Set) == 0x000020, "Member 'PhysicsControlComponent_AddControlsToSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.AddControlToSet
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_AddControlToSet final
{
public:
	struct FPhysicsControlNames                   NewSet;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   Control;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_AddControlToSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_AddControlToSet");
static_assert(sizeof(PhysicsControlComponent_AddControlToSet) == 0x000020, "Wrong size on PhysicsControlComponent_AddControlToSet");
static_assert(offsetof(PhysicsControlComponent_AddControlToSet, NewSet) == 0x000000, "Member 'PhysicsControlComponent_AddControlToSet::NewSet' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddControlToSet, Control) == 0x000010, "Member 'PhysicsControlComponent_AddControlToSet::Control' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_AddControlToSet, Set) == 0x000018, "Member 'PhysicsControlComponent_AddControlToSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifier
// 0x0030 (0x0030 - 0x0000)
struct PhysicsControlComponent_CreateBodyModifier final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x0018(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateBodyModifier) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateBodyModifier");
static_assert(sizeof(PhysicsControlComponent_CreateBodyModifier) == 0x000030, "Wrong size on PhysicsControlComponent_CreateBodyModifier");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifier, MeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateBodyModifier::MeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifier, BoneName) == 0x000008, "Member 'PhysicsControlComponent_CreateBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifier, Set) == 0x000010, "Member 'PhysicsControlComponent_CreateBodyModifier::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifier, BodyModifierData) == 0x000018, "Member 'PhysicsControlComponent_CreateBodyModifier::BodyModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifier, ReturnValue) == 0x000028, "Member 'PhysicsControlComponent_CreateBodyModifier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifiersFromLimbBones
// 0x00C0 (0x00C0 - 0x0000)
struct PhysicsControlComponent_CreateBodyModifiersFromLimbBones final
{
public:
	struct FPhysicsControlNames                   AllBodyModifiers;                                  // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlLimbBones> LimbBones;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x0060(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlNames> ReturnValue;                                       // 0x0070(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateBodyModifiersFromLimbBones");
static_assert(sizeof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones) == 0x0000C0, "Wrong size on PhysicsControlComponent_CreateBodyModifiersFromLimbBones");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones, AllBodyModifiers) == 0x000000, "Member 'PhysicsControlComponent_CreateBodyModifiersFromLimbBones::AllBodyModifiers' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones, LimbBones) == 0x000010, "Member 'PhysicsControlComponent_CreateBodyModifiersFromLimbBones::LimbBones' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones, BodyModifierData) == 0x000060, "Member 'PhysicsControlComponent_CreateBodyModifiersFromLimbBones::BodyModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromLimbBones, ReturnValue) == 0x000070, "Member 'PhysicsControlComponent_CreateBodyModifiersFromLimbBones::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifiersFromSkeletalMeshBelow
// 0x0040 (0x0040 - 0x0000)
struct PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Set;                                               // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x001C(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow");
static_assert(sizeof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow) == 0x000040, "Wrong size on PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, BoneName) == 0x000008, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, bIncludeSelf) == 0x000010, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, Set) == 0x000014, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, BodyModifierData) == 0x00001C, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::BodyModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow, ReturnValue) == 0x000030, "Member 'PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControl
// 0x00F8 (0x00F8 - 0x0000)
struct PhysicsControlComponent_CreateControl final
{
public:
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ChildMeshComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0020(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0070(0x0068)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePrefix;                                        // 0x00E0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControl) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControl");
static_assert(sizeof(PhysicsControlComponent_CreateControl) == 0x0000F8, "Wrong size on PhysicsControlComponent_CreateControl");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ParentMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControl::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ParentBoneName) == 0x000008, "Member 'PhysicsControlComponent_CreateControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ChildMeshComponent) == 0x000010, "Member 'PhysicsControlComponent_CreateControl::ChildMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ChildBoneName) == 0x000018, "Member 'PhysicsControlComponent_CreateControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ControlData) == 0x000020, "Member 'PhysicsControlComponent_CreateControl::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ControlTarget) == 0x000070, "Member 'PhysicsControlComponent_CreateControl::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, Set) == 0x0000D8, "Member 'PhysicsControlComponent_CreateControl::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, NamePrefix) == 0x0000E0, "Member 'PhysicsControlComponent_CreateControl::NamePrefix' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControl, ReturnValue) == 0x0000F0, "Member 'PhysicsControlComponent_CreateControl::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsAndBodyModifiersFromControlProfileAsset
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         WorldComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldBoneName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset");
static_assert(sizeof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset) == 0x000018, "Wrong size on PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset, WorldComponent) == 0x000008, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset::WorldComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset, WorldBoneName) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromControlProfileAsset::WorldBoneName' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsAndBodyModifiersFromLimbBones
// 0x01F8 (0x01F8 - 0x0000)
struct PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones final
{
public:
	struct FPhysicsControlNames                   AllWorldSpaceControls;                             // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlNames> LimbWorldSpaceControls;                            // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlNames                   AllParentSpaceControls;                            // 0x0060(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlNames> LimbParentSpaceControls;                           // 0x0070(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlNames                   AllBodyModifiers;                                  // 0x00C0(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlNames> LimbBodyModifiers;                                 // 0x00D0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0120(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0128(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    WorldSpaceControlData;                             // 0x0138(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ParentSpaceControlData;                            // 0x0188(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x01D8(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UMeshComponent*                         WorldComponent;                                    // 0x01E8(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldBoneName;                                     // 0x01F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones");
static_assert(sizeof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones) == 0x0001F8, "Wrong size on PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, AllWorldSpaceControls) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::AllWorldSpaceControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, LimbWorldSpaceControls) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::LimbWorldSpaceControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, AllParentSpaceControls) == 0x000060, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::AllParentSpaceControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, LimbParentSpaceControls) == 0x000070, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::LimbParentSpaceControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, AllBodyModifiers) == 0x0000C0, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::AllBodyModifiers' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, LimbBodyModifiers) == 0x0000D0, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::LimbBodyModifiers' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, SkeletalMeshComponent) == 0x000120, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, LimbSetupData) == 0x000128, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::LimbSetupData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, WorldSpaceControlData) == 0x000138, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::WorldSpaceControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, ParentSpaceControlData) == 0x000188, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::ParentSpaceControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, BodyModifierData) == 0x0001D8, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::BodyModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, WorldComponent) == 0x0001E8, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::WorldComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones, WorldBoneName) == 0x0001F0, "Member 'PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones::WorldBoneName' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromLimbBones
// 0x0128 (0x0128 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromLimbBones final
{
public:
	struct FPhysicsControlNames                   AllControls;                                       // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlLimbBones> LimbBones;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPhysicsControlType                           ControlType;                                       // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlData                    ControlData;                                       // 0x0068(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UMeshComponent*                         WorldComponent;                                    // 0x00B8(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldBoneName;                                     // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePrefix;                                        // 0x00C8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlNames> ReturnValue;                                       // 0x00D8(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromLimbBones) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromLimbBones");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromLimbBones) == 0x000128, "Wrong size on PhysicsControlComponent_CreateControlsFromLimbBones");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, AllControls) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::AllControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, LimbBones) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::LimbBones' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, ControlType) == 0x000060, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::ControlType' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, ControlData) == 0x000068, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, WorldComponent) == 0x0000B8, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::WorldComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, WorldBoneName) == 0x0000C0, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::WorldBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, NamePrefix) == 0x0000C8, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::NamePrefix' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBones, ReturnValue) == 0x0000D8, "Member 'PhysicsControlComponent_CreateControlsFromLimbBones::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromLimbBonesAndConstraintProfile
// 0x00C0 (0x00C0 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile final
{
public:
	struct FPhysicsControlNames                   AllControls;                                       // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlLimbBones> LimbBones;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ConstraintProfile;                                 // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0068(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FPhysicsControlNames> ReturnValue;                                       // 0x0070(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile) == 0x0000C0, "Wrong size on PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile, AllControls) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile::AllControls' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile, LimbBones) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile::LimbBones' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile, ConstraintProfile) == 0x000060, "Member 'PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile::ConstraintProfile' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile, bEnabled) == 0x000068, "Member 'PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile::bEnabled' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile, ReturnValue) == 0x000070, "Member 'PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMesh
// 0x0088 (0x0088 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPhysicsControlType                           ControlType;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlData                    ControlData;                                       // 0x0020(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromSkeletalMesh) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromSkeletalMesh");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromSkeletalMesh) == 0x000088, "Wrong size on PhysicsControlComponent_CreateControlsFromSkeletalMesh");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, ControlType) == 0x000018, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::ControlType' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, ControlData) == 0x000020, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, Set) == 0x000070, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMesh, ReturnValue) == 0x000078, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMesh::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshAndConstraintProfile
// 0x0040 (0x0040 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ConstraintProfile;                                 // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile) == 0x000040, "Wrong size on PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, ConstraintProfile) == 0x000018, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::ConstraintProfile' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, Set) == 0x000020, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, bEnabled) == 0x000028, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::bEnabled' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile, ReturnValue) == 0x000030, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshAndConstraintProfileBelow
// 0x0038 (0x0038 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConstraintProfile;                                 // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow) == 0x000038, "Wrong size on PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, BoneName) == 0x000008, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, bIncludeSelf) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, ConstraintProfile) == 0x000014, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::ConstraintProfile' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, Set) == 0x00001C, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, bEnabled) == 0x000024, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::bEnabled' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow, ReturnValue) == 0x000028, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshBelow
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsControlType                           ControlType;                                       // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlData                    ControlData;                                       // 0x0018(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0068(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow");
static_assert(sizeof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow) == 0x000080, "Wrong size on PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, BoneName) == 0x000008, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, bIncludeSelf) == 0x000010, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, ControlType) == 0x000011, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::ControlType' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, ControlData) == 0x000018, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, Set) == 0x000068, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow, ReturnValue) == 0x000070, "Member 'PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateNamedBodyModifier
// 0x0038 (0x0038 - 0x0000)
struct PhysicsControlComponent_CreateNamedBodyModifier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            BodyModifierData;                                  // 0x0020(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_CreateNamedBodyModifier) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateNamedBodyModifier");
static_assert(sizeof(PhysicsControlComponent_CreateNamedBodyModifier) == 0x000038, "Wrong size on PhysicsControlComponent_CreateNamedBodyModifier");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, MeshComponent) == 0x000008, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::MeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, BoneName) == 0x000010, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, Set) == 0x000018, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, BodyModifierData) == 0x000020, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::BodyModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedBodyModifier, ReturnValue) == 0x000030, "Member 'PhysicsControlComponent_CreateNamedBodyModifier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.CreateNamedControl
// 0x00F0 (0x00F0 - 0x0000)
struct PhysicsControlComponent_CreateNamedControl final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ChildMeshComponent;                                // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0028(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0078(0x0068)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Set;                                               // 0x00E0(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_CreateNamedControl) == 0x000008, "Wrong alignment on PhysicsControlComponent_CreateNamedControl");
static_assert(sizeof(PhysicsControlComponent_CreateNamedControl) == 0x0000F0, "Wrong size on PhysicsControlComponent_CreateNamedControl");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, Name_0) == 0x000000, "Member 'PhysicsControlComponent_CreateNamedControl::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ParentMeshComponent) == 0x000008, "Member 'PhysicsControlComponent_CreateNamedControl::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ParentBoneName) == 0x000010, "Member 'PhysicsControlComponent_CreateNamedControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ChildMeshComponent) == 0x000018, "Member 'PhysicsControlComponent_CreateNamedControl::ChildMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ChildBoneName) == 0x000020, "Member 'PhysicsControlComponent_CreateNamedControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ControlData) == 0x000028, "Member 'PhysicsControlComponent_CreateNamedControl::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ControlTarget) == 0x000078, "Member 'PhysicsControlComponent_CreateNamedControl::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, Set) == 0x0000E0, "Member 'PhysicsControlComponent_CreateNamedControl::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_CreateNamedControl, ReturnValue) == 0x0000E8, "Member 'PhysicsControlComponent_CreateNamedControl::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifier
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_DestroyBodyModifier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_DestroyBodyModifier) == 0x000004, "Wrong alignment on PhysicsControlComponent_DestroyBodyModifier");
static_assert(sizeof(PhysicsControlComponent_DestroyBodyModifier) == 0x00000C, "Wrong size on PhysicsControlComponent_DestroyBodyModifier");
static_assert(offsetof(PhysicsControlComponent_DestroyBodyModifier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_DestroyBodyModifier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_DestroyBodyModifier, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_DestroyBodyModifier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifiers
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_DestroyBodyModifiers final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_DestroyBodyModifiers) == 0x000008, "Wrong alignment on PhysicsControlComponent_DestroyBodyModifiers");
static_assert(sizeof(PhysicsControlComponent_DestroyBodyModifiers) == 0x000010, "Wrong size on PhysicsControlComponent_DestroyBodyModifiers");
static_assert(offsetof(PhysicsControlComponent_DestroyBodyModifiers, Names) == 0x000000, "Member 'PhysicsControlComponent_DestroyBodyModifiers::Names' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifiersInSet
// 0x0008 (0x0008 - 0x0000)
struct PhysicsControlComponent_DestroyBodyModifiersInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_DestroyBodyModifiersInSet) == 0x000004, "Wrong alignment on PhysicsControlComponent_DestroyBodyModifiersInSet");
static_assert(sizeof(PhysicsControlComponent_DestroyBodyModifiersInSet) == 0x000008, "Wrong size on PhysicsControlComponent_DestroyBodyModifiersInSet");
static_assert(offsetof(PhysicsControlComponent_DestroyBodyModifiersInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_DestroyBodyModifiersInSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyControl
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_DestroyControl final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_DestroyControl) == 0x000004, "Wrong alignment on PhysicsControlComponent_DestroyControl");
static_assert(sizeof(PhysicsControlComponent_DestroyControl) == 0x00000C, "Wrong size on PhysicsControlComponent_DestroyControl");
static_assert(offsetof(PhysicsControlComponent_DestroyControl, Name_0) == 0x000000, "Member 'PhysicsControlComponent_DestroyControl::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_DestroyControl, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_DestroyControl::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyControls
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_DestroyControls final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_DestroyControls) == 0x000008, "Wrong alignment on PhysicsControlComponent_DestroyControls");
static_assert(sizeof(PhysicsControlComponent_DestroyControls) == 0x000010, "Wrong size on PhysicsControlComponent_DestroyControls");
static_assert(offsetof(PhysicsControlComponent_DestroyControls, Names) == 0x000000, "Member 'PhysicsControlComponent_DestroyControls::Names' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.DestroyControlsInSet
// 0x0008 (0x0008 - 0x0000)
struct PhysicsControlComponent_DestroyControlsInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_DestroyControlsInSet) == 0x000004, "Wrong alignment on PhysicsControlComponent_DestroyControlsInSet");
static_assert(sizeof(PhysicsControlComponent_DestroyControlsInSet) == 0x000008, "Wrong size on PhysicsControlComponent_DestroyControlsInSet");
static_assert(offsetof(PhysicsControlComponent_DestroyControlsInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_DestroyControlsInSet::Set' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneAngularVelocities
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneAngularVelocities final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneAngularVelocities) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneAngularVelocities");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneAngularVelocities) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneAngularVelocities");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocities, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocities::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocities, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocities::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocities, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocities::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneAngularVelocity
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneAngularVelocity final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneAngularVelocity) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneAngularVelocity");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneAngularVelocity) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneAngularVelocity");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocity, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocity::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocity, BoneName) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocity::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneAngularVelocity, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_GetCachedBoneAngularVelocity::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneOrientation
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneOrientation final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneOrientation) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneOrientation");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneOrientation) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneOrientation");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientation, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneOrientation::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientation, BoneName) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneOrientation::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientation, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_GetCachedBoneOrientation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneOrientations
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneOrientations final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneOrientations) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneOrientations");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneOrientations) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneOrientations");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientations, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneOrientations::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientations, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneOrientations::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneOrientations, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetCachedBoneOrientations::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBonePosition
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBonePosition final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBonePosition) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBonePosition");
static_assert(sizeof(PhysicsControlComponent_GetCachedBonePosition) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBonePosition");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePosition, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBonePosition::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePosition, BoneName) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBonePosition::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePosition, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_GetCachedBonePosition::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBonePositions
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBonePositions final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBonePositions) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBonePositions");
static_assert(sizeof(PhysicsControlComponent_GetCachedBonePositions) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBonePositions");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePositions, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBonePositions::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePositions, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBonePositions::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBonePositions, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetCachedBonePositions::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneTransform final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneTransform) == 0x000010, "Wrong alignment on PhysicsControlComponent_GetCachedBoneTransform");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneTransform) == 0x000070, "Wrong size on PhysicsControlComponent_GetCachedBoneTransform");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransform, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneTransform::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransform, BoneName) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransform, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_GetCachedBoneTransform::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneTransforms
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneTransforms final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneTransforms) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneTransforms");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneTransforms) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneTransforms");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransforms, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneTransforms::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransforms, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneTransforms::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneTransforms, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetCachedBoneTransforms::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneVelocities
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneVelocities final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneVelocities) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneVelocities");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneVelocities) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneVelocities");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocities, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneVelocities::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocities, BoneNames) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneVelocities::BoneNames' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocities, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetCachedBoneVelocities::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneVelocity
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_GetCachedBoneVelocity final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetCachedBoneVelocity) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetCachedBoneVelocity");
static_assert(sizeof(PhysicsControlComponent_GetCachedBoneVelocity) == 0x000028, "Wrong size on PhysicsControlComponent_GetCachedBoneVelocity");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocity, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetCachedBoneVelocity::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocity, BoneName) == 0x000008, "Member 'PhysicsControlComponent_GetCachedBoneVelocity::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetCachedBoneVelocity, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_GetCachedBoneVelocity::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.InvokeControlProfile
// 0x0008 (0x0008 - 0x0000)
struct PhysicsControlComponent_InvokeControlProfile final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_InvokeControlProfile) == 0x000004, "Wrong alignment on PhysicsControlComponent_InvokeControlProfile");
static_assert(sizeof(PhysicsControlComponent_InvokeControlProfile) == 0x000008, "Wrong size on PhysicsControlComponent_InvokeControlProfile");
static_assert(offsetof(PhysicsControlComponent_InvokeControlProfile, ProfileName) == 0x000000, "Member 'PhysicsControlComponent_InvokeControlProfile::ProfileName' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifiersInSetToCachedBoneTransforms
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResetToCachedTargetBehavior                  Behavior;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms) == 0x000004, "Wrong alignment on PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms");
static_assert(sizeof(PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms) == 0x00000C, "Wrong size on PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms, SetName) == 0x000000, "Member 'PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms, Behavior) == 0x000008, "Member 'PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms::Behavior' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifiersToCachedBoneTransforms
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EResetToCachedTargetBehavior                  Behavior;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms) == 0x000008, "Wrong alignment on PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms");
static_assert(sizeof(PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms) == 0x000018, "Wrong size on PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms, Names) == 0x000000, "Member 'PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms, Behavior) == 0x000010, "Member 'PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms::Behavior' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifierToCachedBoneTransform
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResetToCachedTargetBehavior                  Behavior;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform) == 0x000004, "Wrong alignment on PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform");
static_assert(sizeof(PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform) == 0x00000C, "Wrong size on PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform, Name_0) == 0x000000, "Member 'PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform, Behavior) == 0x000008, "Member 'PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform::Behavior' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.ResetControlPoint
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_ResetControlPoint final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_ResetControlPoint) == 0x000004, "Wrong alignment on PhysicsControlComponent_ResetControlPoint");
static_assert(sizeof(PhysicsControlComponent_ResetControlPoint) == 0x00000C, "Wrong size on PhysicsControlComponent_ResetControlPoint");
static_assert(offsetof(PhysicsControlComponent_ResetControlPoint, Name_0) == 0x000000, "Member 'PhysicsControlComponent_ResetControlPoint::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_ResetControlPoint, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_ResetControlPoint::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierCollisionType
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierCollisionType final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierCollisionType) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierCollisionType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierCollisionType) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifierCollisionType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierCollisionType, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierCollisionType::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierCollisionType, CollisionType) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierCollisionType::CollisionType' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierCollisionType, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetBodyModifierCollisionType::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierData
// 0x001C (0x001C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            ModifierData;                                      // 0x0008(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierData) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierData");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierData) == 0x00001C, "Wrong size on PhysicsControlComponent_SetBodyModifierData");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierData, ModifierData) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierData::ModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierData, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_SetBodyModifierData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierDatas
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierDatas final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            ModifierData;                                      // 0x0010(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierDatas) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifierDatas");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierDatas) == 0x000020, "Wrong size on PhysicsControlComponent_SetBodyModifierDatas");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierDatas, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierDatas::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierDatas, ModifierData) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifierDatas::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierDatasInSet
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierDatasInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            ModifierData;                                      // 0x0008(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierDatasInSet) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierDatasInSet");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierDatasInSet) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifierDatasInSet");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierDatasInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierDatasInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierDatasInSet, ModifierData) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierDatasInSet::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierGravityMultiplier
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierGravityMultiplier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityMultiplier;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierGravityMultiplier) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierGravityMultiplier");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierGravityMultiplier) == 0x000010, "Wrong size on PhysicsControlComponent_SetBodyModifierGravityMultiplier");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierGravityMultiplier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierGravityMultiplier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierGravityMultiplier, GravityMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierGravityMultiplier::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierGravityMultiplier, ReturnValue) == 0x00000C, "Member 'PhysicsControlComponent_SetBodyModifierGravityMultiplier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierKinematicTarget
// 0x0040 (0x0040 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierKinematicTarget final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KinematicTargetPosition;                           // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               KinematicTargetOrienation;                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMakeKinematic;                                    // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierKinematicTarget) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifierKinematicTarget");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierKinematicTarget) == 0x000040, "Wrong size on PhysicsControlComponent_SetBodyModifierKinematicTarget");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierKinematicTarget, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierKinematicTarget::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierKinematicTarget, KinematicTargetPosition) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierKinematicTarget::KinematicTargetPosition' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierKinematicTarget, KinematicTargetOrienation) == 0x000020, "Member 'PhysicsControlComponent_SetBodyModifierKinematicTarget::KinematicTargetOrienation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierKinematicTarget, bMakeKinematic) == 0x000038, "Member 'PhysicsControlComponent_SetBodyModifierKinematicTarget::bMakeKinematic' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierKinematicTarget, ReturnValue) == 0x000039, "Member 'PhysicsControlComponent_SetBodyModifierKinematicTarget::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierMovementType
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierMovementType final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsMovementType                          MovementType;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierMovementType) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierMovementType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierMovementType) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifierMovementType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierMovementType, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierMovementType::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierMovementType, MovementType) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierMovementType::MovementType' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierMovementType, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetBodyModifierMovementType::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierPhysicsBlendWeight
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeight;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight) == 0x000010, "Wrong size on PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight, PhysicsBlendWeight) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight::PhysicsBlendWeight' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight, ReturnValue) == 0x00000C, "Member 'PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersCollisionType
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersCollisionType final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersCollisionType) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersCollisionType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersCollisionType) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersCollisionType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersCollisionType, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersCollisionType::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersCollisionType, CollisionType) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersCollisionType::CollisionType' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersGravityMultiplier
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersGravityMultiplier final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         GravityMultiplier;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersGravityMultiplier) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersGravityMultiplier");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersGravityMultiplier) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersGravityMultiplier");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersGravityMultiplier, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersGravityMultiplier::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersGravityMultiplier, GravityMultiplier) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersGravityMultiplier::GravityMultiplier' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetCollisionType
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetCollisionType final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetCollisionType) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetCollisionType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetCollisionType) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetCollisionType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetCollisionType, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetCollisionType::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetCollisionType, CollisionType) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetCollisionType::CollisionType' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetGravityMultiplier
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityMultiplier;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier, GravityMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier::GravityMultiplier' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetMovementType
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetMovementType final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsMovementType                          MovementType;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetMovementType) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetMovementType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetMovementType) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetMovementType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetMovementType, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetMovementType::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetMovementType, MovementType) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetMovementType::MovementType' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetPhysicsBlendWeight
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeight;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight, PhysicsBlendWeight) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight::PhysicsBlendWeight' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetUpdateKinematicFromSimulation
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateKinematicFromSimulation;                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation, bUpdateKinematicFromSimulation) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation::bUpdateKinematicFromSimulation' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetUseSkeletalAnimation
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersMovementType
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersMovementType final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPhysicsMovementType                          MovementType;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersMovementType) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersMovementType");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersMovementType) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersMovementType");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersMovementType, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersMovementType::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersMovementType, MovementType) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersMovementType::MovementType' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierSparseData
// 0x001C (0x001C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierSparseData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      ModifierData;                                      // 0x0008(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierSparseData) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierSparseData");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierSparseData) == 0x00001C, "Wrong size on PhysicsControlComponent_SetBodyModifierSparseData");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierSparseData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseData, ModifierData) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierSparseData::ModifierData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseData, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_SetBodyModifierSparseData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierSparseDatas
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierSparseDatas final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      ModifierData;                                      // 0x0010(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierSparseDatas) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifierSparseDatas");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierSparseDatas) == 0x000020, "Wrong size on PhysicsControlComponent_SetBodyModifierSparseDatas");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseDatas, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierSparseDatas::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseDatas, ModifierData) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifierSparseDatas::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierSparseDatasInSet
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifierSparseDatasInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      ModifierData;                                      // 0x0008(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierSparseDatasInSet) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierSparseDatasInSet");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierSparseDatasInSet) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifierSparseDatasInSet");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseDatasInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierSparseDatasInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierSparseDatasInSet, ModifierData) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierSparseDatasInSet::ModifierData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersPhysicsBlendWeight
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeight;                                // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight, PhysicsBlendWeight) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight::PhysicsBlendWeight' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersUpdateKinematicFromSimulation
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUpdateKinematicFromSimulation;                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation, bUpdateKinematicFromSimulation) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation::bUpdateKinematicFromSimulation' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersUseSkeletalAnimation
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation) == 0x000018, "Wrong size on PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation, Names) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000010, "Member 'PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierUpdateKinematicFromSimulation
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateKinematicFromSimulation;                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation, bUpdateKinematicFromSimulation) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation::bUpdateKinematicFromSimulation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierUseSkeletalAnimation
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation) == 0x00000C, "Wrong size on PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000008, "Member 'PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetCachedBoneData
// 0x00B0 (0x00B0 - 0x0000)
struct PhysicsControlComponent_SetCachedBoneData final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TM;                                                // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0070(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0088(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetCachedBoneData) == 0x000010, "Wrong alignment on PhysicsControlComponent_SetCachedBoneData");
static_assert(sizeof(PhysicsControlComponent_SetCachedBoneData) == 0x0000B0, "Wrong size on PhysicsControlComponent_SetCachedBoneData");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_SetCachedBoneData::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, BoneName) == 0x000008, "Member 'PhysicsControlComponent_SetCachedBoneData::BoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, TM) == 0x000010, "Member 'PhysicsControlComponent_SetCachedBoneData::TM' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, Velocity) == 0x000070, "Member 'PhysicsControlComponent_SetCachedBoneData::Velocity' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, AngularVelocity) == 0x000088, "Member 'PhysicsControlComponent_SetCachedBoneData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetCachedBoneData, ReturnValue) == 0x0000A0, "Member 'PhysicsControlComponent_SetCachedBoneData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlAngularData
// 0x001C (0x001C - 0x0000)
struct PhysicsControlComponent_SetControlAngularData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRatio;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraDamping;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlAngularData) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlAngularData");
static_assert(sizeof(PhysicsControlComponent_SetControlAngularData) == 0x00001C, "Wrong size on PhysicsControlComponent_SetControlAngularData");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlAngularData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, Strength) == 0x000008, "Member 'PhysicsControlComponent_SetControlAngularData::Strength' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, DampingRatio) == 0x00000C, "Member 'PhysicsControlComponent_SetControlAngularData::DampingRatio' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, ExtraDamping) == 0x000010, "Member 'PhysicsControlComponent_SetControlAngularData::ExtraDamping' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, MaxTorque) == 0x000014, "Member 'PhysicsControlComponent_SetControlAngularData::MaxTorque' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, bEnableControl) == 0x000018, "Member 'PhysicsControlComponent_SetControlAngularData::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlAngularData, ReturnValue) == 0x000019, "Member 'PhysicsControlComponent_SetControlAngularData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlData
// 0x0060 (0x0060 - 0x0000)
struct PhysicsControlComponent_SetControlData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0008(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlData) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlData");
static_assert(sizeof(PhysicsControlComponent_SetControlData) == 0x000060, "Wrong size on PhysicsControlComponent_SetControlData");
static_assert(offsetof(PhysicsControlComponent_SetControlData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlData, ControlData) == 0x000008, "Member 'PhysicsControlComponent_SetControlData::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlData, ReturnValue) == 0x000058, "Member 'PhysicsControlComponent_SetControlData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlDatas
// 0x0060 (0x0060 - 0x0000)
struct PhysicsControlComponent_SetControlDatas final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0010(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlDatas) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlDatas");
static_assert(sizeof(PhysicsControlComponent_SetControlDatas) == 0x000060, "Wrong size on PhysicsControlComponent_SetControlDatas");
static_assert(offsetof(PhysicsControlComponent_SetControlDatas, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlDatas::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlDatas, ControlData) == 0x000010, "Member 'PhysicsControlComponent_SetControlDatas::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlDatasInSet
// 0x0058 (0x0058 - 0x0000)
struct PhysicsControlComponent_SetControlDatasInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0008(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlDatasInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlDatasInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlDatasInSet) == 0x000058, "Wrong size on PhysicsControlComponent_SetControlDatasInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlDatasInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlDatasInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlDatasInSet, ControlData) == 0x000008, "Member 'PhysicsControlComponent_SetControlDatasInSet::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlDisableCollision
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetControlDisableCollision final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCollision;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlDisableCollision) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlDisableCollision");
static_assert(sizeof(PhysicsControlComponent_SetControlDisableCollision) == 0x00000C, "Wrong size on PhysicsControlComponent_SetControlDisableCollision");
static_assert(offsetof(PhysicsControlComponent_SetControlDisableCollision, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlDisableCollision::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlDisableCollision, bDisableCollision) == 0x000008, "Member 'PhysicsControlComponent_SetControlDisableCollision::bDisableCollision' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlDisableCollision, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetControlDisableCollision::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlEnabled
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetControlEnabled final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlEnabled) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlEnabled");
static_assert(sizeof(PhysicsControlComponent_SetControlEnabled) == 0x00000C, "Wrong size on PhysicsControlComponent_SetControlEnabled");
static_assert(offsetof(PhysicsControlComponent_SetControlEnabled, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlEnabled::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlEnabled, bEnable) == 0x000008, "Member 'PhysicsControlComponent_SetControlEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlEnabled, ReturnValue) == 0x000009, "Member 'PhysicsControlComponent_SetControlEnabled::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlLinearData
// 0x001C (0x001C - 0x0000)
struct PhysicsControlComponent_SetControlLinearData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRatio;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraDamping;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlLinearData) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlLinearData");
static_assert(sizeof(PhysicsControlComponent_SetControlLinearData) == 0x00001C, "Wrong size on PhysicsControlComponent_SetControlLinearData");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlLinearData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, Strength) == 0x000008, "Member 'PhysicsControlComponent_SetControlLinearData::Strength' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, DampingRatio) == 0x00000C, "Member 'PhysicsControlComponent_SetControlLinearData::DampingRatio' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, ExtraDamping) == 0x000010, "Member 'PhysicsControlComponent_SetControlLinearData::ExtraDamping' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, MaxForce) == 0x000014, "Member 'PhysicsControlComponent_SetControlLinearData::MaxForce' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, bEnableControl) == 0x000018, "Member 'PhysicsControlComponent_SetControlLinearData::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlLinearData, ReturnValue) == 0x000019, "Member 'PhysicsControlComponent_SetControlLinearData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlMultiplier
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlComponent_SetControlMultiplier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0008(0x0070)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlMultiplier) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlMultiplier");
static_assert(sizeof(PhysicsControlComponent_SetControlMultiplier) == 0x000080, "Wrong size on PhysicsControlComponent_SetControlMultiplier");
static_assert(offsetof(PhysicsControlComponent_SetControlMultiplier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlMultiplier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultiplier, ControlMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetControlMultiplier::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultiplier, bEnableControl) == 0x000078, "Member 'PhysicsControlComponent_SetControlMultiplier::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultiplier, ReturnValue) == 0x000079, "Member 'PhysicsControlComponent_SetControlMultiplier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlMultipliers
// 0x0088 (0x0088 - 0x0000)
struct PhysicsControlComponent_SetControlMultipliers final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0010(0x0070)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0080(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlMultipliers) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlMultipliers");
static_assert(sizeof(PhysicsControlComponent_SetControlMultipliers) == 0x000088, "Wrong size on PhysicsControlComponent_SetControlMultipliers");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliers, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlMultipliers::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliers, ControlMultiplier) == 0x000010, "Member 'PhysicsControlComponent_SetControlMultipliers::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliers, bEnableControl) == 0x000080, "Member 'PhysicsControlComponent_SetControlMultipliers::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlMultipliersInSet
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlComponent_SetControlMultipliersInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0008(0x0070)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlMultipliersInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlMultipliersInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlMultipliersInSet) == 0x000080, "Wrong size on PhysicsControlComponent_SetControlMultipliersInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliersInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlMultipliersInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliersInSet, ControlMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetControlMultipliersInSet::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlMultipliersInSet, bEnableControl) == 0x000078, "Member 'PhysicsControlComponent_SetControlMultipliersInSet::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlParent
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_SetControlParent final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlParent) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlParent");
static_assert(sizeof(PhysicsControlComponent_SetControlParent) == 0x000020, "Wrong size on PhysicsControlComponent_SetControlParent");
static_assert(offsetof(PhysicsControlComponent_SetControlParent, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlParent::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParent, ParentMeshComponent) == 0x000008, "Member 'PhysicsControlComponent_SetControlParent::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParent, ParentBoneName) == 0x000010, "Member 'PhysicsControlComponent_SetControlParent::ParentBoneName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParent, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_SetControlParent::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlParents
// 0x0020 (0x0020 - 0x0000)
struct PhysicsControlComponent_SetControlParents final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlParents) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlParents");
static_assert(sizeof(PhysicsControlComponent_SetControlParents) == 0x000020, "Wrong size on PhysicsControlComponent_SetControlParents");
static_assert(offsetof(PhysicsControlComponent_SetControlParents, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlParents::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParents, ParentMeshComponent) == 0x000010, "Member 'PhysicsControlComponent_SetControlParents::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParents, ParentBoneName) == 0x000018, "Member 'PhysicsControlComponent_SetControlParents::ParentBoneName' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlParentsInSet
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetControlParentsInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlParentsInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlParentsInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlParentsInSet) == 0x000018, "Wrong size on PhysicsControlComponent_SetControlParentsInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlParentsInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlParentsInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParentsInSet, ParentMeshComponent) == 0x000008, "Member 'PhysicsControlComponent_SetControlParentsInSet::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlParentsInSet, ParentBoneName) == 0x000010, "Member 'PhysicsControlComponent_SetControlParentsInSet::ParentBoneName' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlPoint
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlPoint final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlPoint) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlPoint");
static_assert(sizeof(PhysicsControlComponent_SetControlPoint) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlPoint");
static_assert(offsetof(PhysicsControlComponent_SetControlPoint, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlPoint::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlPoint, Position) == 0x000008, "Member 'PhysicsControlComponent_SetControlPoint::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlPoint, ReturnValue) == 0x000020, "Member 'PhysicsControlComponent_SetControlPoint::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsDisableCollision
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetControlsDisableCollision final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bDisableCollision;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlsDisableCollision) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlsDisableCollision");
static_assert(sizeof(PhysicsControlComponent_SetControlsDisableCollision) == 0x000018, "Wrong size on PhysicsControlComponent_SetControlsDisableCollision");
static_assert(offsetof(PhysicsControlComponent_SetControlsDisableCollision, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlsDisableCollision::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsDisableCollision, bDisableCollision) == 0x000010, "Member 'PhysicsControlComponent_SetControlsDisableCollision::bDisableCollision' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsEnabled
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetControlsEnabled final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlsEnabled) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlsEnabled");
static_assert(sizeof(PhysicsControlComponent_SetControlsEnabled) == 0x000018, "Wrong size on PhysicsControlComponent_SetControlsEnabled");
static_assert(offsetof(PhysicsControlComponent_SetControlsEnabled, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlsEnabled::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsEnabled, bEnable) == 0x000010, "Member 'PhysicsControlComponent_SetControlsEnabled::bEnable' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetDisableCollision
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetControlsInSetDisableCollision final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCollision;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlsInSetDisableCollision) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlsInSetDisableCollision");
static_assert(sizeof(PhysicsControlComponent_SetControlsInSetDisableCollision) == 0x00000C, "Wrong size on PhysicsControlComponent_SetControlsInSetDisableCollision");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetDisableCollision, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlsInSetDisableCollision::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetDisableCollision, bDisableCollision) == 0x000008, "Member 'PhysicsControlComponent_SetControlsInSetDisableCollision::bDisableCollision' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetEnabled
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_SetControlsInSetEnabled final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlsInSetEnabled) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlsInSetEnabled");
static_assert(sizeof(PhysicsControlComponent_SetControlsInSetEnabled) == 0x00000C, "Wrong size on PhysicsControlComponent_SetControlsInSetEnabled");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetEnabled, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlsInSetEnabled::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetEnabled, bEnable) == 0x000008, "Member 'PhysicsControlComponent_SetControlsInSetEnabled::bEnable' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetUseSkeletalAnimation
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation) == 0x000010, "Wrong size on PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000008, "Member 'PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation, SkeletalAnimationVelocityMultiplier) == 0x00000C, "Member 'PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation::SkeletalAnimationVelocityMultiplier' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseData
// 0x0060 (0x0060 - 0x0000)
struct PhysicsControlComponent_SetControlSparseData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              ControlData;                                       // 0x0008(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseData) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseData");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseData) == 0x000060, "Wrong size on PhysicsControlComponent_SetControlSparseData");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseData, ControlData) == 0x000008, "Member 'PhysicsControlComponent_SetControlSparseData::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseData, ReturnValue) == 0x000058, "Member 'PhysicsControlComponent_SetControlSparseData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseDatas
// 0x0060 (0x0060 - 0x0000)
struct PhysicsControlComponent_SetControlSparseDatas final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              ControlData;                                       // 0x0010(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseDatas) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseDatas");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseDatas) == 0x000060, "Wrong size on PhysicsControlComponent_SetControlSparseDatas");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseDatas, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseDatas::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseDatas, ControlData) == 0x000010, "Member 'PhysicsControlComponent_SetControlSparseDatas::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseDatasInSet
// 0x0058 (0x0058 - 0x0000)
struct PhysicsControlComponent_SetControlSparseDatasInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              ControlData;                                       // 0x0008(0x0050)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseDatasInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseDatasInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseDatasInSet) == 0x000058, "Wrong size on PhysicsControlComponent_SetControlSparseDatasInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseDatasInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseDatasInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseDatasInSet, ControlData) == 0x000008, "Member 'PhysicsControlComponent_SetControlSparseDatasInSet::ControlData' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseMultiplier
// 0x0088 (0x0088 - 0x0000)
struct PhysicsControlComponent_SetControlSparseMultiplier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseMultiplier        ControlMultiplier;                                 // 0x0008(0x0078)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0080(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseMultiplier) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseMultiplier");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseMultiplier) == 0x000088, "Wrong size on PhysicsControlComponent_SetControlSparseMultiplier");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultiplier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseMultiplier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultiplier, ControlMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetControlSparseMultiplier::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultiplier, bEnableControl) == 0x000080, "Member 'PhysicsControlComponent_SetControlSparseMultiplier::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultiplier, ReturnValue) == 0x000081, "Member 'PhysicsControlComponent_SetControlSparseMultiplier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseMultipliers
// 0x0090 (0x0090 - 0x0000)
struct PhysicsControlComponent_SetControlSparseMultipliers final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseMultiplier        ControlMultiplier;                                 // 0x0010(0x0078)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0088(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseMultipliers) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseMultipliers");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseMultipliers) == 0x000090, "Wrong size on PhysicsControlComponent_SetControlSparseMultipliers");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliers, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseMultipliers::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliers, ControlMultiplier) == 0x000010, "Member 'PhysicsControlComponent_SetControlSparseMultipliers::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliers, bEnableControl) == 0x000088, "Member 'PhysicsControlComponent_SetControlSparseMultipliers::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlSparseMultipliersInSet
// 0x0088 (0x0088 - 0x0000)
struct PhysicsControlComponent_SetControlSparseMultipliersInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseMultiplier        ControlMultiplier;                                 // 0x0008(0x0078)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0080(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlSparseMultipliersInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlSparseMultipliersInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlSparseMultipliersInSet) == 0x000088, "Wrong size on PhysicsControlComponent_SetControlSparseMultipliersInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliersInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlSparseMultipliersInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliersInSet, ControlMultiplier) == 0x000008, "Member 'PhysicsControlComponent_SetControlSparseMultipliersInSet::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlSparseMultipliersInSet, bEnableControl) == 0x000080, "Member 'PhysicsControlComponent_SetControlSparseMultipliersInSet::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlsUseSkeletalAnimation
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_SetControlsUseSkeletalAnimation final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_SetControlsUseSkeletalAnimation) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlsUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetControlsUseSkeletalAnimation) == 0x000018, "Wrong size on PhysicsControlComponent_SetControlsUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetControlsUseSkeletalAnimation, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlsUseSkeletalAnimation::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000010, "Member 'PhysicsControlComponent_SetControlsUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlsUseSkeletalAnimation, SkeletalAnimationVelocityMultiplier) == 0x000014, "Member 'PhysicsControlComponent_SetControlsUseSkeletalAnimation::SkeletalAnimationVelocityMultiplier' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTarget
// 0x0078 (0x0078 - 0x0000)
struct PhysicsControlComponent_SetControlTarget final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0008(0x0068)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTarget) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTarget");
static_assert(sizeof(PhysicsControlComponent_SetControlTarget) == 0x000078, "Wrong size on PhysicsControlComponent_SetControlTarget");
static_assert(offsetof(PhysicsControlComponent_SetControlTarget, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlTarget::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTarget, ControlTarget) == 0x000008, "Member 'PhysicsControlComponent_SetControlTarget::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTarget, bEnableControl) == 0x000070, "Member 'PhysicsControlComponent_SetControlTarget::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTarget, ReturnValue) == 0x000071, "Member 'PhysicsControlComponent_SetControlTarget::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientation
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetOrientation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AngularVelocityDeltaTime;                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetOrientation) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetOrientation");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetOrientation) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetOrientation");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetOrientation::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, Orientation) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, AngularVelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetOrientation::AngularVelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetOrientation::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetOrientation::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientation, ReturnValue) == 0x000026, "Member 'PhysicsControlComponent_SetControlTargetOrientation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientations
// 0x0030 (0x0030 - 0x0000)
struct PhysicsControlComponent_SetControlTargetOrientations final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AngularVelocityDeltaTime;                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetOrientations) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetOrientations");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetOrientations) == 0x000030, "Wrong size on PhysicsControlComponent_SetControlTargetOrientations");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientations, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetOrientations::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientations, Orientation) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetOrientations::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientations, AngularVelocityDeltaTime) == 0x000028, "Member 'PhysicsControlComponent_SetControlTargetOrientations::AngularVelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientations, bEnableControl) == 0x00002C, "Member 'PhysicsControlComponent_SetControlTargetOrientations::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientations, bApplyControlPointToTarget) == 0x00002D, "Member 'PhysicsControlComponent_SetControlTargetOrientations::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientationsFromArray
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetOrientationsFromArray final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       Orientations;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetOrientationsFromArray) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetOrientationsFromArray");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetOrientationsFromArray) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetOrientationsFromArray");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, Orientations) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::Orientations' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, VelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsFromArray, ReturnValue) == 0x000026, "Member 'PhysicsControlComponent_SetControlTargetOrientationsFromArray::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientationsInSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetOrientationsInSet final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AngularVelocityDeltaTime;                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetOrientationsInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetOrientationsInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetOrientationsInSet) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetOrientationsInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsInSet, SetName) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetOrientationsInSet::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsInSet, Orientation) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetOrientationsInSet::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsInSet, AngularVelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetOrientationsInSet::AngularVelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsInSet, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetOrientationsInSet::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetOrientationsInSet, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetOrientationsInSet::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPoses
// 0x0070 (0x0070 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPoses final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParentPosition;                                    // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ParentOrientation;                                 // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ChildPosition;                                     // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ChildOrientation;                                  // 0x0050(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0068(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x006C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x006D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPoses) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPoses");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPoses) == 0x000070, "Wrong size on PhysicsControlComponent_SetControlTargetPoses");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPoses::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, ParentPosition) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetPoses::ParentPosition' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, ParentOrientation) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPoses::ParentOrientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, ChildPosition) == 0x000038, "Member 'PhysicsControlComponent_SetControlTargetPoses::ChildPosition' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, ChildOrientation) == 0x000050, "Member 'PhysicsControlComponent_SetControlTargetPoses::ChildOrientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, VelocityDeltaTime) == 0x000068, "Member 'PhysicsControlComponent_SetControlTargetPoses::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, bEnableControl) == 0x00006C, "Member 'PhysicsControlComponent_SetControlTargetPoses::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPoses, ReturnValue) == 0x00006D, "Member 'PhysicsControlComponent_SetControlTargetPoses::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPosition
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPosition final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPosition) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPosition");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPosition) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetPosition");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPosition::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, Position) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetPosition::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, VelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPosition::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetPosition::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetPosition::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPosition, ReturnValue) == 0x000026, "Member 'PhysicsControlComponent_SetControlTargetPosition::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionAndOrientation
// 0x0040 (0x0040 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionAndOrientation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x003D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionAndOrientation) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionAndOrientation");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionAndOrientation) == 0x000040, "Wrong size on PhysicsControlComponent_SetControlTargetPositionAndOrientation");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, Position) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, Orientation) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, VelocityDeltaTime) == 0x000038, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, bEnableControl) == 0x00003C, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, bApplyControlPointToTarget) == 0x00003D, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionAndOrientation, ReturnValue) == 0x00003E, "Member 'PhysicsControlComponent_SetControlTargetPositionAndOrientation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositions
// 0x0030 (0x0030 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositions final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositions) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositions");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositions) == 0x000030, "Wrong size on PhysicsControlComponent_SetControlTargetPositions");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositions, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositions::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositions, Position) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetPositions::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositions, VelocityDeltaTime) == 0x000028, "Member 'PhysicsControlComponent_SetControlTargetPositions::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositions, bEnableControl) == 0x00002C, "Member 'PhysicsControlComponent_SetControlTargetPositions::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositions, bApplyControlPointToTarget) == 0x00002D, "Member 'PhysicsControlComponent_SetControlTargetPositions::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientations
// 0x0048 (0x0048 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionsAndOrientations final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0044(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0045(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionsAndOrientations");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations) == 0x000048, "Wrong size on PhysicsControlComponent_SetControlTargetPositionsAndOrientations");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, Position) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, Orientation) == 0x000028, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, VelocityDeltaTime) == 0x000040, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, bEnableControl) == 0x000044, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientations, bApplyControlPointToTarget) == 0x000045, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientations::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientationsFromArray
// 0x0038 (0x0038 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Positions;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       Orientations;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0035(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0036(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray) == 0x000038, "Wrong size on PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, Positions) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::Positions' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, Orientations) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::Orientations' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, VelocityDeltaTime) == 0x000030, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, bEnableControl) == 0x000034, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, bApplyControlPointToTarget) == 0x000035, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray, ReturnValue) == 0x000036, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientationsInSet
// 0x0040 (0x0040 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x003D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet) == 0x000040, "Wrong size on PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, SetName) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, Position) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, Orientation) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::Orientation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, VelocityDeltaTime) == 0x000038, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, bEnableControl) == 0x00003C, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet, bApplyControlPointToTarget) == 0x00003D, "Member 'PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsFromArray
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionsFromArray final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Positions;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionsFromArray) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionsFromArray");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionsFromArray) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetPositionsFromArray");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, Positions) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::Positions' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, VelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::bApplyControlPointToTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsFromArray, ReturnValue) == 0x000026, "Member 'PhysicsControlComponent_SetControlTargetPositionsFromArray::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsInSet
// 0x0028 (0x0028 - 0x0000)
struct PhysicsControlComponent_SetControlTargetPositionsInSet final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDeltaTime;                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetPositionsInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetPositionsInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetPositionsInSet) == 0x000028, "Wrong size on PhysicsControlComponent_SetControlTargetPositionsInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsInSet, SetName) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetPositionsInSet::SetName' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsInSet, Position) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetPositionsInSet::Position' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsInSet, VelocityDeltaTime) == 0x000020, "Member 'PhysicsControlComponent_SetControlTargetPositionsInSet::VelocityDeltaTime' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsInSet, bEnableControl) == 0x000024, "Member 'PhysicsControlComponent_SetControlTargetPositionsInSet::bEnableControl' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetPositionsInSet, bApplyControlPointToTarget) == 0x000025, "Member 'PhysicsControlComponent_SetControlTargetPositionsInSet::bApplyControlPointToTarget' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargets
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlComponent_SetControlTargets final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0010(0x0068)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargets) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargets");
static_assert(sizeof(PhysicsControlComponent_SetControlTargets) == 0x000080, "Wrong size on PhysicsControlComponent_SetControlTargets");
static_assert(offsetof(PhysicsControlComponent_SetControlTargets, Names) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargets::Names' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargets, ControlTarget) == 0x000010, "Member 'PhysicsControlComponent_SetControlTargets::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargets, bEnableControl) == 0x000078, "Member 'PhysicsControlComponent_SetControlTargets::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlTargetsInSet
// 0x0078 (0x0078 - 0x0000)
struct PhysicsControlComponent_SetControlTargetsInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0008(0x0068)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableControl;                                    // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlTargetsInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_SetControlTargetsInSet");
static_assert(sizeof(PhysicsControlComponent_SetControlTargetsInSet) == 0x000078, "Wrong size on PhysicsControlComponent_SetControlTargetsInSet");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetsInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_SetControlTargetsInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetsInSet, ControlTarget) == 0x000008, "Member 'PhysicsControlComponent_SetControlTargetsInSet::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlTargetsInSet, bEnableControl) == 0x000070, "Member 'PhysicsControlComponent_SetControlTargetsInSet::bEnableControl' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.SetControlUseSkeletalAnimation
// 0x0014 (0x0014 - 0x0000)
struct PhysicsControlComponent_SetControlUseSkeletalAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_SetControlUseSkeletalAnimation) == 0x000004, "Wrong alignment on PhysicsControlComponent_SetControlUseSkeletalAnimation");
static_assert(sizeof(PhysicsControlComponent_SetControlUseSkeletalAnimation) == 0x000014, "Wrong size on PhysicsControlComponent_SetControlUseSkeletalAnimation");
static_assert(offsetof(PhysicsControlComponent_SetControlUseSkeletalAnimation, Name_0) == 0x000000, "Member 'PhysicsControlComponent_SetControlUseSkeletalAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlUseSkeletalAnimation, bUseSkeletalAnimation) == 0x000008, "Member 'PhysicsControlComponent_SetControlUseSkeletalAnimation::bUseSkeletalAnimation' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlUseSkeletalAnimation, SkeletalAnimationVelocityMultiplier) == 0x00000C, "Member 'PhysicsControlComponent_SetControlUseSkeletalAnimation::SkeletalAnimationVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_SetControlUseSkeletalAnimation, ReturnValue) == 0x000010, "Member 'PhysicsControlComponent_SetControlUseSkeletalAnimation::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.UpdateControls
// 0x0004 (0x0004 - 0x0000)
struct PhysicsControlComponent_UpdateControls final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_UpdateControls) == 0x000004, "Wrong alignment on PhysicsControlComponent_UpdateControls");
static_assert(sizeof(PhysicsControlComponent_UpdateControls) == 0x000004, "Wrong size on PhysicsControlComponent_UpdateControls");
static_assert(offsetof(PhysicsControlComponent_UpdateControls, DeltaTime) == 0x000000, "Member 'PhysicsControlComponent_UpdateControls::DeltaTime' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.UpdateTargetCaches
// 0x0004 (0x0004 - 0x0000)
struct PhysicsControlComponent_UpdateTargetCaches final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_UpdateTargetCaches) == 0x000004, "Wrong alignment on PhysicsControlComponent_UpdateTargetCaches");
static_assert(sizeof(PhysicsControlComponent_UpdateTargetCaches) == 0x000004, "Wrong size on PhysicsControlComponent_UpdateTargetCaches");
static_assert(offsetof(PhysicsControlComponent_UpdateTargetCaches, DeltaTime) == 0x000000, "Member 'PhysicsControlComponent_UpdateTargetCaches::DeltaTime' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetAllBodyModifierNames
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_GetAllBodyModifierNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetAllBodyModifierNames) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetAllBodyModifierNames");
static_assert(sizeof(PhysicsControlComponent_GetAllBodyModifierNames) == 0x000010, "Wrong size on PhysicsControlComponent_GetAllBodyModifierNames");
static_assert(offsetof(PhysicsControlComponent_GetAllBodyModifierNames, ReturnValue) == 0x000000, "Member 'PhysicsControlComponent_GetAllBodyModifierNames::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetAllControlNames
// 0x0010 (0x0010 - 0x0000)
struct PhysicsControlComponent_GetAllControlNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetAllControlNames) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetAllControlNames");
static_assert(sizeof(PhysicsControlComponent_GetAllControlNames) == 0x000010, "Wrong size on PhysicsControlComponent_GetAllControlNames");
static_assert(offsetof(PhysicsControlComponent_GetAllControlNames, ReturnValue) == 0x000000, "Member 'PhysicsControlComponent_GetAllControlNames::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetBodyModifierExists
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_GetBodyModifierExists final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetBodyModifierExists) == 0x000004, "Wrong alignment on PhysicsControlComponent_GetBodyModifierExists");
static_assert(sizeof(PhysicsControlComponent_GetBodyModifierExists) == 0x00000C, "Wrong size on PhysicsControlComponent_GetBodyModifierExists");
static_assert(offsetof(PhysicsControlComponent_GetBodyModifierExists, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetBodyModifierExists::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetBodyModifierExists, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetBodyModifierExists::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetBodyModifierNamesInSet
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_GetBodyModifierNamesInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetBodyModifierNamesInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetBodyModifierNamesInSet");
static_assert(sizeof(PhysicsControlComponent_GetBodyModifierNamesInSet) == 0x000018, "Wrong size on PhysicsControlComponent_GetBodyModifierNamesInSet");
static_assert(offsetof(PhysicsControlComponent_GetBodyModifierNamesInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_GetBodyModifierNamesInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetBodyModifierNamesInSet, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetBodyModifierNamesInSet::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlData
// 0x0060 (0x0060 - 0x0000)
struct PhysicsControlComponent_GetControlData final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0008(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetControlData) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetControlData");
static_assert(sizeof(PhysicsControlComponent_GetControlData) == 0x000060, "Wrong size on PhysicsControlComponent_GetControlData");
static_assert(offsetof(PhysicsControlComponent_GetControlData, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetControlData::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlData, ControlData) == 0x000008, "Member 'PhysicsControlComponent_GetControlData::ControlData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlData, ReturnValue) == 0x000058, "Member 'PhysicsControlComponent_GetControlData::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlEnabled
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_GetControlEnabled final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetControlEnabled) == 0x000004, "Wrong alignment on PhysicsControlComponent_GetControlEnabled");
static_assert(sizeof(PhysicsControlComponent_GetControlEnabled) == 0x00000C, "Wrong size on PhysicsControlComponent_GetControlEnabled");
static_assert(offsetof(PhysicsControlComponent_GetControlEnabled, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetControlEnabled::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlEnabled, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetControlEnabled::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlExists
// 0x000C (0x000C - 0x0000)
struct PhysicsControlComponent_GetControlExists final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetControlExists) == 0x000004, "Wrong alignment on PhysicsControlComponent_GetControlExists");
static_assert(sizeof(PhysicsControlComponent_GetControlExists) == 0x00000C, "Wrong size on PhysicsControlComponent_GetControlExists");
static_assert(offsetof(PhysicsControlComponent_GetControlExists, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetControlExists::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlExists, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetControlExists::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlMultiplier
// 0x0080 (0x0080 - 0x0000)
struct PhysicsControlComponent_GetControlMultiplier final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0008(0x0070)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetControlMultiplier) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetControlMultiplier");
static_assert(sizeof(PhysicsControlComponent_GetControlMultiplier) == 0x000080, "Wrong size on PhysicsControlComponent_GetControlMultiplier");
static_assert(offsetof(PhysicsControlComponent_GetControlMultiplier, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetControlMultiplier::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlMultiplier, ControlMultiplier) == 0x000008, "Member 'PhysicsControlComponent_GetControlMultiplier::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlMultiplier, ReturnValue) == 0x000078, "Member 'PhysicsControlComponent_GetControlMultiplier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlNamesInSet
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_GetControlNamesInSet final
{
public:
	class FName                                   Set;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetControlNamesInSet) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetControlNamesInSet");
static_assert(sizeof(PhysicsControlComponent_GetControlNamesInSet) == 0x000018, "Wrong size on PhysicsControlComponent_GetControlNamesInSet");
static_assert(offsetof(PhysicsControlComponent_GetControlNamesInSet, Set) == 0x000000, "Member 'PhysicsControlComponent_GetControlNamesInSet::Set' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlNamesInSet, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetControlNamesInSet::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetControlTarget
// 0x0078 (0x0078 - 0x0000)
struct PhysicsControlComponent_GetControlTarget final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x0008(0x0068)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsControlComponent_GetControlTarget) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetControlTarget");
static_assert(sizeof(PhysicsControlComponent_GetControlTarget) == 0x000078, "Wrong size on PhysicsControlComponent_GetControlTarget");
static_assert(offsetof(PhysicsControlComponent_GetControlTarget, Name_0) == 0x000000, "Member 'PhysicsControlComponent_GetControlTarget::Name_0' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlTarget, ControlTarget) == 0x000008, "Member 'PhysicsControlComponent_GetControlTarget::ControlTarget' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetControlTarget, ReturnValue) == 0x000070, "Member 'PhysicsControlComponent_GetControlTarget::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetLimbBonesFromSkeletalMesh
// 0x0068 (0x0068 - 0x0000)
struct PhysicsControlComponent_GetLimbBonesFromSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPhysicsControlLimbBones> ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetLimbBonesFromSkeletalMesh) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetLimbBonesFromSkeletalMesh");
static_assert(sizeof(PhysicsControlComponent_GetLimbBonesFromSkeletalMesh) == 0x000068, "Wrong size on PhysicsControlComponent_GetLimbBonesFromSkeletalMesh");
static_assert(offsetof(PhysicsControlComponent_GetLimbBonesFromSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'PhysicsControlComponent_GetLimbBonesFromSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetLimbBonesFromSkeletalMesh, LimbSetupData) == 0x000008, "Member 'PhysicsControlComponent_GetLimbBonesFromSkeletalMesh::LimbSetupData' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetLimbBonesFromSkeletalMesh, ReturnValue) == 0x000018, "Member 'PhysicsControlComponent_GetLimbBonesFromSkeletalMesh::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetSetsContainingBodyModifier
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_GetSetsContainingBodyModifier final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetSetsContainingBodyModifier) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetSetsContainingBodyModifier");
static_assert(sizeof(PhysicsControlComponent_GetSetsContainingBodyModifier) == 0x000018, "Wrong size on PhysicsControlComponent_GetSetsContainingBodyModifier");
static_assert(offsetof(PhysicsControlComponent_GetSetsContainingBodyModifier, Control) == 0x000000, "Member 'PhysicsControlComponent_GetSetsContainingBodyModifier::Control' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetSetsContainingBodyModifier, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetSetsContainingBodyModifier::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlComponent.GetSetsContainingControl
// 0x0018 (0x0018 - 0x0000)
struct PhysicsControlComponent_GetSetsContainingControl final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlComponent_GetSetsContainingControl) == 0x000008, "Wrong alignment on PhysicsControlComponent_GetSetsContainingControl");
static_assert(sizeof(PhysicsControlComponent_GetSetsContainingControl) == 0x000018, "Wrong size on PhysicsControlComponent_GetSetsContainingControl");
static_assert(offsetof(PhysicsControlComponent_GetSetsContainingControl, Control) == 0x000000, "Member 'PhysicsControlComponent_GetSetsContainingControl::Control' has a wrong offset!");
static_assert(offsetof(PhysicsControlComponent_GetSetsContainingControl, ReturnValue) == 0x000008, "Member 'PhysicsControlComponent_GetSetsContainingControl::ReturnValue' has a wrong offset!");

// Function PhysicsControl.PhysicsControlInitializerComponent.CreateControls
// 0x0008 (0x0008 - 0x0000)
struct PhysicsControlInitializerComponent_CreateControls final
{
public:
	class UPhysicsControlComponent*               PhysicsControlComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsControlInitializerComponent_CreateControls) == 0x000008, "Wrong alignment on PhysicsControlInitializerComponent_CreateControls");
static_assert(sizeof(PhysicsControlInitializerComponent_CreateControls) == 0x000008, "Wrong size on PhysicsControlInitializerComponent_CreateControls");
static_assert(offsetof(PhysicsControlInitializerComponent_CreateControls, PhysicsControlComponent) == 0x000000, "Member 'PhysicsControlInitializerComponent_CreateControls::PhysicsControlComponent' has a wrong offset!");

}

