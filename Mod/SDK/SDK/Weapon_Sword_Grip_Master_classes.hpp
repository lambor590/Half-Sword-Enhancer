#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weapon_Sword_Grip_Master

#include "Basic.hpp"

#include "Modular_Weapon_Grip_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Weapon_Sword_Grip_Master.Weapon_Sword_Grip_Master_C
// 0x0078 (0x0748 - 0x06D0)
class AWeapon_Sword_Grip_Master_C : public AModular_Weapon_Grip_C
{
public:
	TArray<class UStaticMesh*>                    Random_Mesh;                                       // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Start_Mass;                                        // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length__Unscaled_;                           // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Blades_1;                                          // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Blades_2;                                          // 0x0700(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Blades_3;                                          // 0x0710(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Blade_Length_Notch_1;                              // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length_Notch_2;                              // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length_Notch_3;                              // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length_Min;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blade_Length_Max;                                  // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Weapon_Sword_Grip_Master_C">();
	}
	static class AWeapon_Sword_Grip_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeapon_Sword_Grip_Master_C>();
	}
};
static_assert(alignof(AWeapon_Sword_Grip_Master_C) == 0x000008, "Wrong alignment on AWeapon_Sword_Grip_Master_C");
static_assert(sizeof(AWeapon_Sword_Grip_Master_C) == 0x000748, "Wrong size on AWeapon_Sword_Grip_Master_C");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Random_Mesh) == 0x0006D0, "Member 'AWeapon_Sword_Grip_Master_C::Random_Mesh' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Start_Mass) == 0x0006E0, "Member 'AWeapon_Sword_Grip_Master_C::Start_Mass' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length__Unscaled_) == 0x0006E8, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length__Unscaled_' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blades_1) == 0x0006F0, "Member 'AWeapon_Sword_Grip_Master_C::Blades_1' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blades_2) == 0x000700, "Member 'AWeapon_Sword_Grip_Master_C::Blades_2' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blades_3) == 0x000710, "Member 'AWeapon_Sword_Grip_Master_C::Blades_3' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length_Notch_1) == 0x000720, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length_Notch_1' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length_Notch_2) == 0x000728, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length_Notch_2' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length_Notch_3) == 0x000730, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length_Notch_3' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length_Min) == 0x000738, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length_Min' has a wrong offset!");
static_assert(offsetof(AWeapon_Sword_Grip_Master_C, Blade_Length_Max) == 0x000740, "Member 'AWeapon_Sword_Grip_Master_C::Blade_Length_Max' has a wrong offset!");

}

