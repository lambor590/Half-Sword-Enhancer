#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "VertexPaintDetectionPlugin_classes.hpp"
#include "VertexPaintDetectionPlugin_parameters.hpp"


namespace SDK
{

// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetAllVertexColorsOnlyTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentGetAllVertexColorsOnlyTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentGetAllVertexColorsOnlyTasks");

	Params::VertexPaintDetectionComponent_GetCurrentGetAllVertexColorsOnlyTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetClosestVertexDataTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentGetClosestVertexDataTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentGetClosestVertexDataTasks");

	Params::VertexPaintDetectionComponent_GetCurrentGetClosestVertexDataTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentGetColorsWithinAreaTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentGetColorsWithinAreaTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentGetColorsWithinAreaTasks");

	Params::VertexPaintDetectionComponent_GetCurrentGetColorsWithinAreaTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintAtLocationTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentPaintAtLocationTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentPaintAtLocationTasks");

	Params::VertexPaintDetectionComponent_GetCurrentPaintAtLocationTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintColorSnippetTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentPaintColorSnippetTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentPaintColorSnippetTasks");

	Params::VertexPaintDetectionComponent_GetCurrentPaintColorSnippetTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintEntireMeshTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentPaintEntireMeshTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentPaintEntireMeshTasks");

	Params::VertexPaintDetectionComponent_GetCurrentPaintEntireMeshTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentPaintWithinAreaTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentPaintWithinAreaTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentPaintWithinAreaTasks");

	Params::VertexPaintDetectionComponent_GetCurrentPaintWithinAreaTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentSetMeshComponentVertexColorsTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentSetMeshComponentVertexColorsTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentSetMeshComponentVertexColorsTasks");

	Params::VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class UPrimitiveComponent*> ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<int32, class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks");

	Params::VertexPaintDetectionComponent_GetCurrentSetMeshComponentVertexColorsUsingSerializedStringTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentTasksInitiatedByComponent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TotalAmountOfTasks                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfGetClosestVertexDataTasks                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfGetAllVertexColorsOnlyTasks                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfGetColorsWithinAreaTasks                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfPaintAtLocationTasks                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfPaintWithinAreaTasks                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfPaintEntireMeshTasks                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfPaintColorSnippetTasks                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfSetMeshComponentVertexColorsTasks              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintDetectionComponent::GetCurrentTasksInitiatedByComponent(int32* TotalAmountOfTasks, int32* AmountOfGetClosestVertexDataTasks, int32* AmountOfGetAllVertexColorsOnlyTasks, int32* AmountOfGetColorsWithinAreaTasks, int32* AmountOfPaintAtLocationTasks, int32* AmountOfPaintWithinAreaTasks, int32* AmountOfPaintEntireMeshTasks, int32* AmountOfPaintColorSnippetTasks, int32* AmountOfSetMeshComponentVertexColorsTasks, int32* AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentTasksInitiatedByComponent");

	Params::VertexPaintDetectionComponent_GetCurrentTasksInitiatedByComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TotalAmountOfTasks != nullptr)
		*TotalAmountOfTasks = Parms.TotalAmountOfTasks;

	if (AmountOfGetClosestVertexDataTasks != nullptr)
		*AmountOfGetClosestVertexDataTasks = Parms.AmountOfGetClosestVertexDataTasks;

	if (AmountOfGetAllVertexColorsOnlyTasks != nullptr)
		*AmountOfGetAllVertexColorsOnlyTasks = Parms.AmountOfGetAllVertexColorsOnlyTasks;

	if (AmountOfGetColorsWithinAreaTasks != nullptr)
		*AmountOfGetColorsWithinAreaTasks = Parms.AmountOfGetColorsWithinAreaTasks;

	if (AmountOfPaintAtLocationTasks != nullptr)
		*AmountOfPaintAtLocationTasks = Parms.AmountOfPaintAtLocationTasks;

	if (AmountOfPaintWithinAreaTasks != nullptr)
		*AmountOfPaintWithinAreaTasks = Parms.AmountOfPaintWithinAreaTasks;

	if (AmountOfPaintEntireMeshTasks != nullptr)
		*AmountOfPaintEntireMeshTasks = Parms.AmountOfPaintEntireMeshTasks;

	if (AmountOfPaintColorSnippetTasks != nullptr)
		*AmountOfPaintColorSnippetTasks = Parms.AmountOfPaintColorSnippetTasks;

	if (AmountOfSetMeshComponentVertexColorsTasks != nullptr)
		*AmountOfSetMeshComponentVertexColorsTasks = Parms.AmountOfSetMeshComponentVertexColorsTasks;

	if (AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks != nullptr)
		*AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks = Parms.AmountOfSetMeshComponentVertexColorsUsingSerializedStringTasks;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetCurrentTasksMeshComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UPrimitiveComponent*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPrimitiveComponent*> UVertexPaintDetectionComponent::GetCurrentTasksMeshComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetCurrentTasksMeshComponents");

	Params::VertexPaintDetectionComponent_GetCurrentTasksMeshComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.GetTotalTasksInitiatedByComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintDetectionComponent::GetTotalTasksInitiatedByComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "GetTotalTasksInitiatedByComponent");

	Params::VertexPaintDetectionComponent_GetTotalTasksInitiatedByComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.HasAnyTasksQueuedUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintDetectionComponent::HasAnyTasksQueuedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "HasAnyTasksQueuedUp");

	Params::VertexPaintDetectionComponent_HasAnyTasksQueuedUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionComponent.TaskRemovedByTaskQueue
// (Native, Protected, HasOutParams)
// Parameters:
// struct FRVPDPCalculateColorsInfo        CalculateColorsInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintDetectionComponent::TaskRemovedByTaskQueue(const struct FRVPDPCalculateColorsInfo& CalculateColorsInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionComponent", "TaskRemovedByTaskQueue");

	Params::VertexPaintDetectionComponent_TaskRemovedByTaskQueue Parms{};

	Parms.CalculateColorsInfo = std::move(CalculateColorsInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.AutoPaintDelayFinished
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::AutoPaintDelayFinished(class UPrimitiveComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "AutoPaintDelayFinished");

	Params::AutoAddColorComponent_AutoPaintDelayFinished Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.AutoPaintedActorDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::AutoPaintedActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "AutoPaintedActorDestroyed");

	Params::AutoAddColorComponent_AutoPaintedActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.PauseAllAutoPainting
// (Native, Public, BlueprintCallable)

void UAutoAddColorComponent::PauseAllAutoPainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "PauseAllAutoPainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.PauseAutoPaintingMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::PauseAutoPaintingMesh(class UPrimitiveComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "PauseAutoPaintingMesh");

	Params::AutoAddColorComponent_PauseAutoPaintingMesh Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.ResumeAllAutoPainting
// (Native, Public, BlueprintCallable)

void UAutoAddColorComponent::ResumeAllAutoPainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "ResumeAllAutoPainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.ResumeAutoPaintingMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::ResumeAutoPaintingMesh(class UPrimitiveComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "ResumeAutoPaintingMesh");

	Params::AutoAddColorComponent_ResumeAutoPaintingMesh Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyStartNewTaskIfChangeWasMade                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade(class UPrimitiveComponent* MeshComponent, bool OnlyStartNewTaskIfChangeWasMade)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade");

	Params::AutoAddColorComponent_SetIfAutoPaintedMeshShouldOnlyStartNewTaskIfChangeWasMade Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.OnlyStartNewTaskIfChangeWasMade = OnlyStartNewTaskIfChangeWasMade;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.StartNewRoundOfTasks
// (Final, Native, Private)

void UAutoAddColorComponent::StartNewRoundOfTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "StartNewRoundOfTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.StopAllAutoPainting
// (Native, Public, BlueprintCallable)

void UAutoAddColorComponent::StopAllAutoPainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "StopAllAutoPainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.StopAutoPaintingMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoAddColorComponent::StopAutoPaintingMesh(class UPrimitiveComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "StopAutoPaintingMesh");

	Params::AutoAddColorComponent_StopAutoPaintingMesh Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.CanAutoPaintedMeshGetPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorComponent::CanAutoPaintedMeshGetPaused(const class UPrimitiveComponent* MeshComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "CanAutoPaintedMeshGetPaused");

	Params::AutoAddColorComponent_CanAutoPaintedMeshGetPaused Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorComponent::GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade(const class UPrimitiveComponent* MeshComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade");

	Params::AutoAddColorComponent_GetIfMeshShouldOnlyStartNewTaskIfChangeWasMade Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetIsAutoPainting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorComponent::GetIsAutoPainting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "GetIsAutoPainting");

	Params::AutoAddColorComponent_GetIsAutoPainting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.GetMeshesBeingAutoPainted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPAutoAddColorSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPAutoAddColorSettings> UAutoAddColorComponent::GetMeshesBeingAutoPainted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "GetMeshesBeingAutoPainted");

	Params::AutoAddColorComponent_GetMeshesBeingAutoPainted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.IsAutoPaintedMeshPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorComponent::IsAutoPaintedMeshPaused(const class UPrimitiveComponent* MeshComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "IsAutoPaintedMeshPaused");

	Params::AutoAddColorComponent_IsAutoPaintedMeshPaused Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorComponent.IsNewRoundOfTasksGoingToStartAfterDelay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorComponent::IsNewRoundOfTasksGoingToStartAfterDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorComponent", "IsNewRoundOfTasksGoingToStartAfterDelay");

	Params::AutoAddColorComponent_IsNewRoundOfTasksGoingToStartAfterDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.AddAutoPaintEntireMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintOnEntireMeshSettings  PaintEntireMeshSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ResumeIfPaused                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorEntireMeshComponent::AddAutoPaintEntireMesh(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintOnEntireMeshSettings& PaintEntireMeshSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings, bool ResumeIfPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorEntireMeshComponent", "AddAutoPaintEntireMesh");

	Params::AutoAddColorEntireMeshComponent_AddAutoPaintEntireMesh Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintEntireMeshSettings = std::move(PaintEntireMeshSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);
	Parms.ResumeIfPaused = ResumeIfPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.GetAutoPaintingEntireMeshesAdditionalDataSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> UAutoAddColorEntireMeshComponent::GetAutoPaintingEntireMeshesAdditionalDataSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorEntireMeshComponent", "GetAutoPaintingEntireMeshesAdditionalDataSettings");

	Params::AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesAdditionalDataSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.GetAutoPaintingEntireMeshesPaintSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPPaintOnEntireMeshSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPPaintOnEntireMeshSettings> UAutoAddColorEntireMeshComponent::GetAutoPaintingEntireMeshesPaintSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorEntireMeshComponent", "GetAutoPaintingEntireMeshesPaintSettings");

	Params::AutoAddColorEntireMeshComponent_GetAutoPaintingEntireMeshesPaintSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorEntireMeshComponent.UpdateAutoPaintedEntireMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintOnEntireMeshSettings  PaintEntireMeshSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)

void UAutoAddColorEntireMeshComponent::UpdateAutoPaintedEntireMesh(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintOnEntireMeshSettings& PaintEntireMeshSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorEntireMeshComponent", "UpdateAutoPaintedEntireMesh");

	Params::AutoAddColorEntireMeshComponent_UpdateAutoPaintedEntireMesh Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintEntireMeshSettings = std::move(PaintEntireMeshSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.AddAutoPaintAtLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintAtLocationSettings    PaintAtLocationSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ResumeIfPaused                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorPaintAtLocComponent::AddAutoPaintAtLocation(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintAtLocationSettings& PaintAtLocationSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings, bool ResumeIfPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorPaintAtLocComponent", "AddAutoPaintAtLocation");

	Params::AutoAddColorPaintAtLocComponent_AddAutoPaintAtLocation Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintAtLocationSettings = std::move(PaintAtLocationSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);
	Parms.ResumeIfPaused = ResumeIfPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.GetAutoPaintingAtLocationAdditionalDataSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> UAutoAddColorPaintAtLocComponent::GetAutoPaintingAtLocationAdditionalDataSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorPaintAtLocComponent", "GetAutoPaintingAtLocationAdditionalDataSettings");

	Params::AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationAdditionalDataSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.GetAutoPaintingAtLocationPaintSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPPaintAtLocationSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPPaintAtLocationSettings> UAutoAddColorPaintAtLocComponent::GetAutoPaintingAtLocationPaintSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorPaintAtLocComponent", "GetAutoPaintingAtLocationPaintSettings");

	Params::AutoAddColorPaintAtLocComponent_GetAutoPaintingAtLocationPaintSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorPaintAtLocComponent.UpdateAutoPaintedAtLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintAtLocationSettings    PaintAtLocationSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)

void UAutoAddColorPaintAtLocComponent::UpdateAutoPaintedAtLocation(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintAtLocationSettings& PaintAtLocationSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorPaintAtLocComponent", "UpdateAutoPaintedAtLocation");

	Params::AutoAddColorPaintAtLocComponent_UpdateAutoPaintedAtLocation Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintAtLocationSettings = std::move(PaintAtLocationSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.AddAutoPaintWithinArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintWithinAreaSettings    PaintWithinAreaSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ResumeIfPaused                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoAddColorWithinAreaComponent::AddAutoPaintWithinArea(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintWithinAreaSettings& PaintWithinAreaSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings, bool ResumeIfPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorWithinAreaComponent", "AddAutoPaintWithinArea");

	Params::AutoAddColorWithinAreaComponent_AddAutoPaintWithinArea Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintWithinAreaSettings = std::move(PaintWithinAreaSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);
	Parms.ResumeIfPaused = ResumeIfPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.GetAutoPaintingWithinAreaAdditionalDataSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPAdditionalDataToPassThroughInfo> UAutoAddColorWithinAreaComponent::GetAutoPaintingWithinAreaAdditionalDataSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorWithinAreaComponent", "GetAutoPaintingWithinAreaAdditionalDataSettings");

	Params::AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaAdditionalDataSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.GetAutoPaintingWithinAreaPaintSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class UPrimitiveComponent*, struct FRVPDPPaintWithinAreaSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, struct FRVPDPPaintWithinAreaSettings> UAutoAddColorWithinAreaComponent::GetAutoPaintingWithinAreaPaintSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorWithinAreaComponent", "GetAutoPaintingWithinAreaPaintSettings");

	Params::AutoAddColorWithinAreaComponent_GetAutoPaintingWithinAreaPaintSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.AutoAddColorWithinAreaComponent.UpdateAutoPaintedWithinArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintWithinAreaSettings    PaintWithinAreaSettings                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAutoAddColorSettings       AutoAddColorSettings                                   (Parm, NativeAccessSpecifierPublic)

void UAutoAddColorWithinAreaComponent::UpdateAutoPaintedWithinArea(class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintWithinAreaSettings& PaintWithinAreaSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData, const struct FRVPDPAutoAddColorSettings& AutoAddColorSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoAddColorWithinAreaComponent", "UpdateAutoPaintedWithinArea");

	Params::AutoAddColorWithinAreaComponent_UpdateAutoPaintedWithinArea Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.PaintWithinAreaSettings = std::move(PaintWithinAreaSettings);
	Parms.AdditionalData = std::move(AdditionalData);
	Parms.AutoAddColorSettings = std::move(AutoAddColorSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.GetClothObjectsToSphereTrace
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<EObjectTypeQuery>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EObjectTypeQuery> UVertexPaintClothOverlapComponent::GetClothObjectsToSphereTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "GetClothObjectsToSphereTrace");

	Params::VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.OnRep_ClothOverlapTracingEnabled
// (Native, Protected)

void UVertexPaintClothOverlapComponent::OnRep_ClothOverlapTracingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "OnRep_ClothOverlapTracingEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothObjectsTypesToSphereTrace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<EObjectTypeQuery>                ClothObjectTypes                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVertexPaintClothOverlapComponent::SetClothObjectsTypesToSphereTrace(const TArray<EObjectTypeQuery>& ClothObjectTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "SetClothObjectsTypesToSphereTrace");

	Params::VertexPaintClothOverlapComponent_SetClothObjectsTypesToSphereTrace Parms{};

	Parms.ClothObjectTypes = std::move(ClothObjectTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothOverlapTracingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    EnableClothTracing                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintClothOverlapComponent::SetClothOverlapTracingEnabled(bool EnableClothTracing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "SetClothOverlapTracingEnabled");

	Params::VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled Parms{};

	Parms.EnableClothTracing = EnableClothTracing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.CheckAndGetTheComponentsThatMatchGroupChildSnippets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GroupSnippetID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>      MeshComponents                                         (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TMap<class FString, class UPrimitiveComponent*>ChildSnippetsAndMatchingMeshes                         (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintColorSnippetRefs::CheckAndGetTheComponentsThatMatchGroupChildSnippets(const class UObject* WorldContextObject, const class FString& GroupSnippetID, const TArray<class UPrimitiveComponent*>& MeshComponents, TMap<class FString, class UPrimitiveComponent*>* ChildSnippetsAndMatchingMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "CheckAndGetTheComponentsThatMatchGroupChildSnippets");

	Params::VertexPaintColorSnippetRefs_CheckAndGetTheComponentsThatMatchGroupChildSnippets Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GroupSnippetID = std::move(GroupSnippetID);
	Parms.MeshComponents = std::move(MeshComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildSnippetsAndMatchingMeshes != nullptr)
		*ChildSnippetsAndMatchingMeshes = std::move(Parms.ChildSnippetsAndMatchingMeshes);

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.ContainsColorSnippet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SnippetID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OptionalHasToBeStoredInDataAsset                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVertexPaintColorSnippetDataAsset*DataAsset                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintColorSnippetRefs::ContainsColorSnippet(const class FString& SnippetID, bool OptionalHasToBeStoredInDataAsset, class UVertexPaintColorSnippetDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "ContainsColorSnippet");

	Params::VertexPaintColorSnippetRefs_ContainsColorSnippet Parms{};

	Parms.SnippetID = std::move(SnippetID);
	Parms.OptionalHasToBeStoredInDataAsset = OptionalHasToBeStoredInDataAsset;
	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsAndDataAssetForObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FRVPDPStoredColorSnippetInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FRVPDPStoredColorSnippetInfo> UVertexPaintColorSnippetRefs::GetAllColorSnippetsAndDataAssetForObject(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetAllColorSnippetsAndDataAssetForObject");

	Params::VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsInSpecifiedDataAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintColorSnippetDataAsset*ColorSnippetDataAsset                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeChildGroupSnippets                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FRVPDPStoredColorSnippetInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FRVPDPStoredColorSnippetInfo> UVertexPaintColorSnippetRefs::GetAllColorSnippetsInSpecifiedDataAsset(const class UVertexPaintColorSnippetDataAsset* ColorSnippetDataAsset, bool IncludeChildGroupSnippets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetAllColorSnippetsInSpecifiedDataAsset");

	Params::VertexPaintColorSnippetRefs_GetAllColorSnippetsInSpecifiedDataAsset Parms{};

	Parms.ColorSnippetDataAsset = ColorSnippetDataAsset;
	Parms.IncludeChildGroupSnippets = IncludeChildGroupSnippets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllGroupSnippetsInSpecifiedDataAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintColorSnippetDataAsset*ColorSnippetDataAsset                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FRVPDPGroupColorSnippetInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FRVPDPGroupColorSnippetInfo> UVertexPaintColorSnippetRefs::GetAllGroupSnippetsInSpecifiedDataAsset(const class UVertexPaintColorSnippetDataAsset* ColorSnippetDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetAllGroupSnippetsInSpecifiedDataAsset");

	Params::VertexPaintColorSnippetRefs_GetAllGroupSnippetsInSpecifiedDataAsset Parms{};

	Parms.ColorSnippetDataAsset = ColorSnippetDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetChildSnippetInfosAssociatedWithGroupSnippetID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GroupSnippetID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FRVPDPStoredColorSnippetInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FRVPDPStoredColorSnippetInfo> UVertexPaintColorSnippetRefs::GetChildSnippetInfosAssociatedWithGroupSnippetID(const class UObject* WorldContextObject, const class FString& GroupSnippetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetChildSnippetInfosAssociatedWithGroupSnippetID");

	Params::VertexPaintColorSnippetRefs_GetChildSnippetInfosAssociatedWithGroupSnippetID Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GroupSnippetID = std::move(GroupSnippetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetObjectFromSnippetID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SnippetID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UVertexPaintColorSnippetRefs::GetObjectFromSnippetID(const class FString& SnippetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetObjectFromSnippetID");

	Params::VertexPaintColorSnippetRefs_GetObjectFromSnippetID Parms{};

	Parms.SnippetID = std::move(SnippetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionGISubSystem.RegisteredDetectTaskCallbackOwnerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintDetectionGISubSystem::RegisteredDetectTaskCallbackOwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionGISubSystem", "RegisteredDetectTaskCallbackOwnerDestroyed");

	Params::VertexPaintDetectionGISubSystem_RegisteredDetectTaskCallbackOwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionGISubSystem.RegisteredPaintTaskCallbackOwnerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintDetectionGISubSystem::RegisteredPaintTaskCallbackOwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionGISubSystem", "RegisteredPaintTaskCallbackOwnerDestroyed");

	Params::VertexPaintDetectionGISubSystem_RegisteredPaintTaskCallbackOwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothBeginOverlappingMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ClothBeginOverlappingMesh(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ClothBeginOverlappingMesh");

	Params::VertexPaintDetectionInterface_ClothBeginOverlappingMesh Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothEndOverlappingMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ClothEndOverlappingMesh(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ClothEndOverlappingMesh");

	Params::VertexPaintDetectionInterface_ClothEndOverlappingMesh Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ColorsAppliedOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskSettings          PaintedOnActorSettings                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ColorsAppliedOnActor(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPPaintTaskSettings& PaintedOnActorSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ColorsAppliedOnActor");

	Params::VertexPaintDetectionInterface_ColorsAppliedOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.PaintedOnActorSettings = std::move(PaintedOnActorSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.DetectTaskFinishedOnRegisteredMeshComponent
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::DetectTaskFinishedOnRegisteredMeshComponent(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "DetectTaskFinishedOnRegisteredMeshComponent");

	Params::VertexPaintDetectionInterface_DetectTaskFinishedOnRegisteredMeshComponent Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetAllVertexColorsOnlyOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPGetColorsOnlySettings      GotAllVertexColorsWithSettings                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::GetAllVertexColorsOnlyOnActor(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetColorsOnlySettings& GotAllVertexColorsWithSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetAllVertexColorsOnlyOnActor");

	Params::VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.GotAllVertexColorsWithSettings = std::move(GotAllVertexColorsWithSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetClosestVertexDataOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPGetClosestVertexDataSettingsGetClosestVertexDataSettings                           (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPClosestVertexDataResults   ClosestVertexColorResult                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPEstimatedColorAtHitLocationInfoEstimatedColorAtHitLocationResult                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAverageColorInAreaInfo     AverageColorInAreaInfo                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::GetClosestVertexDataOnActor(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetClosestVertexDataSettings& GetClosestVertexDataSettings, const struct FRVPDPClosestVertexDataResults& ClosestVertexColorResult, const struct FRVPDPEstimatedColorAtHitLocationInfo& EstimatedColorAtHitLocationResult, const struct FRVPDPAverageColorInAreaInfo& AverageColorInAreaInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetClosestVertexDataOnActor");

	Params::VertexPaintDetectionInterface_GetClosestVertexDataOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.GetClosestVertexDataSettings = std::move(GetClosestVertexDataSettings);
	Parms.ClosestVertexColorResult = std::move(ClosestVertexColorResult);
	Parms.EstimatedColorAtHitLocationResult = std::move(EstimatedColorAtHitLocationResult);
	Parms.AverageColorInAreaInfo = std::move(AverageColorInAreaInfo);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetColorsWithinArea
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPGetColorsWithinAreaSettingsGetColorsWithinAreaSettings                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPWithinAreaResults          WithinAreaResults                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::GetColorsWithinArea(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPGetColorsWithinAreaSettings& GetColorsWithinAreaSettings, const struct FRVPDPWithinAreaResults& WithinAreaResults, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetColorsWithinArea");

	Params::VertexPaintDetectionInterface_GetColorsWithinArea Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.GetColorsWithinAreaSettings = std::move(GetColorsWithinAreaSettings);
	Parms.WithinAreaResults = std::move(WithinAreaResults);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetSkeletalMeshClothPhysicsSettings
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponentTryingToGetClothSettingsFor       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UClothingAssetBase*, struct FRVPDPVertexChannelsChaosClothPhysicsSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class UClothingAssetBase*, struct FRVPDPVertexChannelsChaosClothPhysicsSettings> IVertexPaintDetectionInterface::GetSkeletalMeshClothPhysicsSettings(class USkeletalMeshComponent* SkeletalMeshComponentTryingToGetClothSettingsFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetSkeletalMeshClothPhysicsSettings");

	Params::VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings Parms{};

	Parms.SkeletalMeshComponentTryingToGetClothSettingsFor = SkeletalMeshComponentTryingToGetClothSettingsFor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.OverrideVertexColorToApply
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// int32                                   OverrideID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVertexPaintDetectionComponent*   AssociatedPaintComponent                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshApplyingColorsTo                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentLOD                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentVertexIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MaterialVertexIsOn                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVertexOnCloth                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneVertexIsOn                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          VertexPositionInWorldSpace                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          VertexNormal                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           CurrentVertexColor                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        CurrentVertexMostDominantPhysicsSurface                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentVertexMostDominantPhysicsSurfaceValue           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           UpdatedVertexColorToApply                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WantsToApplyUpdatedVertexColor                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyUpdatedOrOverridenVertexColors                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideVertexColorsToApply                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           VertexColorsToOverrideWith                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::OverrideVertexColorToApply(int32 OverrideID, class UVertexPaintDetectionComponent* AssociatedPaintComponent, class UPrimitiveComponent* MeshApplyingColorsTo, int32 CurrentLOD, int32 CurrentVertexIndex, class UMaterialInterface* MaterialVertexIsOn, bool IsVertexOnCloth, const class FName& BoneVertexIsOn, const struct FVector& VertexPositionInWorldSpace, const struct FVector& VertexNormal, const struct FColor& CurrentVertexColor, EPhysicalSurface CurrentVertexMostDominantPhysicsSurface, float CurrentVertexMostDominantPhysicsSurfaceValue, const struct FColor& UpdatedVertexColorToApply, bool WantsToApplyUpdatedVertexColor, bool* ApplyUpdatedOrOverridenVertexColors, bool* OverrideVertexColorsToApply, struct FColor* VertexColorsToOverrideWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "OverrideVertexColorToApply");

	Params::VertexPaintDetectionInterface_OverrideVertexColorToApply Parms{};

	Parms.OverrideID = OverrideID;
	Parms.AssociatedPaintComponent = AssociatedPaintComponent;
	Parms.MeshApplyingColorsTo = MeshApplyingColorsTo;
	Parms.CurrentLOD = CurrentLOD;
	Parms.CurrentVertexIndex = CurrentVertexIndex;
	Parms.MaterialVertexIsOn = MaterialVertexIsOn;
	Parms.IsVertexOnCloth = IsVertexOnCloth;
	Parms.BoneVertexIsOn = BoneVertexIsOn;
	Parms.VertexPositionInWorldSpace = std::move(VertexPositionInWorldSpace);
	Parms.VertexNormal = std::move(VertexNormal);
	Parms.CurrentVertexColor = std::move(CurrentVertexColor);
	Parms.CurrentVertexMostDominantPhysicsSurface = CurrentVertexMostDominantPhysicsSurface;
	Parms.CurrentVertexMostDominantPhysicsSurfaceValue = CurrentVertexMostDominantPhysicsSurfaceValue;
	Parms.UpdatedVertexColorToApply = std::move(UpdatedVertexColorToApply);
	Parms.WantsToApplyUpdatedVertexColor = WantsToApplyUpdatedVertexColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ApplyUpdatedOrOverridenVertexColors != nullptr)
		*ApplyUpdatedOrOverridenVertexColors = Parms.ApplyUpdatedOrOverridenVertexColors;

	if (OverrideVertexColorsToApply != nullptr)
		*OverrideVertexColorsToApply = Parms.OverrideVertexColorsToApply;

	if (VertexColorsToOverrideWith != nullptr)
		*VertexColorsToOverrideWith = std::move(Parms.VertexColorsToOverrideWith);
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_AtLocation
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPPaintAtLocationSettings    PaintedAtLocationSettings                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPClosestVertexDataResults   ClosestVertexColorResult                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPEstimatedColorAtHitLocationInfoEstimatedColorAtHitLocationResult                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAverageColorInAreaInfo     AverageColorInAreaInfo                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_AtLocation(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPPaintAtLocationSettings& PaintedAtLocationSettings, const struct FRVPDPClosestVertexDataResults& ClosestVertexColorResult, const struct FRVPDPEstimatedColorAtHitLocationInfo& EstimatedColorAtHitLocationResult, const struct FRVPDPAverageColorInAreaInfo& AverageColorInAreaInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_AtLocation");

	Params::VertexPaintDetectionInterface_PaintedOnActor_AtLocation Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.PaintedAtLocationSettings = std::move(PaintedAtLocationSettings);
	Parms.ClosestVertexColorResult = std::move(ClosestVertexColorResult);
	Parms.EstimatedColorAtHitLocationResult = std::move(EstimatedColorAtHitLocationResult);
	Parms.AverageColorInAreaInfo = std::move(AverageColorInAreaInfo);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_EntireMesh
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPPaintOnEntireMeshSettings  PaintedEntireMeshSettings                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_EntireMesh(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPPaintOnEntireMeshSettings& PaintedEntireMeshSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_EntireMesh");

	Params::VertexPaintDetectionInterface_PaintedOnActor_EntireMesh Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.PaintedEntireMeshSettings = std::move(PaintedEntireMeshSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_PaintColorSnippet
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPPaintColorSnippetSettings  PaintedColorSnippetSettings                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_PaintColorSnippet(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPPaintColorSnippetSettings& PaintedColorSnippetSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_PaintColorSnippet");

	Params::VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.PaintedColorSnippetSettings = std::move(PaintedColorSnippetSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_SetMeshComponentVertexColors
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPSetVertexColorsSettings    SetMeshComponentVertexColorSettings                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_SetMeshComponentVertexColors(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPSetVertexColorsSettings& SetMeshComponentVertexColorSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_SetMeshComponentVertexColors");

	Params::VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColors Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.SetMeshComponentVertexColorSettings = std::move(SetMeshComponentVertexColorSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPSetVertexColorsUsingSerializedStringSettingsSetMeshComponentVertexColorUsingSerializedStringSettings(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPSetVertexColorsUsingSerializedStringSettings& SetMeshComponentVertexColorUsingSerializedStringSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString");

	Params::VertexPaintDetectionInterface_PaintedOnActor_SetMeshComponentVertexColorsUsingSerializedString Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.SetMeshComponentVertexColorUsingSerializedStringSettings = std::move(SetMeshComponentVertexColorUsingSerializedStringSettings);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_WithinArea
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPPaintWithinAreaSettings    PaintedWithinAreaSettings                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPWithinAreaResults          WithinAreaResults                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_WithinArea(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPPaintWithinAreaSettings& PaintedWithinAreaSettings, const struct FRVPDPWithinAreaResults& WithinAreaResults, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_WithinArea");

	Params::VertexPaintDetectionInterface_PaintedOnActor_WithinArea Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.PaintedWithinAreaSettings = std::move(PaintedWithinAreaSettings);
	Parms.WithinAreaResults = std::move(WithinAreaResults);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintTaskFinishedOnRegisteredMeshComponent
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRVPDPTaskResults                TaskResultInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintTaskResultInfo        PaintTaskResultInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintTaskFinishedOnRegisteredMeshComponent(const struct FRVPDPTaskResults& TaskResultInfo, const struct FRVPDPPaintTaskResultInfo& PaintTaskResultInfo, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintTaskFinishedOnRegisteredMeshComponent");

	Params::VertexPaintDetectionInterface_PaintTaskFinishedOnRegisteredMeshComponent Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.PaintTaskResultInfo = std::move(PaintTaskResultInfo);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.AdjustBoxCollisionToFillAreaBetweenTwoLocations
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UBoxComponent*                    BoxCollision                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          FromLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ToLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BoxThickness                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::AdjustBoxCollisionToFillAreaBetweenTwoLocations(class UBoxComponent* BoxCollision, const struct FVector& FromLocation, const struct FVector& ToLocation, float BoxThickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "AdjustBoxCollisionToFillAreaBetweenTwoLocations");

	Params::VertexPaintFunctionLibrary_AdjustBoxCollisionToFillAreaBetweenTwoLocations Parms{};

	Parms.BoxCollision = BoxCollision;
	Parms.FromLocation = std::move(FromLocation);
	Parms.ToLocation = std::move(ToLocation);
	Parms.BoxThickness = BoxThickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.AsyncLoadAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class UObject>>   AssetsToLoad                                           (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    PrintResultsToLog                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  LoadedAssets                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AssetLoadPriority                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::AsyncLoadAssets(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<TSoftObjectPtr<class UObject>>& AssetsToLoad, bool PrintResultsToLog, TArray<class UObject*>* LoadedAssets, bool* Success, int32 AssetLoadPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "AsyncLoadAssets");

	Params::VertexPaintFunctionLibrary_AsyncLoadAssets Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.AssetsToLoad = std::move(AssetsToLoad);
	Parms.PrintResultsToLog = PrintResultsToLog;
	Parms.AssetLoadPriority = AssetLoadPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LoadedAssets != nullptr)
		*LoadedAssets = std::move(Parms.LoadedAssets);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CalcAABBWithoutUniformCheck
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USkinnedMeshComponent*            MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LocalToWorld                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UVertexPaintFunctionLibrary::CalcAABBWithoutUniformCheck(const class USkinnedMeshComponent* MeshComponent, const struct FTransform& LocalToWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "CalcAABBWithoutUniformCheck");

	Params::VertexPaintFunctionLibrary_CalcAABBWithoutUniformCheck Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.LocalToWorld = std::move(LocalToWorld);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CollisionChannelToObjectType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EObjectTypeQuery                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EObjectTypeQuery UVertexPaintFunctionLibrary::CollisionChannelToObjectType(ECollisionChannel CollisionChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "CollisionChannelToObjectType");

	Params::VertexPaintFunctionLibrary_CollisionChannelToObjectType Parms{};

	Parms.CollisionChannel = CollisionChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicsSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        ParentOfPhysicsSurfaceFamily                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily(const class UObject* WorldContextObject, EPhysicalSurface PhysicsSurface, EPhysicalSurface ParentOfPhysicsSurfaceFamily)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily");

	Params::VertexPaintFunctionLibrary_DoesPhysicsSurfaceBelongToPhysicsSurfaceFamily Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PhysicsSurface = PhysicsSurface;
	Parms.ParentOfPhysicsSurfaceFamily = ParentOfPhysicsSurfaceFamily;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DrawPrimitiveComponentBoundsBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ColorToDraw                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::DrawPrimitiveComponentBoundsBox(class UPrimitiveComponent* PrimitiveComponent, float Lifetime, float Thickness, const struct FLinearColor& ColorToDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "DrawPrimitiveComponentBoundsBox");

	Params::VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.Lifetime = Lifetime;
	Parms.Thickness = Thickness;
	Parms.ColorToDraw = std::move(ColorToDraw);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllColorSnippetsUnderGroupSnippetAsString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GroupSnippetID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVertexPaintFunctionLibrary::GetAllColorSnippetsUnderGroupSnippetAsString(const class UObject* WorldContextObject, const class FString& GroupSnippetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllColorSnippetsUnderGroupSnippetAsString");

	Params::VertexPaintFunctionLibrary_GetAllColorSnippetsUnderGroupSnippetAsString Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GroupSnippetID = std::move(GroupSnippetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsString_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FRVPDPStoredColorSnippetInfo>AvailableColorSnippetsAndDataAssets                    (Parm, OutParm, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsAsString_Wrapper(class UPrimitiveComponent* MeshComponent, TMap<class FString, struct FRVPDPStoredColorSnippetInfo>* AvailableColorSnippetsAndDataAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsAsString_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetsAndDataAssets != nullptr)
		*AvailableColorSnippetsAndDataAssets = std::move(Parms.AvailableColorSnippetsAndDataAssets);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsTags_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssets                 (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsAsTags_Wrapper(class UPrimitiveComponent* MeshComponent, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsAsTags_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssets != nullptr)
		*AvailableColorSnippetTagsAndDataAssets = std::move(Parms.AvailableColorSnippetTagsAndDataAssets);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TagCategory                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssetsUnderTagCategory (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FGameplayTag& TagCategory, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssetsUnderTagCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.TagCategory = std::move(TagCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssetsUnderTagCategory != nullptr)
		*AvailableColorSnippetTagsAndDataAssetsUnderTagCategory = std::move(Parms.AvailableColorSnippetTagsAndDataAssetsUnderTagCategory);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllPhysicsSurfaces
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<EPhysicalSurface>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EPhysicalSurface> UVertexPaintFunctionLibrary::GetAllPhysicsSurfaces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllPhysicsSurfaces");

	Params::VertexPaintFunctionLibrary_GetAllPhysicsSurfaces Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllTagsUnderTagCategory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TagCategory                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGameplayTag>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGameplayTag> UVertexPaintFunctionLibrary::GetAllTagsUnderTagCategory(const class UObject* WorldContextObject, const struct FGameplayTag& TagCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllTagsUnderTagCategory");

	Params::VertexPaintFunctionLibrary_GetAllTagsUnderTagCategory Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TagCategory = std::move(TagCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicsSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<ESurfaceAtChannel>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<ESurfaceAtChannel> UVertexPaintFunctionLibrary::GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper(const class UObject* WorldContextObject, class UMaterialInterface* Material, EPhysicalSurface PhysicsSurface, bool* Successful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Material = Material;
	Parms.PhysicsSurface = PhysicsSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfColorSnippetChildsFromGroupSnippet
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GroupSnippet                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintFunctionLibrary::GetAmountOfColorSnippetChildsFromGroupSnippet(const class UObject* WorldContextObject, const struct FGameplayTag& GroupSnippet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfColorSnippetChildsFromGroupSnippet");

	Params::VertexPaintFunctionLibrary_GetAmountOfColorSnippetChildsFromGroupSnippet Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GroupSnippet = std::move(GroupSnippet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfLODsToPaintOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComp                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideLODToPaintUpOn                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OverrideUpToLOD                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintFunctionLibrary::GetAmountOfLODsToPaintOn(class UPrimitiveComponent* MeshComp, bool OverrideLODToPaintUpOn, int32 OverrideUpToLOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfLODsToPaintOn");

	Params::VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn Parms{};

	Parms.MeshComp = MeshComp;
	Parms.OverrideLODToPaintUpOn = OverrideLODToPaintUpOn;
	Parms.OverrideUpToLOD = OverrideUpToLOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FColor>                   VertexColors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   MinColorAmountToBeConsidered                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPAmountOfColorsOfEachChannelResultsReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FRVPDPAmountOfColorsOfEachChannelResults UVertexPaintFunctionLibrary::GetAmountOfPaintedColorsForEachChannel(const TArray<struct FColor>& VertexColors, float MinColorAmountToBeConsidered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfPaintedColorsForEachChannel");

	Params::VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel Parms{};

	Parms.VertexColors = std::move(VertexColors);
	Parms.MinColorAmountToBeConsidered = MinColorAmountToBeConsidered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannelAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   VertexColors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRVPDPAmountOfColorsOfEachChannelResultsAmountOfColorsOfEachChannel                            (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   MinColorAmountToBeConsidered                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAmountOfPaintedColorsForEachChannelAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<struct FColor>& VertexColors, struct FRVPDPAmountOfColorsOfEachChannelResults* AmountOfColorsOfEachChannel, float MinColorAmountToBeConsidered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfPaintedColorsForEachChannelAsync");

	Params::VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannelAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.VertexColors = std::move(VertexColors);
	Parms.MinColorAmountToBeConsidered = MinColorAmountToBeConsidered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AmountOfColorsOfEachChannel != nullptr)
		*AmountOfColorsOfEachChannel = std::move(Parms.AmountOfColorsOfEachChannel);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsDetectionTasksAmount_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UPrimitiveComponent*, int32> ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, int32> UVertexPaintFunctionLibrary::GetCalculateColorsDetectionTasksAmount_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetCalculateColorsDetectionTasksAmount_Wrapper");

	Params::VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsPaintTasksAmount_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UPrimitiveComponent*, int32> ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, int32> UVertexPaintFunctionLibrary::GetCalculateColorsPaintTasksAmount_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetCalculateColorsPaintTasksAmount_Wrapper");

	Params::VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetChannelsPhysicsSurfaceIsRegisteredTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MaterialToApplyColorsTo                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicalSurface                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AtRedChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AtGreenChannel                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AtBlueChannel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AtAlphaChannel                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetChannelsPhysicsSurfaceIsRegisteredTo(const class UObject* WorldContextObject, class UMaterialInterface* MaterialToApplyColorsTo, const EPhysicalSurface& PhysicalSurface, bool* AtRedChannel, bool* AtGreenChannel, bool* AtBlueChannel, bool* AtAlphaChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetChannelsPhysicsSurfaceIsRegisteredTo");

	Params::VertexPaintFunctionLibrary_GetChannelsPhysicsSurfaceIsRegisteredTo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MaterialToApplyColorsTo = MaterialToApplyColorsTo;
	Parms.PhysicalSurface = PhysicalSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AtRedChannel != nullptr)
		*AtRedChannel = Parms.AtRedChannel;

	if (AtGreenChannel != nullptr)
		*AtGreenChannel = Parms.AtGreenChannel;

	if (AtBlueChannel != nullptr)
		*AtBlueChannel = Parms.AtBlueChannel;

	if (AtAlphaChannel != nullptr)
		*AtAlphaChannel = Parms.AtAlphaChannel;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClothAssets
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UClothingAssetBase*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClothingAssetBase*> UVertexPaintFunctionLibrary::GetClothAssets(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetClothAssets");

	Params::VertexPaintFunctionLibrary_GetClothAssets Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetReferenceDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          OptionalWorldContextObject                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVertexPaintColorSnippetRefs*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintColorSnippetRefs* UVertexPaintFunctionLibrary::GetColorSnippetReferenceDataAsset(const class UObject* OptionalWorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetColorSnippetReferenceDataAsset");

	Params::VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset Parms{};

	Parms.OptionalWorldContextObject = OptionalWorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetVertexColorsAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ColorSnippetTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ObjectSnippetIsAssociatedWith                          (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ColorSnippetVertexColors                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetColorSnippetVertexColorsAsync(class UObject* WorldContextObject, const struct FGameplayTag& ColorSnippetTag, const struct FLatentActionInfo& LatentInfo, TSoftObjectPtr<class UObject>* ObjectSnippetIsAssociatedWith, TArray<struct FColor>* ColorSnippetVertexColors, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetColorSnippetVertexColorsAsync");

	Params::VertexPaintFunctionLibrary_GetColorSnippetVertexColorsAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ColorSnippetTag = std::move(ColorSnippetTag);
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectSnippetIsAssociatedWith != nullptr)
		*ObjectSnippetIsAssociatedWith = Parms.ObjectSnippetIsAssociatedWith;

	if (ColorSnippetVertexColors != nullptr)
		*ColorSnippetVertexColors = std::move(Parms.ColorSnippetVertexColors);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetComponentBoundsBottomWorldZ
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVertexPaintFunctionLibrary::GetComponentBoundsBottomWorldZ(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetComponentBoundsBottomWorldZ");

	Params::VertexPaintFunctionLibrary_GetComponentBoundsBottomWorldZ Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetComponentBoundsTopWorldZ
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVertexPaintFunctionLibrary::GetComponentBoundsTopWorldZ(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetComponentBoundsTopWorldZ");

	Params::VertexPaintFunctionLibrary_GetComponentBoundsTopWorldZ Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetChildFromGroupSnippet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GroupSnippet                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>      GroupSnippetMeshes                                     (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVertexPaintFunctionLibrary::GetMeshColorSnippetChildFromGroupSnippet(class UPrimitiveComponent* MeshComponent, const struct FGameplayTag& GroupSnippet, const TArray<class UPrimitiveComponent*>& GroupSnippetMeshes, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshColorSnippetChildFromGroupSnippet");

	Params::VertexPaintFunctionLibrary_GetMeshColorSnippetChildFromGroupSnippet Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.GroupSnippet = std::move(GroupSnippet);
	Parms.GroupSnippetMeshes = std::move(GroupSnippetMeshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetsTagsInTagCategory_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TagCategory                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssetsUnderTagCategory (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetMeshColorSnippetsTagsInTagCategory_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FGameplayTag& TagCategory, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssetsUnderTagCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshColorSnippetsTagsInTagCategory_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.TagCategory = std::move(TagCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssetsUnderTagCategory != nullptr)
		*AvailableColorSnippetTagsAndDataAssetsUnderTagCategory = std::move(Parms.AvailableColorSnippetTagsAndDataAssetsUnderTagCategory);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentAmountOfVerticesOnLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintFunctionLibrary::GetMeshComponentAmountOfVerticesOnLOD(class UPrimitiveComponent* MeshComponent, int32 Lod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshComponentAmountOfVerticesOnLOD");

	Params::VertexPaintFunctionLibrary_GetMeshComponentAmountOfVerticesOnLOD Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.Lod = Lod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentSourceMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* UVertexPaintFunctionLibrary::GetMeshComponentSourceMesh(class UPrimitiveComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshComponentSourceMesh");

	Params::VertexPaintFunctionLibrary_GetMeshComponentSourceMesh Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColors_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetColorsForAllLODs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GetColorsUpToLOD                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPVertexDataInfo             ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FRVPDPVertexDataInfo UVertexPaintFunctionLibrary::GetMeshComponentVertexColors_Wrapper(class UPrimitiveComponent* MeshComponent, bool* Success, bool GetColorsForAllLODs, int32 GetColorsUpToLOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshComponentVertexColors_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.GetColorsForAllLODs = GetColorsForAllLODs;
	Parms.GetColorsUpToLOD = GetColorsUpToLOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColorsAtLOD_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> UVertexPaintFunctionLibrary::GetMeshComponentVertexColorsAtLOD_Wrapper(class UPrimitiveComponent* MeshComponent, int32 Lod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshComponentVertexColorsAtLOD_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshComponentVertexColorsAtLOD_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.Lod = Lod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetOptimizationDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          OptionalWorldContextObject                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVertexPaintOptimizationDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintOptimizationDataAsset* UVertexPaintFunctionLibrary::GetOptimizationDataAsset(const class UObject* OptionalWorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetOptimizationDataAsset");

	Params::VertexPaintFunctionLibrary_GetOptimizationDataAsset Parms{};

	Parms.OptionalWorldContextObject = OptionalWorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetParentsOfPhysicsSurface_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicalSurface                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EPhysicalSurface>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EPhysicalSurface> UVertexPaintFunctionLibrary::GetParentsOfPhysicsSurface_Wrapper(const class UObject* WorldContextObject, EPhysicalSurface PhysicalSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetParentsOfPhysicsSurface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetParentsOfPhysicsSurface_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PhysicalSurface = PhysicalSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicalMaterialUsingPhysicsSurface_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UPhysicalMaterial>    PhysicalMaterialClass                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicsSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* UVertexPaintFunctionLibrary::GetPhysicalMaterialUsingPhysicsSurface_Wrapper(const class UObject* WorldContextObject, TSubclassOf<class UPhysicalMaterial> PhysicalMaterialClass, EPhysicalSurface PhysicsSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetPhysicalMaterialUsingPhysicsSurface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PhysicalMaterialClass = PhysicalMaterialClass;
	Parms.PhysicsSurface = PhysicsSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicsSurfaceFamilies_Wrapper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EPhysicalSurface, struct FRVPDPRegisteredPhysicsSurfacesSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EPhysicalSurface, struct FRVPDPRegisteredPhysicsSurfacesSettings> UVertexPaintFunctionLibrary::GetPhysicsSurfaceFamilies_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetPhysicsSurfaceFamilies_Wrapper");

	Params::VertexPaintFunctionLibrary_GetPhysicsSurfaceFamilies_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicsSurfacesRegisteredToMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EPhysicalSurface>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EPhysicalSurface> UVertexPaintFunctionLibrary::GetPhysicsSurfacesRegisteredToMaterial(const class UObject* WorldContextObject, class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetPhysicsSurfacesRegisteredToMaterial");

	Params::VertexPaintFunctionLibrary_GetPhysicsSurfacesRegisteredToMaterial Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetSubstringAfterLastCharacter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Character                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVertexPaintFunctionLibrary::GetSubstringAfterLastCharacter(const class FString& String, const class FString& Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetSubstringAfterLastCharacter");

	Params::VertexPaintFunctionLibrary_GetSubstringAfterLastCharacter Parms{};

	Parms.String = std::move(String);
	Parms.Character = std::move(Character);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheGroupSnippetAChildSnippetBelongsTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     childSnippet                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     groupSnippetChildBelongsTo                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::GetTheGroupSnippetAChildSnippetBelongsTo(const class UObject* WorldContextObject, const struct FGameplayTag& childSnippet, struct FGameplayTag* groupSnippetChildBelongsTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetTheGroupSnippetAChildSnippetBelongsTo");

	Params::VertexPaintFunctionLibrary_GetTheGroupSnippetAChildSnippetBelongsTo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.childSnippet = std::move(childSnippet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (groupSnippetChildBelongsTo != nullptr)
		*groupSnippetChildBelongsTo = std::move(Parms.groupSnippetChildBelongsTo);

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheMostDominantPhysicsSurface_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               OptionalMaterialPhysicsSurfaceWasDetectedOn            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EPhysicalSurface>                PhysicsSurfaces                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>                           PhysicsSurfaceValues                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EPhysicalSurface                        MostDominantPhysicsSurfaceFromArray                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MostDominantPhysicsSurfaceColorValue                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::GetTheMostDominantPhysicsSurface_Wrapper(const class UObject* WorldContextObject, class UMaterialInterface* OptionalMaterialPhysicsSurfaceWasDetectedOn, const TArray<EPhysicalSurface>& PhysicsSurfaces, const TArray<float>& PhysicsSurfaceValues, EPhysicalSurface* MostDominantPhysicsSurfaceFromArray, float* MostDominantPhysicsSurfaceColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetTheMostDominantPhysicsSurface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OptionalMaterialPhysicsSurfaceWasDetectedOn = OptionalMaterialPhysicsSurfaceWasDetectedOn;
	Parms.PhysicsSurfaces = std::move(PhysicsSurfaces);
	Parms.PhysicsSurfaceValues = std::move(PhysicsSurfaceValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MostDominantPhysicsSurfaceFromArray != nullptr)
		*MostDominantPhysicsSurfaceFromArray = Parms.MostDominantPhysicsSurfaceFromArray;

	if (MostDominantPhysicsSurfaceColorValue != nullptr)
		*MostDominantPhysicsSurfaceColorValue = Parms.MostDominantPhysicsSurfaceColorValue;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          OptionalWorldContextObject                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVertexPaintMaterialDataAsset*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintMaterialDataAsset* UVertexPaintFunctionLibrary::GetVertexPaintMaterialDataAsset(const class UObject* OptionalWorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetVertexPaintMaterialDataAsset");

	Params::VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset Parms{};

	Parms.OptionalWorldContextObject = OptionalWorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialInterface_Wrapper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<TSoftObjectPtr<class UMaterialInterface>, struct FRVPDPRegisteredMaterialSetting>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<TSoftObjectPtr<class UMaterialInterface>, struct FRVPDPRegisteredMaterialSetting> UVertexPaintFunctionLibrary::GetVertexPaintMaterialInterface_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetVertexPaintMaterialInterface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetVertexPaintMaterialInterface_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsAssetsLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class UObject>>   AssetsToCheck                                          (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::IsAssetsLoaded(class UObject* WorldContextObject, const TArray<TSoftObjectPtr<class UObject>>& AssetsToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "IsAssetsLoaded");

	Params::VertexPaintFunctionLibrary_IsAssetsLoaded Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AssetsToCheck = std::move(AssetsToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>Material                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper(const class UObject* WorldContextObject, TSoftObjectPtr<class UMaterialInterface> Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper");

	Params::VertexPaintFunctionLibrary_IsMaterialAddedToPaintOnMaterialDataAsset_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsPlayInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::IsPlayInEditor(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "IsPlayInEditor");

	Params::VertexPaintFunctionLibrary_IsPlayInEditor Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsWorldValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           World                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::IsWorldValid(const class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "IsWorldValid");

	Params::VertexPaintFunctionLibrary_IsWorldValid Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypesToTraceFor                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    TraceComplex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreSelf                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite>ClosestUniqueMeshesWithBones                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   DebugDrawTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper(const class UObject* WorldContextObject, const struct FVector& Location, float Radius, ETraceTypeQuery TraceChannel, const TArray<EObjectTypeQuery>& ObjectTypesToTraceFor, const TArray<class AActor*>& ActorsToIgnore, bool TraceComplex, bool IgnoreSelf, EDrawDebugTrace DrawDebugType, TArray<struct FRVPDPTraceForClosestUniqueMeshesAndBonesPrerequisite>* ClosestUniqueMeshesWithBones, float DebugDrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper");

	Params::VertexPaintFunctionLibrary_MultiSphereTraceForClosestUniqueMeshesAndBones_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.TraceChannel = TraceChannel;
	Parms.ObjectTypesToTraceFor = std::move(ObjectTypesToTraceFor);
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.TraceComplex = TraceComplex;
	Parms.IgnoreSelf = IgnoreSelf;
	Parms.DrawDebugType = DrawDebugType;
	Parms.DebugDrawTime = DebugDrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ClosestUniqueMeshesWithBones != nullptr)
		*ClosestUniqueMeshesWithBones = std::move(Parms.ClosestUniqueMeshesWithBones);

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ObjectTypeToCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EObjectTypeQuery                        ObjectType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionChannel UVertexPaintFunctionLibrary::ObjectTypeToCollisionChannel(EObjectTypeQuery ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "ObjectTypeToCollisionChannel");

	Params::VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel Parms{};

	Parms.ObjectType = ObjectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ObjectToRegisterForCallbacks                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper(class UPrimitiveComponent* MeshComponent, class UObject* ObjectToRegisterForCallbacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");

	Params::VertexPaintFunctionLibrary_RegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.ObjectToRegisterForCallbacks = ObjectToRegisterForCallbacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ObjectToRegisterForCallbacks                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper(class UPrimitiveComponent* MeshComponent, class UObject* ObjectToRegisterForCallbacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");

	Params::VertexPaintFunctionLibrary_RegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.ObjectToRegisterForCallbacks = ObjectToRegisterForCallbacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ReliableFColorToFLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UVertexPaintFunctionLibrary::ReliableFColorToFLinearColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "ReliableFColorToFLinearColor");

	Params::VertexPaintFunctionLibrary_ReliableFColorToFLinearColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ReliableFLinearToFColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     LinearColor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UVertexPaintFunctionLibrary::ReliableFLinearToFColor(const struct FLinearColor& LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "ReliableFLinearToFColor");

	Params::VertexPaintFunctionLibrary_ReliableFLinearToFColor Parms{};

	Parms.LinearColor = std::move(LinearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RemoveComponentFromDetectTaskQueue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::RemoveComponentFromDetectTaskQueue(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "RemoveComponentFromDetectTaskQueue");

	Params::VertexPaintFunctionLibrary_RemoveComponentFromDetectTaskQueue Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.RemoveComponentFromPaintTaskQueue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::RemoveComponentFromPaintTaskQueue(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "RemoveComponentFromPaintTaskQueue");

	Params::VertexPaintFunctionLibrary_RemoveComponentFromPaintTaskQueue Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosClothPhysics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClothingAssetBase*               ClothingAsset                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPChaosClothPhysicsSettings  ClothPhysicsSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetChaosClothPhysics(class USkeletalMeshComponent* SkeletalMeshComponent, class UClothingAssetBase* ClothingAsset, const struct FRVPDPChaosClothPhysicsSettings& ClothPhysicsSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetChaosClothPhysics");

	Params::VertexPaintFunctionLibrary_SetChaosClothPhysics Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.ClothingAsset = ClothingAsset;
	Parms.ClothPhysicsSettings = std::move(ClothPhysicsSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosWheeledVehicleFrictionMultiplier_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UChaosWheeledVehicleMovementComponent*ChaosWheeledVehicleMovementComponent                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Friction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetChaosWheeledVehicleFrictionMultiplier_Wrapper(class UChaosWheeledVehicleMovementComponent* ChaosWheeledVehicleMovementComponent, int32 WheelIndex, float Friction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetChaosWheeledVehicleFrictionMultiplier_Wrapper");

	Params::VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper Parms{};

	Parms.ChaosWheeledVehicleMovementComponent = ChaosWheeledVehicleMovementComponent;
	Parms.WheelIndex = WheelIndex;
	Parms.Friction = Friction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshConstantVertexColorsAndEnablesThem
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UDynamicMesh*                     TargetMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometryScriptColorFlags        Flags_0                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bClearExisting                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryScriptDebug*             Debug                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicMesh*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicMesh* UVertexPaintFunctionLibrary::SetMeshConstantVertexColorsAndEnablesThem(class UDynamicMesh* TargetMesh, const struct FLinearColor& Color, const struct FGeometryScriptColorFlags& Flags_0, bool bClearExisting, class UGeometryScriptDebug* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetMeshConstantVertexColorsAndEnablesThem");

	Params::VertexPaintFunctionLibrary_SetMeshConstantVertexColorsAndEnablesThem Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.Color = std::move(Color);
	Parms.Flags_0 = std::move(Flags_0);
	Parms.bClearExisting = bClearExisting;
	Parms.Debug = Debug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetSkeletalMeshAndReleaseResources
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ClearVertexColorsOfChangedMesh                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetSkeletalMeshAndReleaseResources(class USkeletalMeshComponent* SkeletalMeshComponent, class USkeletalMesh* NewMesh, bool ClearVertexColorsOfChangedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetSkeletalMeshAndReleaseResources");

	Params::VertexPaintFunctionLibrary_SetSkeletalMeshAndReleaseResources Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.NewMesh = NewMesh;
	Parms.ClearVertexColorsOfChangedMesh = ClearVertexColorsOfChangedMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetStaticMeshAndReleaseResources
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ClearVertexColorsOfChangedMesh                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetStaticMeshAndReleaseResources(class UStaticMeshComponent* StaticMeshComponent, class UStaticMesh* NewMesh, bool ClearVertexColorsOfChangedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetStaticMeshAndReleaseResources");

	Params::VertexPaintFunctionLibrary_SetStaticMeshAndReleaseResources Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;
	Parms.NewMesh = NewMesh;
	Parms.ClearVertexColorsOfChangedMesh = ClearVertexColorsOfChangedMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ObjectToUnregisterForCallbacks                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper(class UPrimitiveComponent* MeshComponent, class UObject* ObjectToUnregisterForCallbacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");

	Params::VertexPaintFunctionLibrary_UnRegisterDetectTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.ObjectToUnregisterForCallbacks = ObjectToUnregisterForCallbacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ObjectToUnregisterForCallbacks                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper(class UPrimitiveComponent* MeshComponent, class UObject* ObjectToUnregisterForCallbacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper");

	Params::VertexPaintFunctionLibrary_UnRegisterPaintTaskCallbacksToObjectFromSpecifiedMeshComponent_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.ObjectToUnregisterForCallbacks = ObjectToUnregisterForCallbacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::UpdateChaosClothPhysicsWithExistingColors(class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "UpdateChaosClothPhysicsWithExistingColors");

	Params::VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColorsAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::UpdateChaosClothPhysicsWithExistingColorsAsync(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USkeletalMeshComponent* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "UpdateChaosClothPhysicsWithExistingColorsAsync");

	Params::VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColorsAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_GetSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_GetSkeletalMesh");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<int32, class FString>              AssetIndexAndName                                      (Parm, NativeAccessSpecifierPublic)
// TMap<int32, class FString>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, class FString> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically(const TMap<int32, class FString>& AssetIndexAndName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically Parms{};

	Parms.AssetIndexAndName = std::move(AssetIndexAndName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortStringArrayAlphabetically
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Strings                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SortStringArrayAlphabetically(const TArray<class FString>& Strings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SortStringArrayAlphabetically");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically Parms{};

	Parms.Strings = std::move(Strings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetRegisteredSkeletalMeshInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class USkeletalMesh*, struct FRVPDPRegisteredSkeletalMeshInfo>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class USkeletalMesh*, struct FRVPDPRegisteredSkeletalMeshInfo> UVertexPaintOptimizationDataAsset::GetRegisteredSkeletalMeshInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintOptimizationDataAsset", "GetRegisteredSkeletalMeshInfo");

	Params::VertexPaintOptimizationDataAsset_GetRegisteredSkeletalMeshInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetSkeletalMeshNumOfLODsToPaint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class USkeletalMesh*, struct FRVPDPPaintOnLODSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class USkeletalMesh*, struct FRVPDPPaintOnLODSettings> UVertexPaintOptimizationDataAsset::GetSkeletalMeshNumOfLODsToPaint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintOptimizationDataAsset", "GetSkeletalMeshNumOfLODsToPaint");

	Params::VertexPaintOptimizationDataAsset_GetSkeletalMeshNumOfLODsToPaint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintOptimizationDataAsset.GetStaticMeshNumOfLODsToPaint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class UStaticMesh*, struct FRVPDPPaintOnLODSettings>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class UStaticMesh*, struct FRVPDPPaintOnLODSettings> UVertexPaintOptimizationDataAsset::GetStaticMeshNumOfLODsToPaint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintOptimizationDataAsset", "GetStaticMeshNumOfLODsToPaint");

	Params::VertexPaintOptimizationDataAsset_GetStaticMeshNumOfLODsToPaint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetAllVertexColorsOnly_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPGetColorsOnlySettings      GetAllVertexColorsStruct                               (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::GetAllVertexColorsOnly_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPGetColorsOnlySettings& GetAllVertexColorsStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "GetAllVertexColorsOnly_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_GetAllVertexColorsOnly_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.GetAllVertexColorsStruct = std::move(GetAllVertexColorsStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetClosestVertexDataOnMesh_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPGetClosestVertexDataSettingsGetClosestVertexDataStruct                             (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::GetClosestVertexDataOnMesh_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPGetClosestVertexDataSettings& GetClosestVertexDataStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "GetClosestVertexDataOnMesh_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.GetClosestVertexDataStruct = std::move(GetClosestVertexDataStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.GetColorsWithinArea_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPGetColorsWithinAreaSettingsGetColorsWithinAreaStruct                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::GetColorsWithinArea_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPGetColorsWithinAreaSettings& GetColorsWithinAreaStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "GetColorsWithinArea_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_GetColorsWithinArea_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.GetColorsWithinAreaStruct = std::move(GetColorsWithinAreaStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintColorSnippetOnMesh_Wrappers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintColorSnippetSettings  PaintColorSnippetStruct                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::PaintColorSnippetOnMesh_Wrappers(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintColorSnippetSettings& PaintColorSnippetStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "PaintColorSnippetOnMesh_Wrappers");

	Params::VertexPaintTasksFunctionLibrary_PaintColorSnippetOnMesh_Wrappers Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintColorSnippetStruct = std::move(PaintColorSnippetStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintGroupSnippetOnMesh_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>      GroupSnippetMeshes                                     (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPPaintGroupSnippetSettings  PaintGroupSnippetStruct                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::PaintGroupSnippetOnMesh_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, const TArray<class UPrimitiveComponent*>& GroupSnippetMeshes, const struct FRVPDPPaintGroupSnippetSettings& PaintGroupSnippetStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "PaintGroupSnippetOnMesh_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_PaintGroupSnippetOnMesh_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.GroupSnippetMeshes = std::move(GroupSnippetMeshes);
	Parms.PaintGroupSnippetStruct = std::move(PaintGroupSnippetStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnEntireMesh_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintOnEntireMeshSettings  PaintOnEntireMeshStruct                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::PaintOnEntireMesh_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintOnEntireMeshSettings& PaintOnEntireMeshStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "PaintOnEntireMesh_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_PaintOnEntireMesh_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintOnEntireMeshStruct = std::move(PaintOnEntireMeshStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnMeshAtLocation_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintAtLocationSettings    PaintAtLocationStruct                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::PaintOnMeshAtLocation_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintAtLocationSettings& PaintAtLocationStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "PaintOnMeshAtLocation_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_PaintOnMeshAtLocation_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintAtLocationStruct = std::move(PaintAtLocationStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.PaintOnMeshWithinArea_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPPaintWithinAreaSettings    PaintWithinAreaStruct                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::PaintOnMeshWithinArea_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPPaintWithinAreaSettings& PaintWithinAreaStruct, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "PaintOnMeshWithinArea_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_PaintOnMeshWithinArea_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintWithinAreaStruct = std::move(PaintWithinAreaStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.SetMeshComponentVertexColors_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPSetVertexColorsSettings    SetMeshComponentVertexColorsSettings                   (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::SetMeshComponentVertexColors_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPSetVertexColorsSettings& SetMeshComponentVertexColorsSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "SetMeshComponentVertexColors_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColors_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.SetMeshComponentVertexColorsSettings = std::move(SetMeshComponentVertexColorsSettings);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintTasksFunctionLibrary.SetMeshComponentVertexColorsUsingSerializedString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRVPDPSetVertexColorsUsingSerializedStringSettingsSetMeshComponentVertexColorsUsingSerializedStringSettings(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRVPDPAdditionalDataToPassThroughInfoAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintTasksFunctionLibrary::SetMeshComponentVertexColorsUsingSerializedString_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FRVPDPSetVertexColorsUsingSerializedStringSettings& SetMeshComponentVertexColorsUsingSerializedStringSettings, const struct FRVPDPAdditionalDataToPassThroughInfo& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintTasksFunctionLibrary", "SetMeshComponentVertexColorsUsingSerializedString_Wrapper");

	Params::VertexPaintTasksFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.SetMeshComponentVertexColorsUsingSerializedStringSettings = std::move(SetMeshComponentVertexColorsUsingSerializedStringSettings);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

