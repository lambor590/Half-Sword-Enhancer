#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Living_Thing

#include "Basic.hpp"

#include "Attached_Transform_Str_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_Living_Thing.BPI_Living_Thing_C.Attach Decal
// 0x0078 (0x0078 - 0x0000)
struct BPI_Living_Thing_C_Attach_Decal final
{
public:
	class UDecalComponent*                        Decal;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FAttached_Transform_Str                Attach_Param;                                      // 0x0008(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Nul;                                               // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Living_Thing_C_Attach_Decal) == 0x000008, "Wrong alignment on BPI_Living_Thing_C_Attach_Decal");
static_assert(sizeof(BPI_Living_Thing_C_Attach_Decal) == 0x000078, "Wrong size on BPI_Living_Thing_C_Attach_Decal");
static_assert(offsetof(BPI_Living_Thing_C_Attach_Decal, Decal) == 0x000000, "Member 'BPI_Living_Thing_C_Attach_Decal::Decal' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Attach_Decal, Attach_Param) == 0x000008, "Member 'BPI_Living_Thing_C_Attach_Decal::Attach_Param' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Attach_Decal, Nul) == 0x000070, "Member 'BPI_Living_Thing_C_Attach_Decal::Nul' has a wrong offset!");

// Function BPI_Living_Thing.BPI_Living_Thing_C.Get Damage
// 0x00B0 (0x00B0 - 0x0000)
struct BPI_Living_Thing_C_Get_Damage final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   bone;                                              // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Raw_Damage;                                        // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cutting_Power;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside;                                            // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Damaged_Mesh;                                      // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Dism_Blunt;                                        // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lower_Threshold;                                   // 0x008C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shockwave;                                         // 0x008D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Hit_By_Component;                                  // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Stab_;                                             // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Hit_Box;                                           // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Damage_Out;                                        // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Living_Thing_C_Get_Damage) == 0x000008, "Wrong alignment on BPI_Living_Thing_C_Get_Damage");
static_assert(sizeof(BPI_Living_Thing_C_Get_Damage) == 0x0000B0, "Wrong size on BPI_Living_Thing_C_Get_Damage");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Impulse) == 0x000000, "Member 'BPI_Living_Thing_C_Get_Damage::Impulse' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Velocity) == 0x000018, "Member 'BPI_Living_Thing_C_Get_Damage::Velocity' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Location) == 0x000030, "Member 'BPI_Living_Thing_C_Get_Damage::Location' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Normal) == 0x000048, "Member 'BPI_Living_Thing_C_Get_Damage::Normal' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, bone) == 0x000060, "Member 'BPI_Living_Thing_C_Get_Damage::bone' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Raw_Damage) == 0x000068, "Member 'BPI_Living_Thing_C_Get_Damage::Raw_Damage' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Cutting_Power) == 0x000070, "Member 'BPI_Living_Thing_C_Get_Damage::Cutting_Power' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Inside) == 0x000078, "Member 'BPI_Living_Thing_C_Get_Damage::Inside' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Damaged_Mesh) == 0x000080, "Member 'BPI_Living_Thing_C_Get_Damage::Damaged_Mesh' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Dism_Blunt) == 0x000088, "Member 'BPI_Living_Thing_C_Get_Damage::Dism_Blunt' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Lower_Threshold) == 0x00008C, "Member 'BPI_Living_Thing_C_Get_Damage::Lower_Threshold' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Shockwave) == 0x00008D, "Member 'BPI_Living_Thing_C_Get_Damage::Shockwave' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Hit_By_Component) == 0x000090, "Member 'BPI_Living_Thing_C_Get_Damage::Hit_By_Component' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Stab_) == 0x000098, "Member 'BPI_Living_Thing_C_Get_Damage::Stab_' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Hit_Box) == 0x0000A0, "Member 'BPI_Living_Thing_C_Get_Damage::Hit_Box' has a wrong offset!");
static_assert(offsetof(BPI_Living_Thing_C_Get_Damage, Damage_Out) == 0x0000A8, "Member 'BPI_Living_Thing_C_Get_Damage::Damage_Out' has a wrong offset!");

}

